{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/StudyOfInterview/jcjtx.jpg","path":"images/StudyOfInterview/jcjtx.jpg","modified":0,"renderable":0},{"_id":"themes/Claudia/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/Claudia/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/assets/tabris-weixin.png","path":"assets/tabris-weixin.png","modified":0,"renderable":1},{"_id":"themes/Claudia/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/common.css","path":"css/common.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/highlight_atom.css","path":"css/highlight_atom.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/highlight_default.css","path":"css/highlight_default.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/highlight_github.css","path":"css/highlight_github.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/highlight_light.css","path":"css/highlight_light.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/highlight_rainbow.css","path":"css/highlight_rainbow.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/highlight_vs.css","path":"css/highlight_vs.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/layout.css","path":"css/layout.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/css/nav.css","path":"css/nav.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/Claudia/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/Claudia/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/js/search_core.js","path":"js/search_core.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Claudia/source/assets/tabris-qq.png","path":"assets/tabris-qq.png","modified":0,"renderable":1},{"_id":"themes/Claudia/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/Claudia/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/Claudia/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/jxjy-2B.jpg","path":"intro/jxjy-2B.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/zewg-yq.jpg","path":"intro/zewg-yq.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/avatar/qiu.jpg","path":"avatar/qiu.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/dsgl.jpg","path":"intro/dsgl.jpg","modified":0,"renderable":1},{"_id":"themes/Claudia/source/intro/jxjy-2B(2).jpg","path":"intro/jxjy-2B(2).jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7ec239693239964d066c29cef55ae28e203bca5f","modified":1555499795386},{"_id":"themes/Claudia/.gitignore","hash":"bd20d54c57507594cd16a21021c3600f9311a1f5","modified":1555502128656},{"_id":"themes/Claudia/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1555502128656},{"_id":"themes/Claudia/README.md","hash":"d258071ba3dc3945bc7fad64947cdc30d3ecfadd","modified":1555502128656},{"_id":"themes/Claudia/db.json","hash":"dfe8380263ace8fb180b4eb527e82db3e5a11978","modified":1555502128660},{"_id":"themes/Claudia/_config.yml","hash":"56845a0264b0a41eb5aae0b447ac94ebd1b63e66","modified":1555503959943},{"_id":"themes/Claudia/package.json","hash":"2bd54865c77917eb7ff10dcd8dbd236ba8defed7","modified":1555502128680},{"_id":"themes/Claudia/package-lock.json","hash":"f6b9586d6d62fcf95479a5a83fc4a31c0b5bfae7","modified":1555502128680},{"_id":"source/_posts/50274193.md","hash":"84d87fce99fd436f04f2872f35c5b792ee3a23f2","modified":1555506160866},{"_id":"source/_posts/50287091.md","hash":"5af1e5c4f6065d566a6608c9983ceddd633ac41e","modified":1555506160866},{"_id":"source/_posts/50354268.md","hash":"277245d471c0c9a6894b9246fd64fff979072308","modified":1555506160869},{"_id":"source/_posts/50378327.md","hash":"2f82e8718d9256473f7c0fad94b3828da31aa4aa","modified":1555506160869},{"_id":"source/_posts/50390031.md","hash":"2cccae9d58eca991dd9e122bcced2dda6bb9adfa","modified":1555506160869},{"_id":"source/_posts/50420183.md","hash":"d513fe9f501867dd8497f77a491abd04fe23e826","modified":1555506160869},{"_id":"source/_posts/50420268.md","hash":"37b2f3e1c1be7b60dc3a401a592d3fbc0c26cf97","modified":1555506160869},{"_id":"source/_posts/50570897.md","hash":"3468ccaa463c21390ece12913a7714b4d6e88143","modified":1555506160869},{"_id":"source/_posts/50761497.md","hash":"c3e86fc09dd029285d70901d1fd5760a99fb18e9","modified":1555506160872},{"_id":"source/_posts/50768959.md","hash":"1dc50a334fcdca929af7866ce3883570f63b9c39","modified":1555506160872},{"_id":"source/_posts/50772761.md","hash":"ed304d913ca8fcba6481a447b21eee2d401acb87","modified":1555506160872},{"_id":"source/_posts/50773461.md","hash":"4c89f0780112543bcfe9b95698eebb7ee5aead4b","modified":1555506160872},{"_id":"source/_posts/50774422.md","hash":"8a51e93e82de451adf696bcfbf5b1cdd24eac38f","modified":1555506160872},{"_id":"source/_posts/50787788.md","hash":"d9a344596d36e81fabb05ad7a5c04404851ae78f","modified":1555506160876},{"_id":"source/_posts/50775612.md","hash":"bda508c6e769f845c83204827582f50b58c0912e","modified":1555506160872},{"_id":"source/_posts/50790076.md","hash":"20ae0cde7f69e6eede2a10c052399725e7f21cee","modified":1555506160876},{"_id":"source/_posts/50790140.md","hash":"b9633b05aa6f0d36b267a8cf3786274cc25a8d28","modified":1555506160876},{"_id":"source/_posts/50811273.md","hash":"b5f947b657bb5995e22948acfd12e3e71db35b88","modified":1555506160876},{"_id":"source/_posts/50813093.md","hash":"7f9058b27d6c100600c84b3aa94e19244a8f7f94","modified":1555506160876},{"_id":"source/_posts/50813592.md","hash":"c22594e56bdc122085ad63a4f83605980489f489","modified":1555506160879},{"_id":"source/_posts/50813606.md","hash":"efca7d8c75c92bd030d51b862aba74cd234fea67","modified":1555506160879},{"_id":"source/_posts/50826765.md","hash":"eedb0ff2121280e87e2ba9f2bcbad8fcef3e68a5","modified":1555506160879},{"_id":"source/_posts/50834496.md","hash":"96263f172775317b72919b86ec5b77353829cacd","modified":1555506160879},{"_id":"source/_posts/50838424.md","hash":"b0484915b28ce0c5d4214a23626946ad74902dd0","modified":1555506160879},{"_id":"source/_posts/50838736.md","hash":"e2aa48161b9481cd7e7391cfd34d23673aebb706","modified":1555506160879},{"_id":"source/_posts/50848661.md","hash":"c8cdf04293262ebfe16ddfb1d63da2543b3389b5","modified":1555506160882},{"_id":"source/_posts/50865290.md","hash":"985cd00f2b261efc65f216e7175ad4a4fb9fc174","modified":1555506160882},{"_id":"source/_posts/50867690.md","hash":"072830ccb4ff68c2e5781ab9e3e55b1ec4231f32","modified":1555506160882},{"_id":"source/_posts/50878582.md","hash":"096fb6801c02412a5050f92892c21703779299b8","modified":1555506160882},{"_id":"source/_posts/50888118.md","hash":"6b6d4dd3b6f27d8535b2defc8ad01d6e3aded632","modified":1555506160882},{"_id":"source/_posts/50888426.md","hash":"620502beaae9321eb5ac6ae7543a321237167bd5","modified":1555506160882},{"_id":"source/_posts/50899795.md","hash":"59bf5ceea56773809dfe2d9aa7efe9af926da889","modified":1555506160886},{"_id":"source/_posts/50912690.md","hash":"fafba32d158eb460580ecf3fd03fd4c47aba5970","modified":1555506160886},{"_id":"source/_posts/50955548.md","hash":"b86cc3ec792cf47bffc8ec5650efc57327d13170","modified":1555506160886},{"_id":"source/_posts/51064266.md","hash":"75b8a89c560ee1a8b8ed8b448688846ee48fff7b","modified":1555506160886},{"_id":"source/_posts/51036352.md","hash":"146803e8124c2e7ee6bd10d50f09d9c4dd3620a1","modified":1555506160886},{"_id":"source/_posts/51064675.md","hash":"be8a17fd1400579f5afd5b7019769319475ff375","modified":1555506160886},{"_id":"source/_posts/51066516.md","hash":"56b9aa79abeb400a2d5d23e3e3809faefbb2af4f","modified":1555506160886},{"_id":"source/_posts/51068008.md","hash":"59b89be51947a62c19dc16c19f435c84f4a0eff3","modified":1555506160886},{"_id":"source/_posts/51100090.md","hash":"22886b2755ed98ea0826f75c30351d5bf30b970d","modified":1555506160889},{"_id":"source/_posts/51100211.md","hash":"a8564743a5efb1b7cfefb016da532e66ac4c455f","modified":1555506160889},{"_id":"source/_posts/51114254.md","hash":"766f68cb01a6b99d7570d38d57180f47050b6a29","modified":1555506160889},{"_id":"source/_posts/51114511.md","hash":"ffcf051de940b6ce45655854cedbbd762df53e54","modified":1555506160889},{"_id":"source/_posts/51124611.md","hash":"b77976899d66a738c34acf70c02e6995edb22f92","modified":1555506160889},{"_id":"source/_posts/51132938.md","hash":"616bd7a8a8008395bf9cef914e5b348466e1cc10","modified":1555506160889},{"_id":"source/_posts/51281788.md","hash":"6a4f155583b064dad55b230df3fb0392409875e9","modified":1555506160892},{"_id":"source/_posts/51284402.md","hash":"0b013172d540d23fe93088be6d39915aa2d09dbc","modified":1555506160892},{"_id":"source/_posts/51426587.md","hash":"cfdcb030c475fe4f7430aa5774aca67e1c72fe95","modified":1555506160892},{"_id":"source/_posts/51447994.md","hash":"421fe28ec26092efb1de7afbec3d795aecb9d23b","modified":1555506160892},{"_id":"source/_posts/51476184.md","hash":"9c91da1cd06d0c1b31e238a1744983d5205cee05","modified":1555506160892},{"_id":"source/_posts/51476199.md","hash":"3710de9c340ee6f0dbe8e2254bb5a0d63f950d4b","modified":1555506160892},{"_id":"source/_posts/51488462.md","hash":"78c0366e09a276d45aac1eafaf1806c87ade0460","modified":1555506160896},{"_id":"source/_posts/51544872.md","hash":"46d2bc531298dd305e131ddfce92fe2b05ea6402","modified":1555506160896},{"_id":"source/_posts/51596858.md","hash":"b9cc8a76a4c7346ec3733b82f173555ec3b82e9f","modified":1555506160899},{"_id":"source/_posts/51763961.md","hash":"1849d3ec7375fa9c9a09a8d81f963afa46c46180","modified":1555506160899},{"_id":"source/_posts/51778975.md","hash":"416f489663d844f5eb442ec511fd71d7d05423e5","modified":1555506160899},{"_id":"source/_posts/51779048.md","hash":"97d13c419e2623497ba5b3333ee546cc06f46e0c","modified":1555506160899},{"_id":"source/_posts/51783218.md","hash":"61201a6bb0648759032736428efe2dc8c7af9cc7","modified":1555506160902},{"_id":"source/_posts/51783994.md","hash":"766c31f695c7d32f27873ad4f08ad210985e348c","modified":1555506160902},{"_id":"source/_posts/51791054.md","hash":"3c95060394a0520e1038d4b672648545719d6c6f","modified":1555506160902},{"_id":"source/_posts/51811570.md","hash":"4fbe4dc1df9583a740b80369bb7870ec3ce051de","modified":1555506160902},{"_id":"source/_posts/51815810.md","hash":"5754d8037aa4605b1a0de37002a6c77bbe3e02ff","modified":1555506160902},{"_id":"source/_posts/51925879.md","hash":"7cea0b2decbb9a56e910a281c7b70ab5eefb029b","modified":1555506160906},{"_id":"source/_posts/51930813.md","hash":"081b13f6f2cc2edd0d42d45da9c2eac93e1c784c","modified":1555506160906},{"_id":"source/_posts/51931853.md","hash":"73495d0a2f94b7bc5b843543d5f6c24e6d236601","modified":1555506160906},{"_id":"source/_posts/51932828.md","hash":"5a5b4a6dd187437114bb365621bb8a55e15f480c","modified":1555506160906},{"_id":"source/_posts/51997347.md","hash":"244d7ef7b9bb311fc87913f226ed22dc37cbcbeb","modified":1555506160906},{"_id":"source/_posts/52003146.md","hash":"d3d3140f1fbdee0147263d325b7dab469307be0e","modified":1555506160906},{"_id":"source/_posts/52003317.md","hash":"f4e3e151ca7003dac81db0110fcc36574427a1bf","modified":1555506160906},{"_id":"source/_posts/52008038.md","hash":"605c456a6b6ff5c683c47a456e9bf4099ea0d3a8","modified":1555506160906},{"_id":"source/_posts/52014844.md","hash":"9b2ce7bb7a21f9702b5e18d33bcefca54dc93223","modified":1555506160906},{"_id":"source/_posts/52033548.md","hash":"4c5ceaefdd9c0db9a50ae7a2d7cdf0e73a595a89","modified":1555506160906},{"_id":"source/_posts/52040812.md","hash":"74e8942f65120bcee221a352454a4f93fe53e9fd","modified":1555506160906},{"_id":"source/_posts/52058872.md","hash":"9bd7e92ded5bb23e9e665a6bf2d69b5f40c41b5e","modified":1555506160906},{"_id":"source/_posts/52067386.md","hash":"513862a132f11eb5130fc2d77081ed5815a18b9d","modified":1555506160906},{"_id":"source/_posts/52073496.md","hash":"93bc0a85c32da1660a72cb7ae1571700eeda463c","modified":1555506160906},{"_id":"source/_posts/52102801.md","hash":"3c18bba5a1190a73552be85fbca2a14921d0f6a0","modified":1555506160906},{"_id":"source/_posts/52123533.md","hash":"ecc972d553b90466a1fd1d9c880c279137e74e72","modified":1555506160906},{"_id":"source/_posts/52128243.md","hash":"1c410098cee7927bda7e3cf9ba9bd758632ad91a","modified":1555506160906},{"_id":"source/_posts/52148588.md","hash":"199a6de9caca12d7423f945a6fd4dd99b6a17ec6","modified":1555506160909},{"_id":"source/_posts/52151010.md","hash":"ec798b86a1ea07236a63a0c18461d976b71bb728","modified":1555506160909},{"_id":"source/_posts/52169407.md","hash":"7b4c6542e3d1b3ec5574975d4be9f50ac15c55cd","modified":1555506160909},{"_id":"source/_posts/52171819.md","hash":"87a76587da5a7e07517374eef70b8ff4f52c1199","modified":1555506160909},{"_id":"source/_posts/52184669.md","hash":"b202435f4dec3da3f3b2733d3f77384fa3f02b74","modified":1555506160909},{"_id":"source/_posts/52181264.md","hash":"8e03cc29a51923296eb21fa81b6931ded2cb985d","modified":1555506160909},{"_id":"source/_posts/52186000.md","hash":"eb5321d1f89082b54bde08971e4ad3be0a01c207","modified":1555506160909},{"_id":"source/_posts/52186122.md","hash":"599db3eeedce2e092b2e13425f068c832f2fce57","modified":1555506160909},{"_id":"source/_posts/52186214.md","hash":"c8afcfc73f9251aa63ad70ca2b34eec12b17bd14","modified":1555506160909},{"_id":"source/_posts/52190898.md","hash":"a001c700e2b632dbcf20643871303b36d9a36ebc","modified":1555506160909},{"_id":"source/_posts/52208349.md","hash":"77413b5454b023265023ad667abea52017530864","modified":1555506160909},{"_id":"source/_posts/52251839.md","hash":"633cd102f9a580d5f7d3179396596490d826f958","modified":1555506160909},{"_id":"source/_posts/52267286.md","hash":"46c42b234a27ec38ec16f5e0cfb9baaf0ee9630e","modified":1555506160909},{"_id":"source/_posts/52280031.md","hash":"71f6ebf6b61b264d5db9cb8edc20ed47aad6cb7d","modified":1555506160909},{"_id":"source/_posts/52289905.md","hash":"4d8906d7dff8d95b062dce275166f38ae7c20f3e","modified":1555506160909},{"_id":"source/_posts/52302558.md","hash":"8d95e5ff4609b0b976b798f7b154ae66946e029a","modified":1555506160909},{"_id":"source/_posts/52294422.md","hash":"76113ea8e4ce3eb5f0eb4cc13b598f9d9399a660","modified":1555506160909},{"_id":"source/_posts/52315342.md","hash":"7e7d75591e260ab9f83dad2de4305595ae23bec5","modified":1555506160912},{"_id":"source/_posts/52317803.md","hash":"6f4e24a7e2594d9771b187dfd13ecb275b533f8d","modified":1555506160912},{"_id":"source/_posts/52319408.md","hash":"561be6773c691004a7c35d8b6092d8e0697843a7","modified":1555506160912},{"_id":"source/_posts/51183322.md","hash":"32b843d79f1e12d9fc3aa0869b60d33e27ddeec8","modified":1555506160892},{"_id":"source/_posts/51174895.md","hash":"597788d30f52e9cb69761808add57527390eff52","modified":1555506160889},{"_id":"source/_posts/51184895.md","hash":"5d0710aae81c65f7eabbdb11433ce0222dc6fd28","modified":1555506160892},{"_id":"source/_posts/52332586.md","hash":"adc0068671533d62d0ce5fdb20485e50c0555804","modified":1555506160912},{"_id":"source/_posts/52335175.md","hash":"265cfb044fb7b12981eec86ca580c0eaac6cca37","modified":1555506160912},{"_id":"source/_posts/52336164.md","hash":"a3b792ac0510535a6617f8aa7441eaa54fcea79b","modified":1555506160912},{"_id":"source/_posts/52385951.md","hash":"5ed427cd4844f6ed51ef4a3556f3b7a67ad8033c","modified":1555506160912},{"_id":"source/_posts/52399129.md","hash":"6a6dd3ce97b8c217ef656e312d90eba965946b3a","modified":1555506160912},{"_id":"source/_posts/52400477.md","hash":"acc21043eeac191b7b77cfa9583fba22cc042a8e","modified":1555506160912},{"_id":"source/_posts/52458744.md","hash":"de05b03baf2f172e3421b268e884265c2b487c29","modified":1555506160912},{"_id":"source/_posts/52486102.md","hash":"1da23997229bbf1407faca6429b68d938008c140","modified":1555506160912},{"_id":"source/_posts/52496677.md","hash":"0a9e7662b01e05941f6aec068ce688dcbbd480fe","modified":1555506160912},{"_id":"source/_posts/52503620.md","hash":"1e65394643ed6faf361ee376b95a53a15ef87d2e","modified":1555506160912},{"_id":"source/_posts/52504739.md","hash":"4d8f6f017501350171fd32a177983b3f2d074800","modified":1555506160912},{"_id":"source/_posts/52509493.md","hash":"a59c148f63c6bb843102c1aa5dc744bb854cf855","modified":1555506160916},{"_id":"source/_posts/52524819.md","hash":"e8950957776b11d38215a70c4e1d61d68ef71f5f","modified":1555506160916},{"_id":"source/_posts/52527503.md","hash":"3d97bf7d32885d37cba4b2a05c9cc5e610a7aaef","modified":1555506160916},{"_id":"source/_posts/52537683.md","hash":"f9228f5f2edf2009a2f2541690b3cec3021176eb","modified":1555506160916},{"_id":"source/_posts/52555267.md","hash":"6c3dae7dd69eb874216ee533a60620b64ca40934","modified":1555506160916},{"_id":"source/_posts/52556618.md","hash":"0fd804cfc880afa7d0cbe1c54a173102e3d339fc","modified":1555506160916},{"_id":"source/_posts/52578407.md","hash":"e8a838c59f6baed18cf04107b618b3484c54310c","modified":1555506160916},{"_id":"source/_posts/52588817.md","hash":"f0e926b2bceebbccd9fd5b730e16f00010faa37a","modified":1555506160916},{"_id":"source/_posts/52598186.md","hash":"093158290c53cf4ee84918e3fa7beadee8c1b449","modified":1555506160916},{"_id":"source/_posts/52611426.md","hash":"45501e7f327aea1ca748626c80e553cacd6d320c","modified":1555506160916},{"_id":"source/_posts/52612567.md","hash":"aa770a0265ec088f427e04dc3121d4451ab9bd65","modified":1555506160916},{"_id":"source/_posts/52613712.md","hash":"2a1cc076e07194d6524def6b188e97dedcb544b7","modified":1555506160916},{"_id":"source/_posts/52673118.md","hash":"4ffc15f5334d8c2e3274fbe54b0a1ae354c147d1","modified":1555506160916},{"_id":"source/_posts/52681216.md","hash":"1b67a4eb3b4417dbeca4b4de8e871389cfb794b3","modified":1555506160916},{"_id":"source/_posts/52710814.md","hash":"275338911bc15abd710448ffd4c95eb0e24e16df","modified":1555506160916},{"_id":"source/_posts/52734656.md","hash":"cd6f3a53ff3ece16844d70dc33d81515144aeef8","modified":1555506160916},{"_id":"source/_posts/52734843.md","hash":"077874b4b30a6ea8780a32e37923b143861abc7c","modified":1555506160916},{"_id":"source/_posts/52740134.md","hash":"4e4d7100862c847a3a3ec032eaf09429ec9b239d","modified":1555506160916},{"_id":"source/_posts/52782106.md","hash":"12d7b5d78bb9f8878cebd9334148e48203adac16","modified":1555506160919},{"_id":"source/_posts/52888634.md","hash":"3813af257f64db3c6697da2901d2ea61b094b6db","modified":1555506160919},{"_id":"source/_posts/52893406.md","hash":"b9b4de742cada69ca943596982d978d1e02a6ad1","modified":1555506160919},{"_id":"source/_posts/52916166.md","hash":"4c5f5b33f9c20132b9899273cd1ed9efa76e7dbb","modified":1555506160919},{"_id":"source/_posts/52926338.md","hash":"8d78653f5c41f2e9236ed6f21cf8f32da66b880b","modified":1555506160919},{"_id":"source/_posts/52946902.md","hash":"b70e3652c4f8e7b7f5a806555f55350fccf1db93","modified":1555506160919},{"_id":"source/_posts/52950443.md","hash":"0d58791291ecdf1569eebaafd060533e7e918836","modified":1555506160919},{"_id":"source/_posts/52974565.md","hash":"173b6f209ca62623a4d2558963d19fae2625db53","modified":1555506160919},{"_id":"source/_posts/52984325.md","hash":"fb9a4841c9d458b7b95cab6a3dc047d303c6dc9b","modified":1555506160919},{"_id":"source/_posts/53007513.md","hash":"4317efba3bac70131bd1d55c2d2eb17447f004ba","modified":1555506160919},{"_id":"source/_posts/53020524.md","hash":"a266666952176321064e21c5fb2e8c2a361d5c9c","modified":1555506160919},{"_id":"source/_posts/53033813.md","hash":"2c57d9211ab49c1c883e0955286263f4ee3af5fa","modified":1555506160919},{"_id":"source/_posts/53036273.md","hash":"c1f145a0922179183bb7679ae26fbe7ec20c3602","modified":1555506160919},{"_id":"source/_posts/53046282.md","hash":"5b3bc7a2aeaf3328825cfdfd81772ff04c9421cb","modified":1555506160919},{"_id":"source/_posts/53072003.md","hash":"66ea47d176e4b7286cdc57624485bef9cfdfb41e","modified":1555506160919},{"_id":"source/_posts/53086391.md","hash":"682cecb5d50e11fdc90a501b4ba0bf479055ebe3","modified":1555506160919},{"_id":"source/_posts/53086898.md","hash":"5f8d41e528d3b016ea3ad672acd4386df53111d4","modified":1555506160919},{"_id":"source/_posts/53088409.md","hash":"6a400edaade8cda7bcc0e9f2e5655c7156faa915","modified":1555506160922},{"_id":"source/_posts/53088871.md","hash":"75c84106d88355a46dc8da6f882d1c21e90d2c28","modified":1555506160922},{"_id":"source/_posts/53100103.md","hash":"c6ba5534ac489c517def8593f2a2bebb49ff0dea","modified":1555506160922},{"_id":"source/_posts/53105883.md","hash":"d47cd1be9827bc2b37c6bdfee374287517aaa736","modified":1555506160922},{"_id":"source/_posts/53106292.md","hash":"d1761fd70b94863cd64e27da09bb490334c68533","modified":1555506160922},{"_id":"source/_posts/53116979.md","hash":"7d16408e522d6e50c3b73d67ab0dbbea83fa4507","modified":1555506160922},{"_id":"source/_posts/53120130.md","hash":"ff42085efb06242bd06d55c5e699e91d4b8c2419","modified":1555506160922},{"_id":"source/_posts/53149713.md","hash":"14f91ffb6e7b64b03d41d46dde803e60e137ac90","modified":1555506160922},{"_id":"source/_posts/53163302.md","hash":"b03ab28d5486789f77dba7dd47227c0d4533dbcf","modified":1555506160922},{"_id":"source/_posts/53176786.md","hash":"de7d0dc0ed41cbe8662d37068a7e954510bfeefe","modified":1555506160922},{"_id":"source/_posts/53190165.md","hash":"c215f255afb12520f745125c3e13c65320974d71","modified":1555506160922},{"_id":"source/_posts/53400832.md","hash":"8609b86c2a2cf01ebe6245c116dc2dffeba1895b","modified":1555506160922},{"_id":"source/_posts/53413365.md","hash":"a8b72cf66d60ab43cafe169611bffbd2f32bc042","modified":1555506160922},{"_id":"source/_posts/53510746.md","hash":"1211d3ad213c24cb532cc24bf4c59a95768497e4","modified":1555506160922},{"_id":"source/_posts/53541831.md","hash":"4a1506fc447a8f24ae3a4f71ae773acb6dfd39df","modified":1555506160922},{"_id":"source/_posts/53912212.md","hash":"ec134fffbbae6284afd9e7cc13f594237b60ee26","modified":1555506160922},{"_id":"source/_posts/53949605.md","hash":"2184e47911aac1b5225f7bc25f49373d49882ba0","modified":1555506160922},{"_id":"source/_posts/54098779.md","hash":"8a4ae3af771e13b12527d459f01db0fa885f9898","modified":1555506160922},{"_id":"source/_posts/54150706.md","hash":"986e7f6ca389b3d69cc092d4f8c394c260a51bb6","modified":1555506160926},{"_id":"source/_posts/54234049.md","hash":"7e1d6103f09fe8a12591a35ed92a9d7350d71d4b","modified":1555506160926},{"_id":"source/_posts/54237933.md","hash":"9999c5e50529a9493b6672ea79eb8d1f4b29581d","modified":1555506160926},{"_id":"source/_posts/54263566.md","hash":"ca97729e265a4f7642c68d40f469e5b9993fbc52","modified":1555506160926},{"_id":"source/_posts/54297591.md","hash":"ec19a8358b0357285c8ee690d9520c53849919e5","modified":1555506160926},{"_id":"source/_posts/54300967.md","hash":"6501c501b25674a1687914e1e661bda2d2fb0103","modified":1555506160926},{"_id":"source/_posts/54319679.md","hash":"d60cb8ad1bf612fee928d65cda6a69cca40de025","modified":1555506160926},{"_id":"source/_posts/54336383.md","hash":"e5af5ffe0dfc78b0a5f37fff4debc2fb612d4017","modified":1555506160926},{"_id":"source/_posts/54350683.md","hash":"4076e13b86dadf8c0f98738d7f071daa0976fef0","modified":1555506160926},{"_id":"source/_posts/54354875.md","hash":"c241af0935d7e88f2fcc7d0f49a89ca0210c6cec","modified":1555506160926},{"_id":"source/_posts/54377643.md","hash":"438f1b45a709aee9d9cd43da00554fe62421e61d","modified":1555506160926},{"_id":"source/_posts/54378682.md","hash":"c5751c062389e682935b3bb4dd048f629a171952","modified":1555506160926},{"_id":"source/_posts/54413679.md","hash":"0915fadff2a937f082f3af5b928f529807633558","modified":1555506160926},{"_id":"source/_posts/54427994.md","hash":"577ce936a3cbf80cff087392c2d9e6018a38f8cb","modified":1555506160926},{"_id":"source/_posts/54562544.md","hash":"693b22049f62d4b803ddb55a97853ab42880f4dd","modified":1555506160926},{"_id":"source/_posts/54564954.md","hash":"7a3444bf275e56185c0f814bd613eced55e4edab","modified":1555506160926},{"_id":"source/_posts/54565617.md","hash":"36f4d5c8188c41c180751a2a9d2be4b85ce8e69a","modified":1555506160926},{"_id":"source/_posts/54574086.md","hash":"4fd4804a7c0e9bafad6e6e56869f2d58eb65be23","modified":1555506160929},{"_id":"source/_posts/54585519.md","hash":"4a14f2d07d5fec1ddd1c4efe69c9557389c0a4a3","modified":1555506160929},{"_id":"source/_posts/54602437.md","hash":"f291d477a1dc4a8767d7bf4920e16f098dab5162","modified":1555506160929},{"_id":"source/_posts/54645157.md","hash":"60f13afa9e2e2eead554b7d44552a5ada62b01bb","modified":1555506160929},{"_id":"source/_posts/54646369.md","hash":"1d35689f7b82867505d6eb8efc4285e7d32095d5","modified":1555506160929},{"_id":"source/_posts/54667131.md","hash":"a4c6a6de8efeb910fa27ae67ee5cf2a11dc48885","modified":1555506160929},{"_id":"source/_posts/54668103.md","hash":"d206d4b4636ea6e716566ebd7f33f41257640e9d","modified":1555506160929},{"_id":"source/_posts/54695958.md","hash":"d1889c61a22113ee58adae389e87308b4c57af66","modified":1555506160929},{"_id":"source/_posts/54707350.md","hash":"d5eb165995b3ac520ee948e73f21ddbe024a59f4","modified":1555506160929},{"_id":"source/_posts/54709231.md","hash":"6f8e66693fab5e4aefff4c2a729d0b613484016f","modified":1555506160929},{"_id":"source/_posts/54746352.md","hash":"33f2eec7b7f07ee200872169cbdd917595b6a4dd","modified":1555506160929},{"_id":"source/_posts/54746580.md","hash":"fafb9171e239dc78c7e7cdea95e2e6dbb021e271","modified":1555506160929},{"_id":"source/_posts/54780836.md","hash":"3884cbb3104ed4c7185b33b431657ac3d94384b7","modified":1555506160929},{"_id":"source/_posts/54809490.md","hash":"e7b31040c7d6c9af98f25942b2848e432d3723e1","modified":1555506160929},{"_id":"source/_posts/54838954.md","hash":"2283be8e76c0b72f128e1f50fef8592826e46963","modified":1555506160929},{"_id":"source/_posts/54885329.md","hash":"1efbeab0b812a36408f49341c4ce521374d13737","modified":1555506160929},{"_id":"source/_posts/54897814.md","hash":"5447fe25765bb721247cd4fbfd4e64817c7d16b0","modified":1555506160929},{"_id":"source/_posts/54914010.md","hash":"ac9697b3f783a3b393303c402110324c8094e334","modified":1555506160929},{"_id":"source/_posts/54924305.md","hash":"d4b1b767a2ea275f38d7263d35ea1da3e4dc8505","modified":1555506160932},{"_id":"source/_posts/54934055.md","hash":"80a5b16da90124a5d9402b5380402cbb00e14c90","modified":1555506160932},{"_id":"source/_posts/54934767.md","hash":"2d193c776cfc2575fce4c4d17fe01819a20583ac","modified":1555506160932},{"_id":"source/_posts/54935260.md","hash":"5c1dc787e2197cc9b546bf8e325bca3f34b9a38c","modified":1555506160932},{"_id":"source/_posts/54969932.md","hash":"f8f16c2274e12477b1b8d6d25c1f63749d68909a","modified":1555506160932},{"_id":"source/_posts/54971709.md","hash":"ea561e42efbba9cd8c9e1ad2cbc13e6d17d779fc","modified":1555506160932},{"_id":"source/_posts/54974236.md","hash":"3d90dd9ff843b4ee2859f8ed8455191759151a50","modified":1555506160932},{"_id":"source/_posts/54981815.md","hash":"587f13ab7d850ca45a450d63c09ea7253d87c4ac","modified":1555506160932},{"_id":"source/_posts/54982226.md","hash":"774a46c41761c9f111197244faa65de308f37895","modified":1555506160932},{"_id":"source/_posts/54982748.md","hash":"ae07a73fffb85720db7cd6971c16b4087b2f7f6d","modified":1555506160932},{"_id":"source/_posts/54989141.md","hash":"988919caa0e7376690ca9d06a1a6ee9182bcb0f8","modified":1555506160932},{"_id":"source/_posts/55006530.md","hash":"1515941cc5b24f044509d00d5deaf7a7e2cf0e3d","modified":1555506160932},{"_id":"source/_posts/55058123.md","hash":"fa8341b4c17623338bbd191d6e8fb238bf1462f4","modified":1555506160932},{"_id":"source/_posts/55060453.md","hash":"eb3527666d0720dd4fd2e0164de609e38d86f8bb","modified":1555506160932},{"_id":"source/_posts/55106268.md","hash":"f716bf747f36cb009a1baa07c58876410fdd5f93","modified":1555506160932},{"_id":"source/_posts/59480949.md","hash":"19384b42fc5d248b7a75a0f1e43773522c84ed3d","modified":1555506160932},{"_id":"source/_posts/59488912.md","hash":"d928b9fd94375399d468b2799e4eeef4f9cf6461","modified":1555506160932},{"_id":"source/_posts/60141601.md","hash":"b8a03c4260a13aafaf3c34287748124d35c5a1aa","modified":1555506160936},{"_id":"source/_posts/60145283.md","hash":"d27be296b5b42ba4af99440c577696082f972735","modified":1555506160936},{"_id":"source/_posts/60594774.md","hash":"30c2a906075e5992fa9595b15baca7c5b59ac374","modified":1555506160936},{"_id":"source/_posts/60953673.md","hash":"97da15f7cff39366b45fca6d215009958e3b2e9f","modified":1555506160936},{"_id":"source/_posts/60957820.md","hash":"410f500fad157fffadac7fad914392342640797c","modified":1555506160936},{"_id":"source/_posts/60982742.md","hash":"c0d3a60f0c183b80d0afdb6d34f1f6f0eedec9f8","modified":1555506160936},{"_id":"source/_posts/61023246.md","hash":"c70710b0975ac51afe37f68deab91ad1c99c8434","modified":1555506160936},{"_id":"source/_posts/61209605.md","hash":"89e5d716c22779d955fe0b3c6042d7500e090aaa","modified":1555506160936},{"_id":"source/_posts/61416622.md","hash":"2e87f3eeee413ae0f44b0e39c38db533d6871794","modified":1555506160936},{"_id":"source/_posts/61441552.md","hash":"e295613526cf0c05e25a7092598084a85a472551","modified":1555506160936},{"_id":"source/_posts/61466246.md","hash":"fc531e6b75ca1895b01dd071d1af4cb62c687ce2","modified":1555506160936},{"_id":"source/_posts/61631979.md","hash":"dadbb1e0e8166ce1b03496b43095ad53d08828dd","modified":1555506160936},{"_id":"source/_posts/61912463.md","hash":"5f0b7ea6c140ff8a6026e63e441d9b7b51710e6e","modified":1555506160936},{"_id":"source/_posts/61923707.md","hash":"2b2168e8c75308aa3bea956e848bfbb35a9375ef","modified":1555506160936},{"_id":"source/_posts/61929040.md","hash":"9adcd7cac3e3e42df0dafd461d21be58570abd8f","modified":1555506160936},{"_id":"source/_posts/62040995.md","hash":"33cb21e06312c47d2f32e006920096fe13ca4bf2","modified":1555506160936},{"_id":"source/_posts/62213988.md","hash":"1ff2cbcbe943f4fe50a4c20c2780f32e3dac936c","modified":1555506160939},{"_id":"source/_posts/52441909.md","hash":"580d5263146079b4798f3fc4f43ec58be80a513a","modified":1555506160912},{"_id":"source/_posts/62418811.md","hash":"d24422a8e1aeb6852eb49186d018a5fa38377cdc","modified":1555506160939},{"_id":"source/_posts/64432631.md","hash":"5184d51d1393c153092a7d9e788a279ea128cc44","modified":1555506160939},{"_id":"source/_posts/65935956.md","hash":"ce710e3d5ea3dc2b9d1d3cf4bdad4cd5bd26bc70","modified":1555506160939},{"_id":"source/_posts/65937719.md","hash":"0bd6725ccfa4c835c3ed928462899934a7f639e3","modified":1555506160939},{"_id":"source/_posts/66548177.md","hash":"7f9da2a0f2b591b2d9b3f28a44f8c85adfd60bf0","modified":1555506160939},{"_id":"source/_posts/66652353.md","hash":"908e478cefcd2ecdf3e20aff6eedc083410a3bfd","modified":1555506160939},{"_id":"source/_posts/68070650.md","hash":"985eedc3e278066d32c748825bd4013f336bfb85","modified":1555506160939},{"_id":"source/_posts/68083224.md","hash":"f26c669d0f3dd0f5f9da8f64bc49b6e465098dc0","modified":1555506160939},{"_id":"source/_posts/68234083.md","hash":"dc492c07c39fde2f57e3cff107f714855172bafc","modified":1555506160939},{"_id":"source/_posts/70227611.md","hash":"f9e49002eaf686280547862e04d41291c87afeae","modified":1555506160939},{"_id":"source/_posts/70232210.md","hash":"48c62fa3c59d93fbb2262911b44f104b64e0490e","modified":1555506160939},{"_id":"source/_posts/70304674.md","hash":"81ccb94de92bda36bdd1d6c293b4ab1652d4f4ce","modified":1555506160939},{"_id":"source/_posts/70313683.md","hash":"635deb9a73b162bbcde8c6403960f04b546eac2d","modified":1555506160939},{"_id":"source/_posts/70328966.md","hash":"4bcb496feeb71b628867c639c563e9523b42914a","modified":1555506160942},{"_id":"source/_posts/70478134.md","hash":"0b2be4ff1b20d27c7636ba3e38a519926c22e283","modified":1555506160942},{"_id":"source/_posts/70481823.md","hash":"fa4626bca0ab8a797d49cb7d68de2528fd1efb90","modified":1555506160942},{"_id":"source/_posts/70565596.md","hash":"9ca192edab34f51b4c576a5782ab8e563073d61a","modified":1555506160942},{"_id":"source/_posts/70835664.md","hash":"fa2ecc519ba60178565664c5346eb8096e296a6e","modified":1555506160942},{"_id":"source/_posts/70880837.md","hash":"5101ebf795b02df4635ef667ce32c8d121661125","modified":1555506160942},{"_id":"source/_posts/70940766.md","hash":"7fe2e05c04979861def9b1895f85b620e2d422c6","modified":1555506160942},{"_id":"source/_posts/70990783.md","hash":"9b0474b8f94576f8f31f778382ab8ee57acb13d7","modified":1555506160942},{"_id":"source/_posts/71155475.md","hash":"c96928e13108505a1e9f5c777264b865dae68984","modified":1555506160942},{"_id":"source/_posts/71310488.md","hash":"8bfc8b4fe0a3653e5a1393ce71ebf29e373fb3ae","modified":1555506160942},{"_id":"source/_posts/71366392.md","hash":"498c4046fbf7b9431c87c5cdc105cd5b877ed245","modified":1555506160942},{"_id":"source/_posts/71440571.md","hash":"640ddbfa332bd2aaddd10bdde4888c76b67c360b","modified":1555506160942},{"_id":"source/_posts/71453698.md","hash":"a9303569a8e08a5e24f377803ee6b3005664df41","modified":1555506160942},{"_id":"source/_posts/71698163.md","hash":"5cc48084ed4169ab8cfa2f13e58a7d3e917f1fe9","modified":1555506160942},{"_id":"source/_posts/72329005.md","hash":"b0eb84c7e1503eb94f3d68266078d44a7493d7ca","modified":1555506160942},{"_id":"source/_posts/72355760.md","hash":"a21a7613f246ce9f35908ce3d3561c355101da76","modified":1555506160942},{"_id":"source/_posts/72773556.md","hash":"0cb85c977fca95ff5f04f971d971f68a66952f0e","modified":1555506160942},{"_id":"source/_posts/72773595.md","hash":"212b74b23821b89159b04b3ab67985863b3ba26a","modified":1555506160946},{"_id":"source/_posts/72773662.md","hash":"de995c7d2fc05ac844184ff7be9a96b66536a583","modified":1555506160946},{"_id":"source/_posts/72773724.md","hash":"6fb699dffb6f8a9f8bc7771b87a5f330646f9b59","modified":1555506160946},{"_id":"source/_posts/72773799.md","hash":"8f435f8e9019370f0cbb39965f672f07881f70e0","modified":1555506160946},{"_id":"source/_posts/72773828.md","hash":"b3b3b6aea02773f05dc7698c0b12e2b1c302bd57","modified":1555506160946},{"_id":"source/_posts/72773915.md","hash":"c60c35560416e81e4cd9ef8c842b8ddccc2b55e8","modified":1555506160946},{"_id":"source/_posts/72773955.md","hash":"e9ac9a4d3228fdc253b2e7f4a63991f25eacbf04","modified":1555506160946},{"_id":"source/_posts/72773996.md","hash":"1a40a7cb212439e11b1e8c16c1cebfc0ec1cd257","modified":1555506160946},{"_id":"source/_posts/72774870.md","hash":"dd81be584662f4b0256c68d6b4d8151b6f64f092","modified":1555506160946},{"_id":"source/_posts/72775216.md","hash":"a66ed3b682b5d4010a8e9254fd18f25b68a3b91b","modified":1555506160946},{"_id":"source/_posts/72775494.md","hash":"7893cc3bd477e0d60b2518bbac444f78971b20d1","modified":1555506160946},{"_id":"source/_posts/72775704.md","hash":"87e2fb7d7d73131382a29e1c050ec83fe7635cdf","modified":1555506160946},{"_id":"source/_posts/72793781.md","hash":"8227b00ad9d95f66fbc6abaf5d71c76f1ae01abc","modified":1555506160946},{"_id":"source/_posts/72849484.md","hash":"52e4115604ec6072cbc9c914c5f08eb5d354cab5","modified":1555506160946},{"_id":"source/_posts/72849513.md","hash":"e177040c1931da419a43c72563ffb147245711d0","modified":1555506160946},{"_id":"source/_posts/72849551.md","hash":"1348d8ddf65a7a5344cb6500b1ced86c962977ac","modified":1555506160946},{"_id":"source/_posts/72849656.md","hash":"c058bf321e79c71c8f97d2bc310eb19ea33d04d9","modified":1555506160946},{"_id":"source/_posts/72849660.md","hash":"d9c1d813d1388f8a13aacad1f4bd2ebf8e25d0fb","modified":1555506160949},{"_id":"source/_posts/72849663.md","hash":"5b4779b3c24215fd150011cb0fd317eeeaad9929","modified":1555506336107},{"_id":"source/_posts/72849668.md","hash":"7f631db142be3264f768601dfbff020fa6b5a4ab","modified":1555506160949},{"_id":"source/_posts/72849743.md","hash":"428d6f8be8d2712b39cdd7efd341e3cbb9da30c1","modified":1555506160949},{"_id":"source/_posts/72849787.md","hash":"a92dd2f0845c401991c2299eeae93c29191ab6bb","modified":1555506160949},{"_id":"source/_posts/72849792.md","hash":"bd9dfc621476e2d8c220d01687f3c0760402116f","modified":1555506160949},{"_id":"source/_posts/72849793.md","hash":"3e7ab998f4ce5eb6f2606d4db00c749d92ff5741","modified":1555506160949},{"_id":"source/_posts/72849794.md","hash":"ff2d9e9e52928ce0273f434dcd8784717b7456a6","modified":1555506160949},{"_id":"source/_posts/72849797.md","hash":"c49434aeb981ea1c0afd2bacdb11d27ea8972ec9","modified":1555506160949},{"_id":"source/_posts/72849801.md","hash":"da00c86c3ca2e4376990edba4d8bf38074b91dcb","modified":1555506160949},{"_id":"source/_posts/72863523.md","hash":"a5abe4478e8f2a9e7fa4598bd215757a201d7345","modified":1555506160949},{"_id":"source/_posts/72868717.md","hash":"0f3009cb8a6d54a7863107a337c0a06c1b653691","modified":1555506160949},{"_id":"source/_posts/72877015.md","hash":"8764e46012ff55928ffbac880889293a30d8825b","modified":1555506160949},{"_id":"source/_posts/72886742.md","hash":"5f8c07a5c3bafa28b8f18381b4ebaf4a42397423","modified":1555506160949},{"_id":"source/_posts/72934503.md","hash":"2ab158da12eb6168724143a4a966a2c4621b2311","modified":1555506160949},{"_id":"source/_posts/72953925.md","hash":"55458f9565d24852643d2013c33fff8e9eacdd43","modified":1555506160952},{"_id":"source/_posts/72956798.md","hash":"0e6bc0921c9f406e34d619d2ec18cc7cd497ddc3","modified":1555506160952},{"_id":"source/_posts/72971158.md","hash":"5f22005ee5006424e117afd4ea72840cb1a43b5b","modified":1555506160952},{"_id":"source/_posts/73246276.md","hash":"5e77d609c615cc254a07c2b6e01f9036d4c810c2","modified":1555506160952},{"_id":"source/_posts/73518838.md","hash":"4045aee73f8bac8b098075cfa3edc81679fd460e","modified":1555506160952},{"_id":"source/_posts/73549164.md","hash":"d5e45bcc30108162571355684200c13fbf2cba4a","modified":1555506160952},{"_id":"source/_posts/73556860.md","hash":"185cf6b98e715fa7d482b1a7be231e561b5db3e8","modified":1555506160952},{"_id":"source/_posts/73798177.md","hash":"e8476da0a9a5c5f19388a2ddb921e28917e05c11","modified":1555506160952},{"_id":"source/_posts/73822126.md","hash":"63f84593d1c44175b153ea5b724ebab0dbfc65e8","modified":1555506160952},{"_id":"source/_posts/73825606.md","hash":"08aa27ea753d5e1a291f812af44dd0df3d8c819f","modified":1555506160952},{"_id":"source/_posts/73825637.md","hash":"118c087a610e3daeaae226b0de8628a057393a46","modified":1555506160952},{"_id":"source/_posts/73863598.md","hash":"f68448130dfb0555b9f763d35c9385fd8dc40cf3","modified":1555506160952},{"_id":"source/_posts/74153824.md","hash":"8dd9efe70310bddb04d5c7b6732557b09e34f275","modified":1555506160952},{"_id":"source/_posts/74198393.md","hash":"ba16ac3e180d05cc543e99b365196b135da83f70","modified":1555506160952},{"_id":"source/_posts/74356926.md","hash":"1e3e4324b16527d374e162f547e01b4f9c20ecf0","modified":1555506160952},{"_id":"source/_posts/74374144.md","hash":"1ec5ab65ef14ca6aed32865cae04cc8bea35f699","modified":1555506160952},{"_id":"source/_posts/74408116.md","hash":"2c2d93bb4992bd91599f3230b6bb8ea5e45223f3","modified":1555506160952},{"_id":"source/_posts/74482641.md","hash":"ab62dc094adec55732b405025674f3e4dd9c78d4","modified":1555506160956},{"_id":"source/_posts/74505041.md","hash":"b77d53504bb932e152abe22ebb8c5e505c216349","modified":1555506160956},{"_id":"source/_posts/75127871.md","hash":"8befaba6d7630c289a6f046af43a1905c6da2be7","modified":1555506160956},{"_id":"source/_posts/75138225.md","hash":"6e176a8e51a66fb1189abec5d4ff2d13e2a969f8","modified":1555506160956},{"_id":"source/_posts/75194944.md","hash":"8fedcd70f3ef1dda19435d466e6a57777512af1f","modified":1555506160956},{"_id":"source/_posts/75208683.md","hash":"39fa4b574192e3f75479b7e06124986c5a140df5","modified":1555506160956},{"_id":"source/_posts/75267826.md","hash":"c3ce4859a68da461984ff7f9d1a40fa2417368f4","modified":1555506160956},{"_id":"source/_posts/75270526.md","hash":"6d8abdfed18af0ac26f5aaffdac199ae5f3f46c2","modified":1555506160956},{"_id":"source/_posts/75331107.md","hash":"49d411c3649ec7b25e51e1fa47f1630ca79f7f00","modified":1555506160956},{"_id":"source/_posts/75578185.md","hash":"151c655bca203f2885af2424acde26deb8ebcf0b","modified":1555506160956},{"_id":"source/_posts/75687721.md","hash":"4e48433217d6e0c1647360031f284d56fb8a1356","modified":1555506160956},{"_id":"source/_posts/75948179.md","hash":"fbabb4b106433af68ce36961d8a4e65b054925c5","modified":1555506160956},{"_id":"source/_posts/76037429.md","hash":"b5c06e5d9108b15fe7b4cf55ea5b3b1df4c18c4b","modified":1555506160956},{"_id":"source/_posts/76158441.md","hash":"d3e8daa1ded4e42d6b13e64dbe16e2c197c76365","modified":1555506160956},{"_id":"source/_posts/77044181.md","hash":"9d37fe62b369303f3fe0977eaeca9904a58e5614","modified":1555506160959},{"_id":"source/_posts/77349012.md","hash":"c51d53af6823c407cb9560bf0240d5610c2b0a04","modified":1555506160959},{"_id":"source/_posts/78053974.md","hash":"6e2b15c620f6ea0b53d7d5a7dd07f967767a167c","modified":1555506270374},{"_id":"source/_posts/78175188.md","hash":"e02f06fccd68998c5691304fea2ce2b6fcc8477d","modified":1555506160959},{"_id":"source/_posts/78479380.md","hash":"11cbaec3842ab91ced577ea72b0f4cba2115ad24","modified":1555506160959},{"_id":"source/_posts/79186055.md","hash":"3fd1f8406f038b070789d90a357324c4b3ecc3da","modified":1555506160959},{"_id":"source/_posts/ChangeSource.md","hash":"35ddb1a273b8350a7ecf34747441a58e46983c0f","modified":1555503457301},{"_id":"source/_posts/DesignPattern.md","hash":"69f6f2e6ff77328bef45c11cf56f8e9657e3ac42","modified":1555499795386},{"_id":"source/_posts/ExperienceOfInterview.md","hash":"fe2fbb8d75e2306e34bedb9c3d4961d130ead3df","modified":1555499795386},{"_id":"source/_posts/GraduationProject.md","hash":"443e50efc00eba624a7000377db7fffe7ad70033","modified":1555499795386},{"_id":"source/_posts/InternshipSummary.md","hash":"d948f0dccf71a4c61853178fdd674e7db8a30393","modified":1555499795386},{"_id":"source/_posts/ManualOfRegex.md","hash":"c7be4f5b4d3ad928db7a22403adf14a2101183fe","modified":1555499795386},{"_id":"source/_posts/NotesOfPython.md","hash":"2da70b7a260424a7a40f15836bf69f1de235faf0","modified":1555499795386},{"_id":"source/_posts/ProductPattern.md","hash":"e17d5607bd2067d384f0dc30139c42128d86e83a","modified":1555499795386},{"_id":"source/_posts/StudyDocker.md","hash":"4998ee32f805ed09dd276c3371a17cac1ded9fa9","modified":1555499795386},{"_id":"source/_posts/StudyLinux-arch.md","hash":"e8f6da2d80c6be6d6918e084fcd52ddabe0a6e6f","modified":1555499795389},{"_id":"source/_posts/StudyOfGit.md","hash":"55040578848d44b4625cbde4d575f6025513e65c","modified":1555499795389},{"_id":"source/_posts/hello-world.md","hash":"4953d43846bb05472f30fe0e938dfe3dac5f6bfd","modified":1555499795389},{"_id":"source/_posts/StudyOfInterview.md","hash":"9ff97a8e0b11293ee9c6b41940253416e30ed9b6","modified":1555499795389},{"_id":"source/_posts/readme.md","hash":"1d72a11987654aeff643e0f23dd70ad7eb885b59","modified":1555506160959},{"_id":"source/_posts/vim.md","hash":"b82c140b3fdb00b508e4f72399c4c77f96beaf3e","modified":1555499795389},{"_id":"source/about/index.md","hash":"d6a7fc165a2ffbd6dac64e33f0a4f2fc7f1228b7","modified":1555499795389},{"_id":"source/linuxConfig/index.md","hash":"cc3bafd1fe44492b4079d03de67fb4aa2f192dac","modified":1555499795389},{"_id":"themes/Claudia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1555502128643},{"_id":"themes/Claudia/.git/config","hash":"74e7e04977741d5580d5cdcd4cdfb861d2b21348","modified":1555502128650},{"_id":"themes/Claudia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1555502123826},{"_id":"themes/Claudia/.git/index","hash":"7f709e44a1173ff40b02933684af4efac40913b9","modified":1555502355183},{"_id":"themes/Claudia/.git/packed-refs","hash":"2cf87bc050185dcf08496245bd298dfefc0bb42e","modified":1555502128640},{"_id":"themes/Claudia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1555502128660},{"_id":"themes/Claudia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1555502128660},{"_id":"themes/Claudia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1555502128660},{"_id":"themes/Claudia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1555502128660},{"_id":"themes/Claudia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1555502128660},{"_id":"themes/Claudia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1555502128663},{"_id":"themes/Claudia/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1555502128663},{"_id":"themes/Claudia/layout/about.ejs","hash":"dd3409e6b14838cdcb2886557ddfe8be98cf3b28","modified":1555502128673},{"_id":"themes/Claudia/layout/categories.ejs","hash":"f139fb1d6e61cd8f2fe667a969f0d138828a0623","modified":1555502128673},{"_id":"themes/Claudia/layout/category.ejs","hash":"606130928224920f3c5f2677ee0f3fb3ae7f431a","modified":1555502128673},{"_id":"themes/Claudia/layout/index.ejs","hash":"3bde32f8caaa8eb2b217eaa1ea1a8b8f17a73eb9","modified":1555502128673},{"_id":"themes/Claudia/layout/layout.ejs","hash":"39fba8f09c31117c18fb05ef40c8e37bac84c738","modified":1555502128676},{"_id":"themes/Claudia/layout/page.ejs","hash":"dc593ec78bd06ee7c32750f36ed45d26353cabcc","modified":1555502128676},{"_id":"themes/Claudia/layout/post.ejs","hash":"92f213aa7d4ccce0665c6207d0759d19cf4fadbc","modified":1555502128676},{"_id":"source/_posts/52448350.md","hash":"6044de5cb1e8661bf80832c79280a8a661ec8fe5","modified":1555506160912},{"_id":"source/_posts/52462508.md","hash":"c2a9f72bf2270e2b676582f253e9be6806672139","modified":1555506160912},{"_id":"source/_posts/64124556.md","hash":"441a4cb26f9bca60d5bdbdc49daf1571d666850f","modified":1555506160939},{"_id":"themes/Claudia/layout/tag.ejs","hash":"15f93278e8671c838f4e87fdc7b297bca5118d00","modified":1555502128676},{"_id":"themes/Claudia/layout/tags.ejs","hash":"6c7a4e494e579092890b2fef0e7bb4b41fb1528b","modified":1555502128676},{"_id":"themes/Claudia/layout/works.ejs","hash":"b0c70cb531d86595558a3d2eb068319120abfc21","modified":1555502128676},{"_id":"themes/Claudia/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1555502128706},{"_id":"source/images/StudyOfInterview/jcjtx.jpg","hash":"7bdc07ec710166e2b1949beeff9e21840d74b34b","modified":1555499795389},{"_id":"themes/Claudia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1555502123833},{"_id":"themes/Claudia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1555502123829},{"_id":"themes/Claudia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1555502123836},{"_id":"themes/Claudia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1555502123833},{"_id":"themes/Claudia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1555502123833},{"_id":"themes/Claudia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1555502123836},{"_id":"themes/Claudia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1555502123829},{"_id":"themes/Claudia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1555502123833},{"_id":"themes/Claudia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1555502123836},{"_id":"themes/Claudia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1555502123836},{"_id":"themes/Claudia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1555502123836},{"_id":"themes/Claudia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1555502123829},{"_id":"themes/Claudia/.git/logs/HEAD","hash":"72f301a81254941a3e657aced0953de5d37d8b13","modified":1555502128646},{"_id":"themes/Claudia/layout/_partial/after-footer.ejs","hash":"822a1963b658eacf5a7f214438e6177ab26597cf","modified":1555502128663},{"_id":"themes/Claudia/layout/_partial/footer.ejs","hash":"8741ebc0d16ee037791616e9b617ec938dc3b667","modified":1555502128663},{"_id":"themes/Claudia/layout/_partial/getPostCoverPhoto.ejs","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555502128663},{"_id":"themes/Claudia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1555502128663},{"_id":"themes/Claudia/layout/_partial/nav.ejs","hash":"dee441f327bca74085c875dbc8ee009c4cc47505","modified":1555502128670},{"_id":"themes/Claudia/layout/_partial/post.ejs","hash":"0a8f387ff597ce88a3ce7a241dba8ba8e9badb38","modified":1555502128670},{"_id":"themes/Claudia/layout/_partial/primary_content.ejs","hash":"9922f886e9baa6aa5bd0bc3e7154a67ad1f42b77","modified":1555502128670},{"_id":"themes/Claudia/layout/_partial/second_content.ejs","hash":"34b1534acac9cee4e594c260bacd0523e19ad898","modified":1555502128670},{"_id":"themes/Claudia/layout/_partial/sidebar.ejs","hash":"d7f99e033124e920f69726d3f6328e7210e6acc4","modified":1555502128670},{"_id":"themes/Claudia/layout/common/cateWithTagContent.ejs","hash":"acd163817280373e33bc12c523e715006ad929bf","modified":1555502128673},{"_id":"themes/Claudia/layout/common/cateWithTagTemp.ejs","hash":"d8f353409097d709f7e14edd52c10e36e41d6187","modified":1555502128673},{"_id":"themes/Claudia/public/css/common.css","hash":"ab5bb089df657cafa1a94c48efd2227f6b15b36f","modified":1555502128680},{"_id":"themes/Claudia/public/css/layout.css","hash":"059f3691339ba78e39e54fc4a3631a46833c54f6","modified":1555502128680},{"_id":"themes/Claudia/public/css/nav.css","hash":"5a254bb06a767124b1ae421a39449cf61025064d","modified":1555502128683},{"_id":"themes/Claudia/public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555502128683},{"_id":"themes/Claudia/public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555502128683},{"_id":"themes/Claudia/public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555502128683},{"_id":"themes/Claudia/public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555502128683},{"_id":"themes/Claudia/public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555502128686},{"_id":"themes/Claudia/public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555502128686},{"_id":"themes/Claudia/public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1555502128690},{"_id":"themes/Claudia/public/fancybox/jquery.fancybox.js","hash":"75e60c4b10f76ba5288faee4f68cb0289b09b7c6","modified":1555502128696},{"_id":"themes/Claudia/public/fancybox/jquery.fancybox.pack.js","hash":"50953858b3166d087311e67dd3df6df02cdc72fa","modified":1555502128696},{"_id":"themes/Claudia/public/js/script.js","hash":"54f564a4cd78586b74b6864722f42b3cd9308176","modified":1555502128696},{"_id":"themes/Claudia/public/js/search_core.js","hash":"12c2f42482d46adc868cf312b171cc8c1f8a2999","modified":1555502128700},{"_id":"themes/Claudia/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1555499795000},{"_id":"themes/Claudia/source/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1555499795000},{"_id":"themes/Claudia/source/assets/tabris-weixin.png","hash":"c61f80f69022eb92eca730050b85e898a1551ba4","modified":1555499795000},{"_id":"themes/Claudia/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1555499795000},{"_id":"themes/Claudia/source/css/common.css","hash":"4ff1a0beda31ab6b3b858829f8bbdb5b9286736c","modified":1555502128710},{"_id":"themes/Claudia/source/css/highlight_atom.css","hash":"89fb356656242ec35dd67521c4ef50b8798f9490","modified":1555502128710},{"_id":"themes/Claudia/source/css/highlight_default.css","hash":"0ed66746d733e1390eb7b89816b61931dc251bcd","modified":1555502128710},{"_id":"themes/Claudia/source/css/highlight_github.css","hash":"3ced4a179aef4682840aaf18751d27eacc1b2d0b","modified":1555502128710},{"_id":"themes/Claudia/source/css/highlight_light.css","hash":"0ed66746d733e1390eb7b89816b61931dc251bcd","modified":1555502128710},{"_id":"themes/Claudia/source/css/highlight_rainbow.css","hash":"3fb081357ec86da4c14e0154130140ea74bb2a71","modified":1555502128710},{"_id":"themes/Claudia/source/css/highlight_vs.css","hash":"eb5c218e2b5a9bbcd5c191d7a0196a3ce874dbe3","modified":1555502128710},{"_id":"themes/Claudia/source/css/layout.css","hash":"059f3691339ba78e39e54fc4a3631a46833c54f6","modified":1555502128710},{"_id":"themes/Claudia/source/css/nav.css","hash":"5a254bb06a767124b1ae421a39449cf61025064d","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1555502128716},{"_id":"themes/Claudia/source/fancybox/jquery.fancybox.pack.js","hash":"33d985204de2762abbf711120defd1530cd995d7","modified":1555502128716},{"_id":"themes/Claudia/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1555499795000},{"_id":"themes/Claudia/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1555499795000},{"_id":"themes/Claudia/source/js/highlight.min.js","hash":"c96e094e7def1f951a946f0e5dbdc130fb65c720","modified":1555502128720},{"_id":"themes/Claudia/source/js/script.js","hash":"54f564a4cd78586b74b6864722f42b3cd9308176","modified":1555502128720},{"_id":"themes/Claudia/source/js/search_core.js","hash":"8ba772621de192c3af88af9febaff9bb2bc0485c","modified":1555502128720},{"_id":"themes/Claudia/source/fancybox/jquery.fancybox.js","hash":"ddb8fe9ec5c30a87842acb18f60fcefa8ad13278","modified":1555502128716},{"_id":"themes/Claudia/source/assets/favicon.ico","hash":"1b763e30815a4bda405022bbec6af6f4ca4c77d4","modified":1555499795000},{"_id":"themes/Claudia/source/assets/tabris-qq.png","hash":"b321c2f17980aefd846e6e73105e34ce413bd7c9","modified":1555499795000},{"_id":"themes/Claudia/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1555499795000},{"_id":"themes/Claudia/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1555499795000},{"_id":"themes/Claudia/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1555499795000},{"_id":"themes/Claudia/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1555499795000},{"_id":"themes/Claudia/.git/objects/pack/pack-4d39a2d91456946d8f441e26a28d72ed2eb8785d.idx","hash":"0e9fee967008482af884afa047269cb4f3456537","modified":1555502128420},{"_id":"themes/Claudia/.git/refs/heads/master","hash":"458004de516b4367eba3a433442e33ced98e2c3a","modified":1555502128646},{"_id":"themes/Claudia/public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555502128686},{"_id":"themes/Claudia/public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555502128686},{"_id":"themes/Claudia/public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"82654c502627da5e38f413f1c1286ae49b9a7f93","modified":1555502128686},{"_id":"themes/Claudia/public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1555502128686},{"_id":"themes/Claudia/public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555502128690},{"_id":"themes/Claudia/public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"4ad94e2e5b63e0a88997cb277a1cf59924def561","modified":1555502128690},{"_id":"themes/Claudia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555502128713},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555502128716},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1555502128716},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1555502128716},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555502128716},{"_id":"themes/Claudia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1555502128716},{"_id":"themes/Claudia/layout/_partial/head.ejs","hash":"95a00e9ddd09fcc282c8ccfbb8cf61a3964a7800","modified":1555502128666},{"_id":"themes/Claudia/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1555499795000},{"_id":"themes/Claudia/source/intro/jxjy-2B.jpg","hash":"2e67fe4b28895153244fc7f1d169d9b56f9aeeae","modified":1555499795000},{"_id":"themes/Claudia/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1555499795000},{"_id":"themes/Claudia/source/intro/zewg-yq.jpg","hash":"b0baaf877d56f2aff6ab1a604bb2b8e6c1b935a9","modified":1555499795000},{"_id":"themes/Claudia/.git/logs/refs/heads/master","hash":"72f301a81254941a3e657aced0953de5d37d8b13","modified":1555502128646},{"_id":"themes/Claudia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1555502128643},{"_id":"themes/Claudia/screenshot/claudia-cover.png","hash":"757680cd3648e3569d6a18abaf33180dc427d620","modified":1555502128706},{"_id":"themes/Claudia/source/avatar/qiu.jpg","hash":"2f5c6b674b2d5ec8a1904c4bba2abbd9ba29cdd8","modified":1555499795000},{"_id":"themes/Claudia/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1555499795000},{"_id":"themes/Claudia/.git/logs/refs/remotes/origin/HEAD","hash":"72f301a81254941a3e657aced0953de5d37d8b13","modified":1555502128643},{"_id":"themes/Claudia/source/intro/dsgl.jpg","hash":"8661bca46fa1440a77ab4179a3087511bcbc7554","modified":1555499795000},{"_id":"themes/Claudia/.git/objects/pack/pack-4d39a2d91456946d8f441e26a28d72ed2eb8785d.pack","hash":"4f1d6cb570c024316328855f8c9840e2c4a0c86e","modified":1555502128420},{"_id":"themes/Claudia/source/intro/jxjy-2B(2).jpg","hash":"78252a9305c7f8b455ba21ca31f4a49cc1b0c16b","modified":1555499795000},{"_id":"public/search.xml","hash":"c093a1d5dba7a4943749476b43c649590a1bcd93","modified":1555506424025},{"_id":"public/about/index.html","hash":"88c00e4d95b00412d3d18f6ef10b7342e054b251","modified":1555506207592},{"_id":"public/linuxConfig/index.html","hash":"5df4d00b970afd9b99edd66b9886821805d68814","modified":1555506207598},{"_id":"public/2019/04/14/ChangeSource/index.html","hash":"be77a2a48100b8d8142ff22673323f9205cc83d6","modified":1555506207598},{"_id":"public/2019/03/11/vim/index.html","hash":"bb7561a95265fd17df079b1cb6708e732476f4ca","modified":1555506207600},{"_id":"public/2019/01/10/StudyDocker/index.html","hash":"fbe7f3c2136394978e0daa14494d75f62674afe5","modified":1555506207600},{"_id":"public/2018/11/18/DesignPattern/index.html","hash":"79d6098bc86e0d6f90b9c7887637ad7b1676558e","modified":1555506207600},{"_id":"public/2018/11/18/ProductPattern/index.html","hash":"d5f671714c929b94d8785349f62f2a0f0ceac17a","modified":1555506207600},{"_id":"public/2018/09/23/StudyLinux-arch/index.html","hash":"1ba3f28bec036d339f97d16f85e1d2158787c3ed","modified":1555506207600},{"_id":"public/2018/09/23/GraduationProject/index.html","hash":"2007230bca22d6237b820e4e93b839e36552688f","modified":1555506207600},{"_id":"public/2018/03/17/ManualOfRegex/index.html","hash":"ed46d9925aacf08790bc5c833d15853f25046dd3","modified":1555506207601},{"_id":"public/2018/03/07/NotesOfPython/index.html","hash":"6e416579957e96760b6f7eec0534ede6fec74e2b","modified":1555506207601},{"_id":"public/2018/01/31/ExperienceOfInterview/index.html","hash":"e2031d2125f6682df5a4fa9f9222748dbc9241e2","modified":1555506207601},{"_id":"public/2018/01/29/StudyOfInterview/index.html","hash":"affe909aeef6ac83db9d6e2b67ee220242a4df41","modified":1555506207601},{"_id":"public/2018/01/25/hello-world/index.html","hash":"fd27dbb92d02331e197128e51834c139f184a550","modified":1555506207601},{"_id":"public/2017/12/31/InternshipSummary/index.html","hash":"67800431fbd78aa63ec6b37f3223695df33d2338","modified":1555506207601},{"_id":"public/2017/04/25/StudyOfGit/index.html","hash":"05aa3bcc859574d38de9b9d2bb66224eb9bd57ae","modified":1555506207602},{"_id":"public/archives/index.html","hash":"2acd0ab2d5e692ff15f3f3fe5f115bb913d19b17","modified":1555506424542},{"_id":"public/archives/page/2/index.html","hash":"a1776e15d769dd76a23b5fbc9774dd85e2e3fe62","modified":1555506424543},{"_id":"public/archives/2017/index.html","hash":"d5a3f0dcde178ee6b1b3c0df2de2853cf782d99c","modified":1555506323349},{"_id":"public/archives/2017/04/index.html","hash":"6ec072fdd1ed3426df961c89feac76d9268d44a7","modified":1555506207602},{"_id":"public/archives/2017/12/index.html","hash":"0092fddb70e53f7ac298c04835027add16f28235","modified":1555506207602},{"_id":"public/archives/2018/index.html","hash":"74bcb3e724a0961dfbff5dab87f2d5a68a14cbb7","modified":1555506207602},{"_id":"public/archives/2018/01/index.html","hash":"55f723da0ef53fc316ff247fefce803f9f5aa01f","modified":1555506207603},{"_id":"public/archives/2018/03/index.html","hash":"0b521db555f61662399a380ad1b5d9c52fb0378e","modified":1555506207603},{"_id":"public/archives/2018/09/index.html","hash":"5debdb3094dc4c0aab38bcb9efdcdb686de0319b","modified":1555506207603},{"_id":"public/archives/2018/11/index.html","hash":"5589e79000604e82a5a67f971f961850114e6d44","modified":1555506207603},{"_id":"public/archives/2019/index.html","hash":"a42f4e8bb6ec54c454d2ecc0c5f182857f8d6ee3","modified":1555506424543},{"_id":"public/archives/2019/01/index.html","hash":"37e2ff1c595ff92c7165265a956e80fc0699902e","modified":1555506207603},{"_id":"public/archives/2019/03/index.html","hash":"148353802ffacea07938db41b87ba656f5279cde","modified":1555506207604},{"_id":"public/archives/2019/04/index.html","hash":"fe182d7060b25256aba1689db4f81ba50cd377b8","modified":1555506424543},{"_id":"public/index.html","hash":"6729ca2e79cb02e9901a80852bdc612dddbad8fe","modified":1555506424543},{"_id":"public/page/2/index.html","hash":"fdd529eabfca62f3a35c948ac38ec9897e1c52db","modified":1555506424543},{"_id":"public/tags/linux/index.html","hash":"30a6b6aa21aad53d58a5f18cc888fdb051a6cc6e","modified":1555506207604},{"_id":"public/tags/git/index.html","hash":"da22c9dced40321d0b245a6732523b4b61e3e3f9","modified":1555506207605},{"_id":"public/tags/ruby/index.html","hash":"6aacac0cd75c2b53060c5dd1ecaf6a29285bf425","modified":1555506207605},{"_id":"public/tags/docker/index.html","hash":"49afa77857102a73a8117327cd2d778060e9694b","modified":1555506207605},{"_id":"public/tags/npm/index.html","hash":"578b315a43a00d1cfc8080925ead11f8b1ef5e63","modified":1555506207605},{"_id":"public/tags/开发/index.html","hash":"a36ad0b6f29537162d5caf635357d32874451bff","modified":1555506207605},{"_id":"public/tags/面试/index.html","hash":"7ea583203a5d3122c87bb387a27f3d1c271fceff","modified":1555506207605},{"_id":"public/tags/C/index.html","hash":"defc067b0d20a4f8edf1ac99fe69e2df7873dda5","modified":1555506207606},{"_id":"public/tags/数据库/index.html","hash":"028f9d4dcee673ad8294db5fac09d8b7a6d97e2b","modified":1555506207606},{"_id":"public/tags/操作系统/index.html","hash":"94365c4fd0b561581d1d45a87b8e41b3df125978","modified":1555506207606},{"_id":"public/tags/计算机网络/index.html","hash":"3fb9b5f3cb48e8ae98a8efd25033f18cd4f64341","modified":1555506207606},{"_id":"public/tags/毕业设计/index.html","hash":"a0fe1de7a597d72b54e9b0ea29a4770424b20faa","modified":1555506207606},{"_id":"public/tags/实习/index.html","hash":"f7d17a034b55220d3445b318013df9c4f10a77c5","modified":1555506207606},{"_id":"public/tags/正则表达式/index.html","hash":"e90f08b983aa95c6ac217977493dcf7278a567d4","modified":1555506207607},{"_id":"public/tags/设计模式/index.html","hash":"595f12ae4660a1ea3690c4d901494decc1f0fba9","modified":1555506207607},{"_id":"public/tags/虚拟化/index.html","hash":"ee6028fdfd129f4f7e56f6b7d1759f78a8b4aefe","modified":1555506207607},{"_id":"public/tags/随笔/index.html","hash":"f3ea6248d7d5c4b08f0ecdbc93c7bd121a8ef785","modified":1555506207607},{"_id":"public/tags/editor/index.html","hash":"eb4be43baf8410e6f42e23ad8aad737b82eac866","modified":1555506207607},{"_id":"public/tags/大数据/index.html","hash":"300f5c091e6f39447e729a64ecef2bd6f3c2b942","modified":1555506207607},{"_id":"public/2019/04/17/readme/index.html","hash":"00b0a0c38fe8a94af527c5d778aab3a18d4ec81c","modified":1555506207611},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"6c83e0f9a075b112b6b477033f5ec58459aed8c0","modified":1555506207612},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"d68ff78878b16b98b6e5cb8a3c3081e5d5b97101","modified":1555506207613},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"e2fb232264162793ffdeec550152a6a8ecf23a4b","modified":1555506207614},{"_id":"public/assets/algolia/algoliasearch.js","hash":"79672c9cb8391adbdc4fa28053c83a2389ef92ce","modified":1555506207687},{"_id":"public/2017/09/21/78053974/index.html","hash":"af65307e36da23e6edc8b63cf4ee4526f461cec8","modified":1555506281903},{"_id":"public/archives/2017/09/index.html","hash":"9d3cd1c7cae7d7dc12f9fd08c36b50e7cee74f5e","modified":1555506281904},{"_id":"public/2017/06/03/72849663/index.html","hash":"db89bff3d7adb4f4cc1ecadb1f686ba135c7e5e2","modified":1555506323348},{"_id":"public/archives/2017/06/index.html","hash":"76e9b3207d1b17dc9e1b39916977ced7e72c9495","modified":1555506323349}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-09-23T07:56:08.000Z","categories":null,"tags":["loser"],"description":null,"toc":true,"_content":"\n> a loser","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-9-23 15:56:08\ncategories:  \ntags: [loser]\ndescription: \ntoc: true\n---\n\n> a loser","updated":"2019-04-17T11:16:35.389Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjul87j0400f3safks2b05i0u","content":"<blockquote>\n<p>a loser</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>a loser</p>\n</blockquote>\n"},{"title":"配置","date":"2019-03-23T07:38:08.000Z","categories":null,"tags":["linux"],"description":null,"toc":true,"_content":"\n# 测试一下hexo 生成网页的功能\n\n# 配置.\n\n[tabris233/config.git](https://github.com/tabris233/config)\n\n```\nconky\tinit config(vim/tmux/zsh/conky)\t2 months ago\nneovim\tupdate neovim's config\t6 days ago\ntmux\tinit config(vim/tmux/zsh/conky)\t2 months ago\nwtf\tupdate neovim's config\t9 days ago\nzsh\tinit config(vim/tmux/zsh/conky)\t2 months ago\n```\n\nTODO:\nI will create a shell script that auto install those config.","source":"linuxConfig/index.md","raw":"---\ntitle: 配置\ndate: 2019-3-23 15:38:08\ncategories:  \ntags: [linux]\ndescription: \ntoc: true\n---\n\n# 测试一下hexo 生成网页的功能\n\n# 配置.\n\n[tabris233/config.git](https://github.com/tabris233/config)\n\n```\nconky\tinit config(vim/tmux/zsh/conky)\t2 months ago\nneovim\tupdate neovim's config\t6 days ago\ntmux\tinit config(vim/tmux/zsh/conky)\t2 months ago\nwtf\tupdate neovim's config\t9 days ago\nzsh\tinit config(vim/tmux/zsh/conky)\t2 months ago\n```\n\nTODO:\nI will create a shell script that auto install those config.","updated":"2019-04-17T11:16:35.389Z","path":"linuxConfig/index.html","comments":1,"layout":"page","_id":"cjul87j0900f5safk91wxu6ql","content":"<h1 id=\"测试一下hexo-生成网页的功能\"><a href=\"#测试一下hexo-生成网页的功能\" class=\"headerlink\" title=\"测试一下hexo 生成网页的功能\"></a>测试一下hexo 生成网页的功能</h1><h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置.\"></a>配置.</h1><p><a href=\"https://github.com/tabris233/config\" target=\"_blank\" rel=\"noopener\">tabris233/config.git</a></p>\n<pre><code>conky    init config(vim/tmux/zsh/conky)    2 months ago\nneovim    update neovim&#39;s config    6 days ago\ntmux    init config(vim/tmux/zsh/conky)    2 months ago\nwtf    update neovim&#39;s config    9 days ago\nzsh    init config(vim/tmux/zsh/conky)    2 months ago\n</code></pre><p>TODO:<br>I will create a shell script that auto install those config.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"测试一下hexo-生成网页的功能\"><a href=\"#测试一下hexo-生成网页的功能\" class=\"headerlink\" title=\"测试一下hexo 生成网页的功能\"></a>测试一下hexo 生成网页的功能</h1><h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置.\"></a>配置.</h1><p><a href=\"https://github.com/tabris233/config\" target=\"_blank\" rel=\"noopener\">tabris233/config.git</a></p>\n<pre><code>conky    init config(vim/tmux/zsh/conky)    2 months ago\nneovim    update neovim&#39;s config    6 days ago\ntmux    init config(vim/tmux/zsh/conky)    2 months ago\nwtf    update neovim&#39;s config    9 days ago\nzsh    init config(vim/tmux/zsh/conky)    2 months ago\n</code></pre><p>TODO:<br>I will create a shell script that auto install those config.</p>\n"}],"Post":[{"title":"主流应用换源or镜像加速","date":"2019-04-14T02:59:03.000Z","description":["应用换源"],"toc":true,"_content":"\n# Arch or manjaro : pacman\n\n## 启用中国源\n\n```shell\nsudo pacman-mirrors -c China\n```\n\n## 添加archlinuxcn源\n\narchlinuxcn源至您的 /etc/pacman.conf\n\n```toml\n[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n# ubuntu\n\n## 1.备份原来的源\n\n```shell\nsudo cp /etc/apt/sources.list /etc/apt/sources_init.list\n```\n\n\n将以前的源备份一下，以防以后可以用的。\n\n## 2.更换源\n\n```shell\nsudo gedit /etc/apt/sources.list\n```\n\n\n使用gedit打开文档，将下边的阿里源复制进去，然后点击保存关闭。\n\n### 阿里源\n\n```\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe\n```\n\n## 3.更新\n\n### 更新源\n\n```shell\nsudo apt-get update\n```\n\n\n复损坏的软件包，尝试卸载出错的包，重新安装正确版本的。\n\n```shell\nsudo apt-get -f install\n```\n\n### 更新软件\n\n```shell\n sudo apt-get upgrade\n```\n\n\n\n## 4.其他常用源\n\n### 西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\n\n```\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n```\n\n### 清华源\n\n```\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n```\n\n### 网易源\n\n```conf\ndeb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\n```\n\n\n# git\n\n\n\n# pip\n\n**pip国内的一些镜像**\n\n-   阿里云 <http://mirrors.aliyun.com/pypi/simple/> \n-   中国科技大学 <https://pypi.mirrors.ustc.edu.cn/simple/> \n-   豆瓣(douban) <http://pypi.douban.com/simple/> \n-   清华大学 <https://pypi.tuna.tsinghua.edu.cn/simple/> \n-   中国科学技术大学 <http://pypi.mirrors.ustc.edu.cn/simple/>\n\n**修改源方法：**\n\n**临时使用：** \n可以在使用pip的时候在后面加上-i参数，指定pip源 \neg: `pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple`\n\n**永久修改：** \n**linux:** \n修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：\n\n```\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n \n\n# ruby\n\n>   <https://ruby.taobao.org/>\n\n```shell\n$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org\n# 请确保只有 gems.ruby-china.org\n$ gem install rails\n```\n\n# docker\n\n## 镜像加速\n\n鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: https://oj7znbfj.mirror.aliyuncs.com\n\n新版的 `Docker` 使用 `/etc/docker/daemon.json（Linux）` 或者 `%programdata%\\docker\\config\\daemon.json（Windows）` 来配置 `Daemon`。\n\n请在该配置文件中加入（没有该文件的话，请先建一个）：\n\n```json\n{\n    \"registry-mirrors\": [\"https://oj7znbfj.mirror.aliyuncs.com\"]\n}\n```\n\n\n\n# npm\n\n安装node.js后，现在的node.js已经自带了npm工具了，但是国外的源很慢，为了解决这个问题，同时使用cnpm替换npm，我们通过切换源，切换到国内淘宝的源中。下面是我的操作过程。简单记录便于以后自己查看。\n\n1.  查看npm版本\n\n    ```shell\n    npm -v\n    ```\n\n2.  升级npm版本\n\n    ```shell\n    npm update\n    ```\n\n3.  查看npm配置\n\n    ```shell\n    npm config list\n    ```\n\n4.  更换源配置\n\n    ```shell\n    npm config set registry https://registry.npm.taobao.org\n    npm config list / npm config get registery #检查是否替换成功\n    ```\n\n5.  安装cnpm插件\n\n    ```shell\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n    cnpm -v\n    ```\n\n6.  安装包测试\n\n","source":"_posts/ChangeSource.md","raw":"---\ntitle: 主流应用换源or镜像加速\ndate: 2019-4-14 10:59:03\ntags: [linux,git,ruby,docker,npm]\ndescription: [\"应用换源\"]\ntoc: true\n---\n\n# Arch or manjaro : pacman\n\n## 启用中国源\n\n```shell\nsudo pacman-mirrors -c China\n```\n\n## 添加archlinuxcn源\n\narchlinuxcn源至您的 /etc/pacman.conf\n\n```toml\n[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n# ubuntu\n\n## 1.备份原来的源\n\n```shell\nsudo cp /etc/apt/sources.list /etc/apt/sources_init.list\n```\n\n\n将以前的源备份一下，以防以后可以用的。\n\n## 2.更换源\n\n```shell\nsudo gedit /etc/apt/sources.list\n```\n\n\n使用gedit打开文档，将下边的阿里源复制进去，然后点击保存关闭。\n\n### 阿里源\n\n```\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe\n```\n\n## 3.更新\n\n### 更新源\n\n```shell\nsudo apt-get update\n```\n\n\n复损坏的软件包，尝试卸载出错的包，重新安装正确版本的。\n\n```shell\nsudo apt-get -f install\n```\n\n### 更新软件\n\n```shell\n sudo apt-get upgrade\n```\n\n\n\n## 4.其他常用源\n\n### 西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\n\n```\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n```\n\n### 清华源\n\n```\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n```\n\n### 网易源\n\n```conf\ndeb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\n```\n\n\n# git\n\n\n\n# pip\n\n**pip国内的一些镜像**\n\n-   阿里云 <http://mirrors.aliyun.com/pypi/simple/> \n-   中国科技大学 <https://pypi.mirrors.ustc.edu.cn/simple/> \n-   豆瓣(douban) <http://pypi.douban.com/simple/> \n-   清华大学 <https://pypi.tuna.tsinghua.edu.cn/simple/> \n-   中国科学技术大学 <http://pypi.mirrors.ustc.edu.cn/simple/>\n\n**修改源方法：**\n\n**临时使用：** \n可以在使用pip的时候在后面加上-i参数，指定pip源 \neg: `pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple`\n\n**永久修改：** \n**linux:** \n修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：\n\n```\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n \n\n# ruby\n\n>   <https://ruby.taobao.org/>\n\n```shell\n$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org\n# 请确保只有 gems.ruby-china.org\n$ gem install rails\n```\n\n# docker\n\n## 镜像加速\n\n鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: https://oj7znbfj.mirror.aliyuncs.com\n\n新版的 `Docker` 使用 `/etc/docker/daemon.json（Linux）` 或者 `%programdata%\\docker\\config\\daemon.json（Windows）` 来配置 `Daemon`。\n\n请在该配置文件中加入（没有该文件的话，请先建一个）：\n\n```json\n{\n    \"registry-mirrors\": [\"https://oj7znbfj.mirror.aliyuncs.com\"]\n}\n```\n\n\n\n# npm\n\n安装node.js后，现在的node.js已经自带了npm工具了，但是国外的源很慢，为了解决这个问题，同时使用cnpm替换npm，我们通过切换源，切换到国内淘宝的源中。下面是我的操作过程。简单记录便于以后自己查看。\n\n1.  查看npm版本\n\n    ```shell\n    npm -v\n    ```\n\n2.  升级npm版本\n\n    ```shell\n    npm update\n    ```\n\n3.  查看npm配置\n\n    ```shell\n    npm config list\n    ```\n\n4.  更换源配置\n\n    ```shell\n    npm config set registry https://registry.npm.taobao.org\n    npm config list / npm config get registery #检查是否替换成功\n    ```\n\n5.  安装cnpm插件\n\n    ```shell\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n    cnpm -v\n    ```\n\n6.  安装包测试\n\n","slug":"ChangeSource","published":1,"updated":"2019-04-17T12:17:37.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2p00iwsafkrs19m91d","content":"<h1 id=\"Arch-or-manjaro-pacman\"><a href=\"#Arch-or-manjaro-pacman\" class=\"headerlink\" title=\"Arch or manjaro : pacman\"></a>Arch or manjaro : pacman</h1><h2 id=\"启用中国源\"><a href=\"#启用中国源\" class=\"headerlink\" title=\"启用中国源\"></a>启用中国源</h2><pre><code class=\"shell\">sudo pacman-mirrors -c China\n</code></pre>\n<h2 id=\"添加archlinuxcn源\"><a href=\"#添加archlinuxcn源\" class=\"headerlink\" title=\"添加archlinuxcn源\"></a>添加archlinuxcn源</h2><p>archlinuxcn源至您的 /etc/pacman.conf</p>\n<pre><code class=\"toml\">[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n</code></pre>\n<h1 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h1><h2 id=\"1-备份原来的源\"><a href=\"#1-备份原来的源\" class=\"headerlink\" title=\"1.备份原来的源\"></a>1.备份原来的源</h2><pre><code class=\"shell\">sudo cp /etc/apt/sources.list /etc/apt/sources_init.list\n</code></pre>\n<p>将以前的源备份一下，以防以后可以用的。</p>\n<h2 id=\"2-更换源\"><a href=\"#2-更换源\" class=\"headerlink\" title=\"2.更换源\"></a>2.更换源</h2><pre><code class=\"shell\">sudo gedit /etc/apt/sources.list\n</code></pre>\n<p>使用gedit打开文档，将下边的阿里源复制进去，然后点击保存关闭。</p>\n<h3 id=\"阿里源\"><a href=\"#阿里源\" class=\"headerlink\" title=\"阿里源\"></a>阿里源</h3><pre><code>deb http://mirrors.aliyun.com/ubuntu/ xenial main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe\n</code></pre><h2 id=\"3-更新\"><a href=\"#3-更新\" class=\"headerlink\" title=\"3.更新\"></a>3.更新</h2><h3 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h3><pre><code class=\"shell\">sudo apt-get update\n</code></pre>\n<p>复损坏的软件包，尝试卸载出错的包，重新安装正确版本的。</p>\n<pre><code class=\"shell\">sudo apt-get -f install\n</code></pre>\n<h3 id=\"更新软件\"><a href=\"#更新软件\" class=\"headerlink\" title=\"更新软件\"></a>更新软件</h3><pre><code class=\"shell\"> sudo apt-get upgrade\n</code></pre>\n<h2 id=\"4-其他常用源\"><a href=\"#4-其他常用源\" class=\"headerlink\" title=\"4.其他常用源\"></a>4.其他常用源</h2><h3 id=\"西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\"><a href=\"#西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\" class=\"headerlink\" title=\"西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\"></a>西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）</h3><pre><code>deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n</code></pre><h3 id=\"清华源\"><a href=\"#清华源\" class=\"headerlink\" title=\"清华源\"></a>清华源</h3><pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n</code></pre><h3 id=\"网易源\"><a href=\"#网易源\" class=\"headerlink\" title=\"网易源\"></a>网易源</h3><pre><code class=\"conf\">deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\n</code></pre>\n<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h1 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h1><p><strong>pip国内的一些镜像</strong></p>\n<ul>\n<li>阿里云 <a href=\"http://mirrors.aliyun.com/pypi/simple/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/pypi/simple/</a> </li>\n<li>中国科技大学 <a href=\"https://pypi.mirrors.ustc.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.mirrors.ustc.edu.cn/simple/</a> </li>\n<li>豆瓣(douban) <a href=\"http://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">http://pypi.douban.com/simple/</a> </li>\n<li>清华大学 <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple/</a> </li>\n<li>中国科学技术大学 <a href=\"http://pypi.mirrors.ustc.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">http://pypi.mirrors.ustc.edu.cn/simple/</a></li>\n</ul>\n<p><strong>修改源方法：</strong></p>\n<p><strong>临时使用：</strong><br>可以在使用pip的时候在后面加上-i参数，指定pip源<br>eg: <code>pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>\n<p><strong>永久修改：</strong><br><strong>linux:</strong><br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</p>\n<pre><code>[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre><h1 id=\"ruby\"><a href=\"#ruby\" class=\"headerlink\" title=\"ruby\"></a>ruby</h1><blockquote>\n<p>  <a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n</blockquote>\n<pre><code class=\"shell\">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org\n# 请确保只有 gems.ruby-china.org\n$ gem install rails\n</code></pre>\n<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h2><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: <a href=\"https://oj7znbfj.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://oj7znbfj.mirror.aliyuncs.com</a></p>\n<p>新版的 <code>Docker</code> 使用 <code>/etc/docker/daemon.json（Linux）</code> 或者 <code>%programdata%\\docker\\config\\daemon.json（Windows）</code> 来配置 <code>Daemon</code>。</p>\n<p>请在该配置文件中加入（没有该文件的话，请先建一个）：</p>\n<pre><code class=\"json\">{\n    &quot;registry-mirrors&quot;: [&quot;https://oj7znbfj.mirror.aliyuncs.com&quot;]\n}\n</code></pre>\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><p>安装node.js后，现在的node.js已经自带了npm工具了，但是国外的源很慢，为了解决这个问题，同时使用cnpm替换npm，我们通过切换源，切换到国内淘宝的源中。下面是我的操作过程。简单记录便于以后自己查看。</p>\n<ol>\n<li><p>查看npm版本</p>\n<pre><code class=\"shell\">npm -v\n</code></pre>\n</li>\n<li><p>升级npm版本</p>\n<pre><code class=\"shell\">npm update\n</code></pre>\n</li>\n<li><p>查看npm配置</p>\n<pre><code class=\"shell\">npm config list\n</code></pre>\n</li>\n<li><p>更换源配置</p>\n<pre><code class=\"shell\">npm config set registry https://registry.npm.taobao.org\nnpm config list / npm config get registery #检查是否替换成功\n</code></pre>\n</li>\n<li><p>安装cnpm插件</p>\n<pre><code class=\"shell\">npm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm -v\n</code></pre>\n</li>\n<li><p>安装包测试</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Arch-or-manjaro-pacman\"><a href=\"#Arch-or-manjaro-pacman\" class=\"headerlink\" title=\"Arch or manjaro : pacman\"></a>Arch or manjaro : pacman</h1><h2 id=\"启用中国源\"><a href=\"#启用中国源\" class=\"headerlink\" title=\"启用中国源\"></a>启用中国源</h2><pre><code class=\"shell\">sudo pacman-mirrors -c China\n</code></pre>\n<h2 id=\"添加archlinuxcn源\"><a href=\"#添加archlinuxcn源\" class=\"headerlink\" title=\"添加archlinuxcn源\"></a>添加archlinuxcn源</h2><p>archlinuxcn源至您的 /etc/pacman.conf</p>\n<pre><code class=\"toml\">[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n</code></pre>\n<h1 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h1><h2 id=\"1-备份原来的源\"><a href=\"#1-备份原来的源\" class=\"headerlink\" title=\"1.备份原来的源\"></a>1.备份原来的源</h2><pre><code class=\"shell\">sudo cp /etc/apt/sources.list /etc/apt/sources_init.list\n</code></pre>\n<p>将以前的源备份一下，以防以后可以用的。</p>\n<h2 id=\"2-更换源\"><a href=\"#2-更换源\" class=\"headerlink\" title=\"2.更换源\"></a>2.更换源</h2><pre><code class=\"shell\">sudo gedit /etc/apt/sources.list\n</code></pre>\n<p>使用gedit打开文档，将下边的阿里源复制进去，然后点击保存关闭。</p>\n<h3 id=\"阿里源\"><a href=\"#阿里源\" class=\"headerlink\" title=\"阿里源\"></a>阿里源</h3><pre><code>deb http://mirrors.aliyun.com/ubuntu/ xenial main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe\n</code></pre><h2 id=\"3-更新\"><a href=\"#3-更新\" class=\"headerlink\" title=\"3.更新\"></a>3.更新</h2><h3 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h3><pre><code class=\"shell\">sudo apt-get update\n</code></pre>\n<p>复损坏的软件包，尝试卸载出错的包，重新安装正确版本的。</p>\n<pre><code class=\"shell\">sudo apt-get -f install\n</code></pre>\n<h3 id=\"更新软件\"><a href=\"#更新软件\" class=\"headerlink\" title=\"更新软件\"></a>更新软件</h3><pre><code class=\"shell\"> sudo apt-get upgrade\n</code></pre>\n<h2 id=\"4-其他常用源\"><a href=\"#4-其他常用源\" class=\"headerlink\" title=\"4.其他常用源\"></a>4.其他常用源</h2><h3 id=\"西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\"><a href=\"#西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\" class=\"headerlink\" title=\"西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）\"></a>西电源（只有校内网网线使用，但是不限制流量，还是十分靠谱的）</h3><pre><code>deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse\n\ndeb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse\n\n#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse\n</code></pre><h3 id=\"清华源\"><a href=\"#清华源\" class=\"headerlink\" title=\"清华源\"></a>清华源</h3><pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n</code></pre><h3 id=\"网易源\"><a href=\"#网易源\" class=\"headerlink\" title=\"网易源\"></a>网易源</h3><pre><code class=\"conf\">deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse\n</code></pre>\n<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h1 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h1><p><strong>pip国内的一些镜像</strong></p>\n<ul>\n<li>阿里云 <a href=\"http://mirrors.aliyun.com/pypi/simple/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/pypi/simple/</a> </li>\n<li>中国科技大学 <a href=\"https://pypi.mirrors.ustc.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.mirrors.ustc.edu.cn/simple/</a> </li>\n<li>豆瓣(douban) <a href=\"http://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">http://pypi.douban.com/simple/</a> </li>\n<li>清华大学 <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple/</a> </li>\n<li>中国科学技术大学 <a href=\"http://pypi.mirrors.ustc.edu.cn/simple/\" target=\"_blank\" rel=\"noopener\">http://pypi.mirrors.ustc.edu.cn/simple/</a></li>\n</ul>\n<p><strong>修改源方法：</strong></p>\n<p><strong>临时使用：</strong><br>可以在使用pip的时候在后面加上-i参数，指定pip源<br>eg: <code>pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>\n<p><strong>永久修改：</strong><br><strong>linux:</strong><br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</p>\n<pre><code>[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n</code></pre><h1 id=\"ruby\"><a href=\"#ruby\" class=\"headerlink\" title=\"ruby\"></a>ruby</h1><blockquote>\n<p>  <a href=\"https://ruby.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://ruby.taobao.org/</a></p>\n</blockquote>\n<pre><code class=\"shell\">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org\n# 请确保只有 gems.ruby-china.org\n$ gem install rails\n</code></pre>\n<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h2><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: <a href=\"https://oj7znbfj.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://oj7znbfj.mirror.aliyuncs.com</a></p>\n<p>新版的 <code>Docker</code> 使用 <code>/etc/docker/daemon.json（Linux）</code> 或者 <code>%programdata%\\docker\\config\\daemon.json（Windows）</code> 来配置 <code>Daemon</code>。</p>\n<p>请在该配置文件中加入（没有该文件的话，请先建一个）：</p>\n<pre><code class=\"json\">{\n    &quot;registry-mirrors&quot;: [&quot;https://oj7znbfj.mirror.aliyuncs.com&quot;]\n}\n</code></pre>\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><p>安装node.js后，现在的node.js已经自带了npm工具了，但是国外的源很慢，为了解决这个问题，同时使用cnpm替换npm，我们通过切换源，切换到国内淘宝的源中。下面是我的操作过程。简单记录便于以后自己查看。</p>\n<ol>\n<li><p>查看npm版本</p>\n<pre><code class=\"shell\">npm -v\n</code></pre>\n</li>\n<li><p>升级npm版本</p>\n<pre><code class=\"shell\">npm update\n</code></pre>\n</li>\n<li><p>查看npm配置</p>\n<pre><code class=\"shell\">npm config list\n</code></pre>\n</li>\n<li><p>更换源配置</p>\n<pre><code class=\"shell\">npm config set registry https://registry.npm.taobao.org\nnpm config list / npm config get registery #检查是否替换成功\n</code></pre>\n</li>\n<li><p>安装cnpm插件</p>\n<pre><code class=\"shell\">npm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm -v\n</code></pre>\n</li>\n<li><p>安装包测试</p>\n</li>\n</ol>\n"},{"title":"设计模式","date":"2018-11-18T13:06:08.000Z","description":null,"toc":true,"_content":"\n> 学习下设计模式\n>\n> 参考[菜鸟教程](http://www.runoob.com/)\n>\n> 但其实菜鸟教程介绍的比较简略,还是要参考下其他\n\n# 设计模式\n\n## 设计模式的六大原则\n\n**1、开闭原则（Open Close Principle）**\n\n开闭原则的意思是：**对扩展开放，对修改关闭**。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n\n**2、里氏代换原则（Liskov Substitution Principle）**\n\n里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n**3、依赖倒转原则（Dependence Inversion Principle）**\n\n这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n\n**4、接口隔离原则（Interface Segregation Principle）**\n\n这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n\n**5、迪米特法则，又称最少知道原则（Demeter Principle）**\n\n最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n**6、合成复用原则（Composite Reuse Principle）**\n\n合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n\n## 创建型模式\n\n> 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。\n\n### 工厂模式（Factory Pattern）\n\n[C++实现参考 <- 特别赞](https://blog.csdn.net/silangquan/article/details/20492293)\n\n\n\n### 抽象工厂模式（Abstract Factory Pattern）\n\n### 单例模式（Singleton Pattern）\n\n### 建造者模式（Builder Pattern）\n\n### 原型模式（Prototype Pattern）\n\n\n\n## **结构型模式** \n\n> 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。\n\n### 适配器模式（Adapter Pattern）\n\n### 桥接模式（Bridge Pattern）\n\n### 过滤器模式（Filter、Criteria Pattern）\n\n### 组合模式（Composite Pattern）\n\n### 装饰器模式（Decorator Pattern）\n\n### 外观模式（Facade Pattern）\n\n### 享元模式（Flyweight Pattern）\n\n### 代理模式（Proxy Pattern）\n\n\n\n## **行为型模式**\n\n### 责任链模式（Chain of Responsibility Pattern）\n\n### 命令模式（Command Pattern）\n\n### 解释器模式（Interpreter Pattern）\n\n### 迭代器模式（Iterator Pattern）\n\n### 中介者模式（Mediator Pattern）\n\n### 备忘录模式（Memento Pattern）\n\n### 观察者模式（Observer Pattern）\n\n### 状态模式（State Pattern）\n\n### 空对象模式（Null Object Pattern）\n\n### 策略模式（Strategy Pattern）\n\n### 模板模式（Template Pattern）\n\n### 访问者模式（Visitor Pattern）","source":"_posts/DesignPattern.md","raw":"---\ntitle: 设计模式\ndate: 2018-11-18 21:06:08\ncategories:  \ntags: [开发] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n---\n\n> 学习下设计模式\n>\n> 参考[菜鸟教程](http://www.runoob.com/)\n>\n> 但其实菜鸟教程介绍的比较简略,还是要参考下其他\n\n# 设计模式\n\n## 设计模式的六大原则\n\n**1、开闭原则（Open Close Principle）**\n\n开闭原则的意思是：**对扩展开放，对修改关闭**。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n\n**2、里氏代换原则（Liskov Substitution Principle）**\n\n里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n**3、依赖倒转原则（Dependence Inversion Principle）**\n\n这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n\n**4、接口隔离原则（Interface Segregation Principle）**\n\n这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n\n**5、迪米特法则，又称最少知道原则（Demeter Principle）**\n\n最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n**6、合成复用原则（Composite Reuse Principle）**\n\n合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n\n## 创建型模式\n\n> 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。\n\n### 工厂模式（Factory Pattern）\n\n[C++实现参考 <- 特别赞](https://blog.csdn.net/silangquan/article/details/20492293)\n\n\n\n### 抽象工厂模式（Abstract Factory Pattern）\n\n### 单例模式（Singleton Pattern）\n\n### 建造者模式（Builder Pattern）\n\n### 原型模式（Prototype Pattern）\n\n\n\n## **结构型模式** \n\n> 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。\n\n### 适配器模式（Adapter Pattern）\n\n### 桥接模式（Bridge Pattern）\n\n### 过滤器模式（Filter、Criteria Pattern）\n\n### 组合模式（Composite Pattern）\n\n### 装饰器模式（Decorator Pattern）\n\n### 外观模式（Facade Pattern）\n\n### 享元模式（Flyweight Pattern）\n\n### 代理模式（Proxy Pattern）\n\n\n\n## **行为型模式**\n\n### 责任链模式（Chain of Responsibility Pattern）\n\n### 命令模式（Command Pattern）\n\n### 解释器模式（Interpreter Pattern）\n\n### 迭代器模式（Iterator Pattern）\n\n### 中介者模式（Mediator Pattern）\n\n### 备忘录模式（Memento Pattern）\n\n### 观察者模式（Observer Pattern）\n\n### 状态模式（State Pattern）\n\n### 空对象模式（Null Object Pattern）\n\n### 策略模式（Strategy Pattern）\n\n### 模板模式（Template Pattern）\n\n### 访问者模式（Visitor Pattern）","slug":"DesignPattern","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2q00ixsafkbxo3y2p4","content":"<blockquote>\n<p>学习下设计模式</p>\n<p>参考<a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a></p>\n<p>但其实菜鸟教程介绍的比较简略,还是要参考下其他</p>\n</blockquote>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n<h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><blockquote>\n<p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>\n</blockquote>\n<h3 id=\"工厂模式（Factory-Pattern）\"><a href=\"#工厂模式（Factory-Pattern）\" class=\"headerlink\" title=\"工厂模式（Factory Pattern）\"></a>工厂模式（Factory Pattern）</h3><p><a href=\"https://blog.csdn.net/silangquan/article/details/20492293\" target=\"_blank\" rel=\"noopener\">C++实现参考 &lt;- 特别赞</a></p>\n<h3 id=\"抽象工厂模式（Abstract-Factory-Pattern）\"><a href=\"#抽象工厂模式（Abstract-Factory-Pattern）\" class=\"headerlink\" title=\"抽象工厂模式（Abstract Factory Pattern）\"></a>抽象工厂模式（Abstract Factory Pattern）</h3><h3 id=\"单例模式（Singleton-Pattern）\"><a href=\"#单例模式（Singleton-Pattern）\" class=\"headerlink\" title=\"单例模式（Singleton Pattern）\"></a>单例模式（Singleton Pattern）</h3><h3 id=\"建造者模式（Builder-Pattern）\"><a href=\"#建造者模式（Builder-Pattern）\" class=\"headerlink\" title=\"建造者模式（Builder Pattern）\"></a>建造者模式（Builder Pattern）</h3><h3 id=\"原型模式（Prototype-Pattern）\"><a href=\"#原型模式（Prototype-Pattern）\" class=\"headerlink\" title=\"原型模式（Prototype Pattern）\"></a>原型模式（Prototype Pattern）</h3><h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a><strong>结构型模式</strong></h2><blockquote>\n<p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>\n</blockquote>\n<h3 id=\"适配器模式（Adapter-Pattern）\"><a href=\"#适配器模式（Adapter-Pattern）\" class=\"headerlink\" title=\"适配器模式（Adapter Pattern）\"></a>适配器模式（Adapter Pattern）</h3><h3 id=\"桥接模式（Bridge-Pattern）\"><a href=\"#桥接模式（Bridge-Pattern）\" class=\"headerlink\" title=\"桥接模式（Bridge Pattern）\"></a>桥接模式（Bridge Pattern）</h3><h3 id=\"过滤器模式（Filter、Criteria-Pattern）\"><a href=\"#过滤器模式（Filter、Criteria-Pattern）\" class=\"headerlink\" title=\"过滤器模式（Filter、Criteria Pattern）\"></a>过滤器模式（Filter、Criteria Pattern）</h3><h3 id=\"组合模式（Composite-Pattern）\"><a href=\"#组合模式（Composite-Pattern）\" class=\"headerlink\" title=\"组合模式（Composite Pattern）\"></a>组合模式（Composite Pattern）</h3><h3 id=\"装饰器模式（Decorator-Pattern）\"><a href=\"#装饰器模式（Decorator-Pattern）\" class=\"headerlink\" title=\"装饰器模式（Decorator Pattern）\"></a>装饰器模式（Decorator Pattern）</h3><h3 id=\"外观模式（Facade-Pattern）\"><a href=\"#外观模式（Facade-Pattern）\" class=\"headerlink\" title=\"外观模式（Facade Pattern）\"></a>外观模式（Facade Pattern）</h3><h3 id=\"享元模式（Flyweight-Pattern）\"><a href=\"#享元模式（Flyweight-Pattern）\" class=\"headerlink\" title=\"享元模式（Flyweight Pattern）\"></a>享元模式（Flyweight Pattern）</h3><h3 id=\"代理模式（Proxy-Pattern）\"><a href=\"#代理模式（Proxy-Pattern）\" class=\"headerlink\" title=\"代理模式（Proxy Pattern）\"></a>代理模式（Proxy Pattern）</h3><h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a><strong>行为型模式</strong></h2><h3 id=\"责任链模式（Chain-of-Responsibility-Pattern）\"><a href=\"#责任链模式（Chain-of-Responsibility-Pattern）\" class=\"headerlink\" title=\"责任链模式（Chain of Responsibility Pattern）\"></a>责任链模式（Chain of Responsibility Pattern）</h3><h3 id=\"命令模式（Command-Pattern）\"><a href=\"#命令模式（Command-Pattern）\" class=\"headerlink\" title=\"命令模式（Command Pattern）\"></a>命令模式（Command Pattern）</h3><h3 id=\"解释器模式（Interpreter-Pattern）\"><a href=\"#解释器模式（Interpreter-Pattern）\" class=\"headerlink\" title=\"解释器模式（Interpreter Pattern）\"></a>解释器模式（Interpreter Pattern）</h3><h3 id=\"迭代器模式（Iterator-Pattern）\"><a href=\"#迭代器模式（Iterator-Pattern）\" class=\"headerlink\" title=\"迭代器模式（Iterator Pattern）\"></a>迭代器模式（Iterator Pattern）</h3><h3 id=\"中介者模式（Mediator-Pattern）\"><a href=\"#中介者模式（Mediator-Pattern）\" class=\"headerlink\" title=\"中介者模式（Mediator Pattern）\"></a>中介者模式（Mediator Pattern）</h3><h3 id=\"备忘录模式（Memento-Pattern）\"><a href=\"#备忘录模式（Memento-Pattern）\" class=\"headerlink\" title=\"备忘录模式（Memento Pattern）\"></a>备忘录模式（Memento Pattern）</h3><h3 id=\"观察者模式（Observer-Pattern）\"><a href=\"#观察者模式（Observer-Pattern）\" class=\"headerlink\" title=\"观察者模式（Observer Pattern）\"></a>观察者模式（Observer Pattern）</h3><h3 id=\"状态模式（State-Pattern）\"><a href=\"#状态模式（State-Pattern）\" class=\"headerlink\" title=\"状态模式（State Pattern）\"></a>状态模式（State Pattern）</h3><h3 id=\"空对象模式（Null-Object-Pattern）\"><a href=\"#空对象模式（Null-Object-Pattern）\" class=\"headerlink\" title=\"空对象模式（Null Object Pattern）\"></a>空对象模式（Null Object Pattern）</h3><h3 id=\"策略模式（Strategy-Pattern）\"><a href=\"#策略模式（Strategy-Pattern）\" class=\"headerlink\" title=\"策略模式（Strategy Pattern）\"></a>策略模式（Strategy Pattern）</h3><h3 id=\"模板模式（Template-Pattern）\"><a href=\"#模板模式（Template-Pattern）\" class=\"headerlink\" title=\"模板模式（Template Pattern）\"></a>模板模式（Template Pattern）</h3><h3 id=\"访问者模式（Visitor-Pattern）\"><a href=\"#访问者模式（Visitor-Pattern）\" class=\"headerlink\" title=\"访问者模式（Visitor Pattern）\"></a>访问者模式（Visitor Pattern）</h3>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>学习下设计模式</p>\n<p>参考<a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a></p>\n<p>但其实菜鸟教程介绍的比较简略,还是要参考下其他</p>\n</blockquote>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n<h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><blockquote>\n<p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>\n</blockquote>\n<h3 id=\"工厂模式（Factory-Pattern）\"><a href=\"#工厂模式（Factory-Pattern）\" class=\"headerlink\" title=\"工厂模式（Factory Pattern）\"></a>工厂模式（Factory Pattern）</h3><p><a href=\"https://blog.csdn.net/silangquan/article/details/20492293\" target=\"_blank\" rel=\"noopener\">C++实现参考 &lt;- 特别赞</a></p>\n<h3 id=\"抽象工厂模式（Abstract-Factory-Pattern）\"><a href=\"#抽象工厂模式（Abstract-Factory-Pattern）\" class=\"headerlink\" title=\"抽象工厂模式（Abstract Factory Pattern）\"></a>抽象工厂模式（Abstract Factory Pattern）</h3><h3 id=\"单例模式（Singleton-Pattern）\"><a href=\"#单例模式（Singleton-Pattern）\" class=\"headerlink\" title=\"单例模式（Singleton Pattern）\"></a>单例模式（Singleton Pattern）</h3><h3 id=\"建造者模式（Builder-Pattern）\"><a href=\"#建造者模式（Builder-Pattern）\" class=\"headerlink\" title=\"建造者模式（Builder Pattern）\"></a>建造者模式（Builder Pattern）</h3><h3 id=\"原型模式（Prototype-Pattern）\"><a href=\"#原型模式（Prototype-Pattern）\" class=\"headerlink\" title=\"原型模式（Prototype Pattern）\"></a>原型模式（Prototype Pattern）</h3><h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a><strong>结构型模式</strong></h2><blockquote>\n<p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>\n</blockquote>\n<h3 id=\"适配器模式（Adapter-Pattern）\"><a href=\"#适配器模式（Adapter-Pattern）\" class=\"headerlink\" title=\"适配器模式（Adapter Pattern）\"></a>适配器模式（Adapter Pattern）</h3><h3 id=\"桥接模式（Bridge-Pattern）\"><a href=\"#桥接模式（Bridge-Pattern）\" class=\"headerlink\" title=\"桥接模式（Bridge Pattern）\"></a>桥接模式（Bridge Pattern）</h3><h3 id=\"过滤器模式（Filter、Criteria-Pattern）\"><a href=\"#过滤器模式（Filter、Criteria-Pattern）\" class=\"headerlink\" title=\"过滤器模式（Filter、Criteria Pattern）\"></a>过滤器模式（Filter、Criteria Pattern）</h3><h3 id=\"组合模式（Composite-Pattern）\"><a href=\"#组合模式（Composite-Pattern）\" class=\"headerlink\" title=\"组合模式（Composite Pattern）\"></a>组合模式（Composite Pattern）</h3><h3 id=\"装饰器模式（Decorator-Pattern）\"><a href=\"#装饰器模式（Decorator-Pattern）\" class=\"headerlink\" title=\"装饰器模式（Decorator Pattern）\"></a>装饰器模式（Decorator Pattern）</h3><h3 id=\"外观模式（Facade-Pattern）\"><a href=\"#外观模式（Facade-Pattern）\" class=\"headerlink\" title=\"外观模式（Facade Pattern）\"></a>外观模式（Facade Pattern）</h3><h3 id=\"享元模式（Flyweight-Pattern）\"><a href=\"#享元模式（Flyweight-Pattern）\" class=\"headerlink\" title=\"享元模式（Flyweight Pattern）\"></a>享元模式（Flyweight Pattern）</h3><h3 id=\"代理模式（Proxy-Pattern）\"><a href=\"#代理模式（Proxy-Pattern）\" class=\"headerlink\" title=\"代理模式（Proxy Pattern）\"></a>代理模式（Proxy Pattern）</h3><h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a><strong>行为型模式</strong></h2><h3 id=\"责任链模式（Chain-of-Responsibility-Pattern）\"><a href=\"#责任链模式（Chain-of-Responsibility-Pattern）\" class=\"headerlink\" title=\"责任链模式（Chain of Responsibility Pattern）\"></a>责任链模式（Chain of Responsibility Pattern）</h3><h3 id=\"命令模式（Command-Pattern）\"><a href=\"#命令模式（Command-Pattern）\" class=\"headerlink\" title=\"命令模式（Command Pattern）\"></a>命令模式（Command Pattern）</h3><h3 id=\"解释器模式（Interpreter-Pattern）\"><a href=\"#解释器模式（Interpreter-Pattern）\" class=\"headerlink\" title=\"解释器模式（Interpreter Pattern）\"></a>解释器模式（Interpreter Pattern）</h3><h3 id=\"迭代器模式（Iterator-Pattern）\"><a href=\"#迭代器模式（Iterator-Pattern）\" class=\"headerlink\" title=\"迭代器模式（Iterator Pattern）\"></a>迭代器模式（Iterator Pattern）</h3><h3 id=\"中介者模式（Mediator-Pattern）\"><a href=\"#中介者模式（Mediator-Pattern）\" class=\"headerlink\" title=\"中介者模式（Mediator Pattern）\"></a>中介者模式（Mediator Pattern）</h3><h3 id=\"备忘录模式（Memento-Pattern）\"><a href=\"#备忘录模式（Memento-Pattern）\" class=\"headerlink\" title=\"备忘录模式（Memento Pattern）\"></a>备忘录模式（Memento Pattern）</h3><h3 id=\"观察者模式（Observer-Pattern）\"><a href=\"#观察者模式（Observer-Pattern）\" class=\"headerlink\" title=\"观察者模式（Observer Pattern）\"></a>观察者模式（Observer Pattern）</h3><h3 id=\"状态模式（State-Pattern）\"><a href=\"#状态模式（State-Pattern）\" class=\"headerlink\" title=\"状态模式（State Pattern）\"></a>状态模式（State Pattern）</h3><h3 id=\"空对象模式（Null-Object-Pattern）\"><a href=\"#空对象模式（Null-Object-Pattern）\" class=\"headerlink\" title=\"空对象模式（Null Object Pattern）\"></a>空对象模式（Null Object Pattern）</h3><h3 id=\"策略模式（Strategy-Pattern）\"><a href=\"#策略模式（Strategy-Pattern）\" class=\"headerlink\" title=\"策略模式（Strategy Pattern）\"></a>策略模式（Strategy Pattern）</h3><h3 id=\"模板模式（Template-Pattern）\"><a href=\"#模板模式（Template-Pattern）\" class=\"headerlink\" title=\"模板模式（Template Pattern）\"></a>模板模式（Template Pattern）</h3><h3 id=\"访问者模式（Visitor-Pattern）\"><a href=\"#访问者模式（Visitor-Pattern）\" class=\"headerlink\" title=\"访问者模式（Visitor Pattern）\"></a>访问者模式（Visitor Pattern）</h3>"},{"title":"面试经历.","date":"2018-01-31T07:56:08.000Z","description":null,"toc":true,"_content":"\n> 总结下所有的面试, 这样才能**慢慢**进步呀,,,,\n\n## 哈尔滨某小公司 - C++岗实习 [现场面] - offer\n\n除了问一个多态,没有技术问题,大概是给答上了 意思对,但不专业\n\n-----\n小公司估计是真的没人了,,,,待遇实在...拒绝\n\n\n## 头条 - 后台开发实习生 [视频面试] 一面 - 跪\n\n可能是紧张吧,开始闲聊然后给了个编程题\n给一个化学表达式\n```math\neg: HMg_{_2}(H_2O(N_3Ag)_2)_3N_2\n```\n,让算每个元素有多少个.\n\n这种题本就不难 问题就是怎么处理括号 \n之前在hiho上还遇到过类似的问题http://www.hihocoder.com/contest/offers41/problem/2\n\n然后不知道紧张还是什么的就写的很乱,然后面试官提示递归,然后墨迹了好久才用stack写了下来.....\n\n因为我没有项目,就没有问项目.\n然后问我们学了数据库,操作系统,网络没有,,,,   嗯 学校确实讲过,但我没听过课...\n\n问了个进程调度,\n\n我就知道有个算法叫FIFO, 具体是啥还忘了, 然后说错了,,GG\n\n然后唠了两句面试官说结束,等HR通知,,,  嗯.感谢面试官浪费40+分钟陪我 hhhh.\n\n--------------------------\n\n总结:\n有点紧张. 代码能力差 ,**[数据库,操作系统,网络]** 知识严重匮乏.\n\n之前看面经说,遇到不会的或者把不准的都应该说**不会**. 下次注意.\n\n\n## 达内 - NOIP助教 现场面\n\n达内这个大家都懂.\n\n突然有天接到达内一个经理的电话,问我能不能去当助教,去教小朋友普及组的NOIP.\n我心想,这也还不错呀.\n然后去了,开始跟我吹了1个小时的牛逼,达内多么多么牛逼.怎么怎么地.\n然后给了我一份NOIP普及组的题让我做..\n\n说来惭愧,中文题面,我竟读错一道题卡了好久,,,然后花了1个多小时终于把4个题做出来了,最后一题还做得很麻烦...\n然后来了一个小伙子,谈了谈对NOIP的认识,以及我的学习情况.\n交上去给了一个小姐姐,然后看见三个人对着电脑看了半天..\n\n然后说一定要一年,但我最多只能半年,于是据.\n\n------------------------------\n体验美滋滋,没有麻烦的题目,没有操作系统,没有计算机网络,没有数据库.真棒 hhh\n\n## 深信服 - C/C++ 电话面试 一面-估计跪了\n\n深圳打来的电话, 不知道哪里人, 浓重的方言口音, 他说话我都要问好多遍才能听懂...交流真滴有障碍...\n\n一共22分钟,三个问题\n\n1 . 两个字符串,一个大串,一个小串,问小串是不是大串的子串(不连续)的.\n\n我回答了: 遍历大串,然后对小串维护一个遍历的指针就行了\n\n然后他说不是他想要的,问的是正则?\n\n我记得有正则查询可以模糊匹配,只要在两个相邻的字母中插进去就好了,,但我忘记了具体插什么,\n\n结束后一查知道是 `.*` [. 匹配任意非\\n的字符 *是0个或多个]\n\n2 . 给一个100万的字符串,然后找到最短的循环覆盖的子串.\n\n我开始以为是ABCABC这样的 最短就是ABC了 ,拿next数组直接做就行了,\n\n然后说了半天,最后知道,他说的可以是这样ABCABCAB,还可以是ABC\n\n想了想发现和之前的一样, 还是求next数组,然后就可以把结尾的AB给去掉了,然后就和之前一样了.\n\n然后不知怎么就陷入了一阵交流障碍,我不知道他说的啥,他不知道我说的啥.\n\n然后我发现他是想让我说一下next怎么求...\n\n想了想,不能画图 怎么说呀, 问写代码行吗, 额 他也看不见....\n\n然后勉强解释了下 维护两个指针,一个i遍历大串,j是维护匹配到的位置,balabala的,\n\n也不知道他明白没有...\n\n----------\n\n然后他问我用linux还是windows多,\n\n我说用过linux,但还是windows多.\n\n然后问我一个问题,我听成了python.. 我说我会python.....但他好像问的根本不是这个问题,,,\n\n---------\n3 . 最后问我进程的内存分布\n\n我不会呀..\n\n说了一个堆栈..就说不知道了, \n\n于是结束...\n\n目测GG\n\n\n---\n\n总结: 说好的12点,结果15点电话过来了,,,措手不及,以为没我事儿了呢,\n\n交流障碍导致前面两个问题说的不太好,而且电话面试真的不如视频面试呀,更别说现场面试了,,,后面确实不会, 操作系统,网络,数据库 多看看呀..\n\n\n## 阿里云, 分布式,大数据   - 基础平台研发工程师实习 电话面试 一面-跪了\n\nredis和MongoDB的区别。 谈一谈这两个数据库 。   (他以为我是自己搭建的数据库，，但我就是安装然后用的呀)\n说一下大数据: hadoop - HDFS，hive 和 MapReduce ，问哪个是存储的，脑抽说了个hive，，， 后来改正了，然后问HDFS里面都有什么，答NameNode 和 DataNode，\n问我还有什么，我不知道，他告诉我还有sdk。\n\n然后让我说竞赛中做过的经典，印象深刻的题目，想了好久，随便说了一个题，题目不怎么难，其实说的很模糊，而且说的时候还把那个题给弱化了，，记不太清那个题目了，\n\n然后问了我一个问题，现在都没想明白，说HDFS传3个副本，然后又客户在另一端访问这个。 然后是传完这**三**个副本告诉客户传完了有一个延迟时间，这**两**个副本告诉客户传完了有一个延迟时间，，\n两个的会比三个的地低，\n然后给初问题，给一个T，求N，M。 T是客户允许的最长延迟时间，N是副本总数，M是传完M个告诉客户传完了。\n我只知道可以通过传好多次 算一个副本的时间t，但是不会算大T， 跟概率，期望，有关\n\n\n最后让写了一个编程题，很简单的n个区间 问覆盖的长度总和是多少。 谈了50多分种 脑子有点蒙，写了好几分钟。。 但他看了好长时间，难道是我写的错啦？？。。\n\n然后问了面试官几个问题，\n大数据如何高效学习，论文，跟进\n分布式如何学习，\n\n他们这个是做底层的，，，\n\n然后就是如果通过了 下次面试是什么时候，，，，但估计没有下次了，，，，，\n\n--------\n虽然啥都不会，什么都没有答上来。 体验非常好的一次面试，面试官人特别好，面对我这样的垃圾面试人员，应该很无奈，但依然很耐心的面试我，最后还提了好多问题。\n\n但是很奇怪，这次竟然一点操作系统和数据结构的问题都没有问， 之前看到牛客网一个基础平台研发，问了这些问题的呀。\n\n## 瓜子二手车 后台研发实习生 现场一二面, 给了offer邀请.\n\n- 1面\n    自我介绍,没准备,随便说了下\n    唠了两句家常.\n\n    绳子不均匀,燃烧的问题,一根绳子1个小时烧完.\n    怎么找30分钟,75分钟.\n\n    说下栈和队列\n    双栈怎么实现队列\n\n    计算机网络的几个零碎的小问题,没记住.\n\n    然后写了两个代码题\n    - 交叉的链表,找交叉的位置,\n    链表的代码思路对,但是head节点没有val这点被我忘记了\n    - 单链表找倒数第k个节点,\n    \n    数据库索引怎么实现的 -> b+树\n    b+树为什么会快 -> 搜索树,有剪枝\n    非\\*\\*和\\*\\*的区别 -> 不知道,没听说过 (告诉我是 index 和 index+data的区别,名字想不起来了)\n    数据库事务的四个特性ACID -> 我分不清那个是哪个了,就举个例子说了,\n    还有两个数据库的问题,想不起来了,\n\n    问问题,问了技术栈和分布式的东西.\n\n- 2面\n    领我进去的小哥哥说是总监面\n\n    自我介绍.唠家常.\n\n    两个集合求交,写代码 谢了归并排序+二分, 然后过了会说了个更简单的方法,\n\n    几个小问题,没记住\n\n    给我写了几个词,让我谈一谈\n    - set,stack,链表,数组,map,hash\n    - tcp,udp,http,https,ftp\n\n    聊了聊最近在学习什么.说我基础薄弱..\n\n    问问题. 问了职业规划.答:选择做技术就一直做技术.\n \n ---\n可能因为是小公司吧,问的问题都比较简单.算法为了体现水平,学习了网上的套路,先给出一个不是很好的做法,然后再给一个优秀的做法.[斜眼笑]\n走的时候小哥哥看了看评价表和我说不错,应该很稳,让我回去等消息就行啦. \n面试官都很随和,出去的时候和一个工大研一的同来面试的小哥哥聊天才知道那个总监挺牛逼的.\n\n## 今日头条 后端研发实习生  - 12面 [GG]\n\n### 一面\n一面直接给了一个问题,\nS_0 = {1}\nS_0 = {1,2,1}\n...\nS_n = S_{n-1},n+1,S_{n-1}\n\n问: 1. |S_n|  开始嘴飘,想当然的就说了,,后来说对了 2^{n+1}-1\n            然后让我证明,,, 不会证,,,\n\n    2. 让实现一个函数int get_value(int n,int i) ,S_n的第i个元素,从0开始,,,,\n        然后我写了一个从1开始的,就被嘲讽了,,,然后一个变量打错,被指漏洞百出...\n        准备说的最优解还没有开始,就不理我了, (第i个数就是0~2^{n+1}-1的第i个数二进制小的最后一个一的长度,或者理解为lowbit(i)的二进制长度)\n\n然后有趣,hr给我打电话,委婉的告诉我挂了,,然后突然来了二面,,,,,\n\n### 二面\n好吧,二面,啥都不会呀 ...\n\n开始看了我一面写的代码,说风格太老了,,,现在C11已经不这么写了,,\n\n然后问我平时用的数据结构是stl的还是C11的,,讲道理我只知道STL的,不知道c11有什么数据结构,难道是传说中的那个能重写pushup,pushdown的内个??\n\n谈了谈我用到的那些数据结构,说我只用过基础的数据结构,,\n然后让说了一下vector的实现,我就说了一下仅了解的它为什么能像数组那个用,,\n\n然后问一堆c11的问题,动态指针什么的,不会\n\n其中夹杂着问\n\n问会计组么,,tm不会呀,说你问吧,我试试\n问了int是反码还是补码,隐隐约约记得是补码,磨磨唧唧说了,\n\n问socket编程, 不会, 没接触过.\n问多线程编程, 我说接触过一点点, 只写过多线程循环打印的.\n\n```\nclass Test{\n    private int a;\n    private int b;\n    int test(){};\n}\nstruct Test2{\n    int a;\n    char b;\n    char c;\n}\n\nsizeof(Test)是多少. 我说12 ,(不知道对错,开始答8然后他沉默就改了, **其实就是8** )  \nsizeof(Test2)是多少. 我说8 , 因为要内存对齐\n```\n\n让我写一个函数验证机器的大小端 表示不知道大小端是什么,\n```\nint main(){\n    int a = 1;\n    char s = *(char *)&a;\n    if(s == 1) puts(\"small\");\n    else       puts(\"big\");\n}\n```\nclass 和 struct的区别, 只知道class默认是private,struct默认是public, 问我还有什么 不知道\n\n问我sizeof(一个指针)是多少,不知道,叨咕了一个8,然后他告诉我32位机器是4,64位机器是8;\n\n给了一个代码\n```\nvoid test(int *p){\n    p = (int *)malloc(sizeof(int))\n}\n```\n问p改没改变\n\n蒙的改变, p指向了新开辟的那个地址.\n\n编程题,大数加法,不让用char a[],只让用string... 写的稍墨迹\n\n然后问string += 和 +的区别\n\n就是 a+=b 和a=a+b\n表示没看过string源码,也不了解string咋实现的,类比vector说了一下. 又错了\n\n问数据库, 我说了解的不是很深入, 然后就没问. (其实以后应该说,试一试,,)\n\n然后就问问题,唠家常了,,,,\n\n最后再见,\n\n结果在一个小时之内,听到了两次同一个hr小姐姐的拒绝电话,,,,\n\n-------------------------------\n体验是真几把刺激,面挂了一面还面了第二面,hhhh,于是二面的时候就很懵逼,,,\n\n但是确实啥都不会呀....\n\n总结就是多学习吧. \n\n但是有个大失误,问计网,操作系统,数据库的时候,应该说试一下的,,毕竟还是看了一些的呀,多少还是能答上来一点的,,\n\n## 美团 后台开发 (搞笑)\n\n开始自我介绍,聊了聊最近看什么数,还有数据库啥的\n\n十分钟过后,跟我说只要Java, 不合适, 嗯 ,然后88\n\n----------------------\n傻逼美团,怎么筛选的简历,岗位要求上不是写的4中语言之一吗,,,,,而且不准备培养实习生的吗,,还听说之前实习生一个转正的都没有??!\n\n## 吉比特 游戏开发(实习) \n\n### 一面\n\n自我介绍\n多线程\n内联函数和宏函数\npython闭包\nsocket编程\n函数内的malloc 存在哪里\n内联函数\n右值引用\n进程间通信\n连续子序列最大和\nvector\nset 和 map的底层数据结构 \nhash冲突解决\n内存泄漏解决\nC++调用函数\n虚析构函数\n一个文本相同的行去除, 保留第一个 (内存存的下/存不下)\n还有问题 记不起来了\n\n--------------------------------------\n表现很差呀, 算法也没有问，代码都没让写，，，\n\n\n## 腾讯 后台开发(实习)\n\n### 一面\n自我介绍,\n\n闲聊\n介绍了ACM比赛\n最近在干什么\n\n技术上的问了\n网络编程接触过没 ->没接触过\n数据一致性怎么保证 -> 不会\n两个文件都是100W个整数,找出相同的 -> 排序,然后归并的过程\n进程间通信 并举例说出场景 -> 管道不知道,剩下三个举例了,\n说说STL -> 说了下vector怎么保证可变长度而且复杂度还是O(1),map和set都是红黑树啥啥啥的\nnew/delete 和malloc/free的区别 -> 说没怎么用过后者,一直用前者,因为后者长.面试官笑..然后说了几个new/delete使用的时候需要注意的问题.\n谈到指针,问多线程删除map元素怎么办 -> 先回答把多个线程要删除的记下来,然后统一删除, 他说可以, 但是希望我在指针的方式考虑, 想了想不会, 他让我回去看下map的源码关于元素删除的部分, 看过之后会有想法.\n多线程有什么了解 -> 说了下ABC循环打印的那个, 然后就没有了\n高并发怎么处理, -> 读的不加锁,写的加锁\n接上个问我脏读怎么办 -> 我说加个时间戳,他说不太好,然后不会了\n对安全了解多少 -> 把只会的凯撒加密和RSA加密说了说\n对称加密和非对称加密 -> 忘记了,说不太清了,告诉他不强答\nC++的封装/继承/多态-> 说了说多态和继承,封装我觉得没啥说的呀,,\n\n还有几个问题,忘了\n\n非技术问题\n说给我安排一个任务,一周上线,这个任务我现在不会,怎么办 -> 我觉得时间够用,没有问题,2天时间学习,3天时间实现, 具体实施的时候先请教别人,翻论文 \n如果我现在时间很紧的赶一个任务,有人请教我会的东西,我怎么做 -> 甩给他相关的资料让他自己学习, 如果还不懂,粗浅的指点一下  还不懂,就对不起了,(这个很坑呀,步步紧逼)\n\n问问题\n就问了怎么学习linux,\n之前准备问的问题,都忘记问了\n\n----------------------------------\n面试官挺随和的, 开始挺紧张的 ,后来就不紧张了, 现场面试还是比电面/视频面舒服.\n过程就像实在闲聊\n还是什么都不会, 面试官让我把学习重心放在网络编程和安全这方面,说用到的多,学习的时候多看看源码.\n\n### 二面\n\n问的和一面差不多,\n多问了几个小问题而已\n\n数据库的东西问了很多, 但不会\n然后和一面有重复的问题,但是昨天回去查了下,答得比较完整\nHash处理冲突,解决办法\n内存泄露的时候如何定位 -> 说调用系统的函数监控内存\n内存分布 -> 有一个忘记了,其他的说的没问题\n进程调度算法 -> 先到先服务 , 短作业优先, 多级反馈队列\n接上个问现在系统的调度算法 -> 在提示说同时能音乐,处理网页这些 想起来时间片轮转算法,说了些, \nstd::sort()怎么实现的 -> 内省排序,\n接上个std::sort()什么时候采用插入排序,归并排序,快排 -> 举了什么时候插排会更快, 和归并是为了防止快排退化 balabala\n\n剩下的暂时想不起来了,\n\n\n----------------------------------\n面试官看起来挺年轻的, 数据库东西确实不太会, 而且又没让写代码, 以为凉凉了,,,\n5点多接到明天hr面的消息,\n\n\n## 旷视 Face++   后台实习生 \n\n### 一面\n\n就两个问题\n一个拓扑排序,拓扑序计数,\n一个二分check的问题\n\n开始网站打不开,只写了第二个的代码\n\n然后就问我最近学什么, 以后的方向什么的 聊了好久\n\n问了几个问题就结束了\n\n--------------------------------------\n感觉不错,面试官说重视的就是coding能力,其他的都可以在学,\n等消息\n~~智障,问面试官需要什么样的人才,说我这样的,一周后问面试官,说挂了~~\n\n## 京东云 C++(实习)\n\n### 一面\n刚面完腾讯的hr面回来到实验室扯了两句,就收到面试了\n\n给了个写代码的网页死活打不开,然后就改手写发照片了\n写了一个矩阵,一层一层输出的代码\n\n然后说了C++的stl\nvector的变长机制\n平衡树\n\ntcp的三次握手,四次挥手,为什么三次,为什么四次\n网络分层,说了下osi的七层\n问tcp在那层,不知道,猜了个网络层,,,然后面试官问tcp的t是什么,想起是transfer,说出了传输层\n\n然后还有几个问题,忘了\n\n日常问面试官问题结束\n---------------------------------\n面试官挺nice的\n\n### 二面\n感觉效率很高 上午面完下午5点就来二面了,\n\n面向对象编程谈谈\nC++ stl\n内存分布\n网络的那几个老生常谈的问题\n进程间通信\n数据库谈了谈\n\n一个linux 操作的问题,不会\n\n还有几个问题 忘了\n\n### hr面\n因为一二面是周五 周一去考科四的时候来的电话\n\n瞎聊天 结束\n","source":"_posts/ExperienceOfInterview.md","raw":"---\ntitle: 面试经历.\ndate: 2018-1-31 15:56:08\ncategories:  \ntags: [面试,C++,数据库,操作系统,计算机网络] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n---\n\n> 总结下所有的面试, 这样才能**慢慢**进步呀,,,,\n\n## 哈尔滨某小公司 - C++岗实习 [现场面] - offer\n\n除了问一个多态,没有技术问题,大概是给答上了 意思对,但不专业\n\n-----\n小公司估计是真的没人了,,,,待遇实在...拒绝\n\n\n## 头条 - 后台开发实习生 [视频面试] 一面 - 跪\n\n可能是紧张吧,开始闲聊然后给了个编程题\n给一个化学表达式\n```math\neg: HMg_{_2}(H_2O(N_3Ag)_2)_3N_2\n```\n,让算每个元素有多少个.\n\n这种题本就不难 问题就是怎么处理括号 \n之前在hiho上还遇到过类似的问题http://www.hihocoder.com/contest/offers41/problem/2\n\n然后不知道紧张还是什么的就写的很乱,然后面试官提示递归,然后墨迹了好久才用stack写了下来.....\n\n因为我没有项目,就没有问项目.\n然后问我们学了数据库,操作系统,网络没有,,,,   嗯 学校确实讲过,但我没听过课...\n\n问了个进程调度,\n\n我就知道有个算法叫FIFO, 具体是啥还忘了, 然后说错了,,GG\n\n然后唠了两句面试官说结束,等HR通知,,,  嗯.感谢面试官浪费40+分钟陪我 hhhh.\n\n--------------------------\n\n总结:\n有点紧张. 代码能力差 ,**[数据库,操作系统,网络]** 知识严重匮乏.\n\n之前看面经说,遇到不会的或者把不准的都应该说**不会**. 下次注意.\n\n\n## 达内 - NOIP助教 现场面\n\n达内这个大家都懂.\n\n突然有天接到达内一个经理的电话,问我能不能去当助教,去教小朋友普及组的NOIP.\n我心想,这也还不错呀.\n然后去了,开始跟我吹了1个小时的牛逼,达内多么多么牛逼.怎么怎么地.\n然后给了我一份NOIP普及组的题让我做..\n\n说来惭愧,中文题面,我竟读错一道题卡了好久,,,然后花了1个多小时终于把4个题做出来了,最后一题还做得很麻烦...\n然后来了一个小伙子,谈了谈对NOIP的认识,以及我的学习情况.\n交上去给了一个小姐姐,然后看见三个人对着电脑看了半天..\n\n然后说一定要一年,但我最多只能半年,于是据.\n\n------------------------------\n体验美滋滋,没有麻烦的题目,没有操作系统,没有计算机网络,没有数据库.真棒 hhh\n\n## 深信服 - C/C++ 电话面试 一面-估计跪了\n\n深圳打来的电话, 不知道哪里人, 浓重的方言口音, 他说话我都要问好多遍才能听懂...交流真滴有障碍...\n\n一共22分钟,三个问题\n\n1 . 两个字符串,一个大串,一个小串,问小串是不是大串的子串(不连续)的.\n\n我回答了: 遍历大串,然后对小串维护一个遍历的指针就行了\n\n然后他说不是他想要的,问的是正则?\n\n我记得有正则查询可以模糊匹配,只要在两个相邻的字母中插进去就好了,,但我忘记了具体插什么,\n\n结束后一查知道是 `.*` [. 匹配任意非\\n的字符 *是0个或多个]\n\n2 . 给一个100万的字符串,然后找到最短的循环覆盖的子串.\n\n我开始以为是ABCABC这样的 最短就是ABC了 ,拿next数组直接做就行了,\n\n然后说了半天,最后知道,他说的可以是这样ABCABCAB,还可以是ABC\n\n想了想发现和之前的一样, 还是求next数组,然后就可以把结尾的AB给去掉了,然后就和之前一样了.\n\n然后不知怎么就陷入了一阵交流障碍,我不知道他说的啥,他不知道我说的啥.\n\n然后我发现他是想让我说一下next怎么求...\n\n想了想,不能画图 怎么说呀, 问写代码行吗, 额 他也看不见....\n\n然后勉强解释了下 维护两个指针,一个i遍历大串,j是维护匹配到的位置,balabala的,\n\n也不知道他明白没有...\n\n----------\n\n然后他问我用linux还是windows多,\n\n我说用过linux,但还是windows多.\n\n然后问我一个问题,我听成了python.. 我说我会python.....但他好像问的根本不是这个问题,,,\n\n---------\n3 . 最后问我进程的内存分布\n\n我不会呀..\n\n说了一个堆栈..就说不知道了, \n\n于是结束...\n\n目测GG\n\n\n---\n\n总结: 说好的12点,结果15点电话过来了,,,措手不及,以为没我事儿了呢,\n\n交流障碍导致前面两个问题说的不太好,而且电话面试真的不如视频面试呀,更别说现场面试了,,,后面确实不会, 操作系统,网络,数据库 多看看呀..\n\n\n## 阿里云, 分布式,大数据   - 基础平台研发工程师实习 电话面试 一面-跪了\n\nredis和MongoDB的区别。 谈一谈这两个数据库 。   (他以为我是自己搭建的数据库，，但我就是安装然后用的呀)\n说一下大数据: hadoop - HDFS，hive 和 MapReduce ，问哪个是存储的，脑抽说了个hive，，， 后来改正了，然后问HDFS里面都有什么，答NameNode 和 DataNode，\n问我还有什么，我不知道，他告诉我还有sdk。\n\n然后让我说竞赛中做过的经典，印象深刻的题目，想了好久，随便说了一个题，题目不怎么难，其实说的很模糊，而且说的时候还把那个题给弱化了，，记不太清那个题目了，\n\n然后问了我一个问题，现在都没想明白，说HDFS传3个副本，然后又客户在另一端访问这个。 然后是传完这**三**个副本告诉客户传完了有一个延迟时间，这**两**个副本告诉客户传完了有一个延迟时间，，\n两个的会比三个的地低，\n然后给初问题，给一个T，求N，M。 T是客户允许的最长延迟时间，N是副本总数，M是传完M个告诉客户传完了。\n我只知道可以通过传好多次 算一个副本的时间t，但是不会算大T， 跟概率，期望，有关\n\n\n最后让写了一个编程题，很简单的n个区间 问覆盖的长度总和是多少。 谈了50多分种 脑子有点蒙，写了好几分钟。。 但他看了好长时间，难道是我写的错啦？？。。\n\n然后问了面试官几个问题，\n大数据如何高效学习，论文，跟进\n分布式如何学习，\n\n他们这个是做底层的，，，\n\n然后就是如果通过了 下次面试是什么时候，，，，但估计没有下次了，，，，，\n\n--------\n虽然啥都不会，什么都没有答上来。 体验非常好的一次面试，面试官人特别好，面对我这样的垃圾面试人员，应该很无奈，但依然很耐心的面试我，最后还提了好多问题。\n\n但是很奇怪，这次竟然一点操作系统和数据结构的问题都没有问， 之前看到牛客网一个基础平台研发，问了这些问题的呀。\n\n## 瓜子二手车 后台研发实习生 现场一二面, 给了offer邀请.\n\n- 1面\n    自我介绍,没准备,随便说了下\n    唠了两句家常.\n\n    绳子不均匀,燃烧的问题,一根绳子1个小时烧完.\n    怎么找30分钟,75分钟.\n\n    说下栈和队列\n    双栈怎么实现队列\n\n    计算机网络的几个零碎的小问题,没记住.\n\n    然后写了两个代码题\n    - 交叉的链表,找交叉的位置,\n    链表的代码思路对,但是head节点没有val这点被我忘记了\n    - 单链表找倒数第k个节点,\n    \n    数据库索引怎么实现的 -> b+树\n    b+树为什么会快 -> 搜索树,有剪枝\n    非\\*\\*和\\*\\*的区别 -> 不知道,没听说过 (告诉我是 index 和 index+data的区别,名字想不起来了)\n    数据库事务的四个特性ACID -> 我分不清那个是哪个了,就举个例子说了,\n    还有两个数据库的问题,想不起来了,\n\n    问问题,问了技术栈和分布式的东西.\n\n- 2面\n    领我进去的小哥哥说是总监面\n\n    自我介绍.唠家常.\n\n    两个集合求交,写代码 谢了归并排序+二分, 然后过了会说了个更简单的方法,\n\n    几个小问题,没记住\n\n    给我写了几个词,让我谈一谈\n    - set,stack,链表,数组,map,hash\n    - tcp,udp,http,https,ftp\n\n    聊了聊最近在学习什么.说我基础薄弱..\n\n    问问题. 问了职业规划.答:选择做技术就一直做技术.\n \n ---\n可能因为是小公司吧,问的问题都比较简单.算法为了体现水平,学习了网上的套路,先给出一个不是很好的做法,然后再给一个优秀的做法.[斜眼笑]\n走的时候小哥哥看了看评价表和我说不错,应该很稳,让我回去等消息就行啦. \n面试官都很随和,出去的时候和一个工大研一的同来面试的小哥哥聊天才知道那个总监挺牛逼的.\n\n## 今日头条 后端研发实习生  - 12面 [GG]\n\n### 一面\n一面直接给了一个问题,\nS_0 = {1}\nS_0 = {1,2,1}\n...\nS_n = S_{n-1},n+1,S_{n-1}\n\n问: 1. |S_n|  开始嘴飘,想当然的就说了,,后来说对了 2^{n+1}-1\n            然后让我证明,,, 不会证,,,\n\n    2. 让实现一个函数int get_value(int n,int i) ,S_n的第i个元素,从0开始,,,,\n        然后我写了一个从1开始的,就被嘲讽了,,,然后一个变量打错,被指漏洞百出...\n        准备说的最优解还没有开始,就不理我了, (第i个数就是0~2^{n+1}-1的第i个数二进制小的最后一个一的长度,或者理解为lowbit(i)的二进制长度)\n\n然后有趣,hr给我打电话,委婉的告诉我挂了,,然后突然来了二面,,,,,\n\n### 二面\n好吧,二面,啥都不会呀 ...\n\n开始看了我一面写的代码,说风格太老了,,,现在C11已经不这么写了,,\n\n然后问我平时用的数据结构是stl的还是C11的,,讲道理我只知道STL的,不知道c11有什么数据结构,难道是传说中的那个能重写pushup,pushdown的内个??\n\n谈了谈我用到的那些数据结构,说我只用过基础的数据结构,,\n然后让说了一下vector的实现,我就说了一下仅了解的它为什么能像数组那个用,,\n\n然后问一堆c11的问题,动态指针什么的,不会\n\n其中夹杂着问\n\n问会计组么,,tm不会呀,说你问吧,我试试\n问了int是反码还是补码,隐隐约约记得是补码,磨磨唧唧说了,\n\n问socket编程, 不会, 没接触过.\n问多线程编程, 我说接触过一点点, 只写过多线程循环打印的.\n\n```\nclass Test{\n    private int a;\n    private int b;\n    int test(){};\n}\nstruct Test2{\n    int a;\n    char b;\n    char c;\n}\n\nsizeof(Test)是多少. 我说12 ,(不知道对错,开始答8然后他沉默就改了, **其实就是8** )  \nsizeof(Test2)是多少. 我说8 , 因为要内存对齐\n```\n\n让我写一个函数验证机器的大小端 表示不知道大小端是什么,\n```\nint main(){\n    int a = 1;\n    char s = *(char *)&a;\n    if(s == 1) puts(\"small\");\n    else       puts(\"big\");\n}\n```\nclass 和 struct的区别, 只知道class默认是private,struct默认是public, 问我还有什么 不知道\n\n问我sizeof(一个指针)是多少,不知道,叨咕了一个8,然后他告诉我32位机器是4,64位机器是8;\n\n给了一个代码\n```\nvoid test(int *p){\n    p = (int *)malloc(sizeof(int))\n}\n```\n问p改没改变\n\n蒙的改变, p指向了新开辟的那个地址.\n\n编程题,大数加法,不让用char a[],只让用string... 写的稍墨迹\n\n然后问string += 和 +的区别\n\n就是 a+=b 和a=a+b\n表示没看过string源码,也不了解string咋实现的,类比vector说了一下. 又错了\n\n问数据库, 我说了解的不是很深入, 然后就没问. (其实以后应该说,试一试,,)\n\n然后就问问题,唠家常了,,,,\n\n最后再见,\n\n结果在一个小时之内,听到了两次同一个hr小姐姐的拒绝电话,,,,\n\n-------------------------------\n体验是真几把刺激,面挂了一面还面了第二面,hhhh,于是二面的时候就很懵逼,,,\n\n但是确实啥都不会呀....\n\n总结就是多学习吧. \n\n但是有个大失误,问计网,操作系统,数据库的时候,应该说试一下的,,毕竟还是看了一些的呀,多少还是能答上来一点的,,\n\n## 美团 后台开发 (搞笑)\n\n开始自我介绍,聊了聊最近看什么数,还有数据库啥的\n\n十分钟过后,跟我说只要Java, 不合适, 嗯 ,然后88\n\n----------------------\n傻逼美团,怎么筛选的简历,岗位要求上不是写的4中语言之一吗,,,,,而且不准备培养实习生的吗,,还听说之前实习生一个转正的都没有??!\n\n## 吉比特 游戏开发(实习) \n\n### 一面\n\n自我介绍\n多线程\n内联函数和宏函数\npython闭包\nsocket编程\n函数内的malloc 存在哪里\n内联函数\n右值引用\n进程间通信\n连续子序列最大和\nvector\nset 和 map的底层数据结构 \nhash冲突解决\n内存泄漏解决\nC++调用函数\n虚析构函数\n一个文本相同的行去除, 保留第一个 (内存存的下/存不下)\n还有问题 记不起来了\n\n--------------------------------------\n表现很差呀, 算法也没有问，代码都没让写，，，\n\n\n## 腾讯 后台开发(实习)\n\n### 一面\n自我介绍,\n\n闲聊\n介绍了ACM比赛\n最近在干什么\n\n技术上的问了\n网络编程接触过没 ->没接触过\n数据一致性怎么保证 -> 不会\n两个文件都是100W个整数,找出相同的 -> 排序,然后归并的过程\n进程间通信 并举例说出场景 -> 管道不知道,剩下三个举例了,\n说说STL -> 说了下vector怎么保证可变长度而且复杂度还是O(1),map和set都是红黑树啥啥啥的\nnew/delete 和malloc/free的区别 -> 说没怎么用过后者,一直用前者,因为后者长.面试官笑..然后说了几个new/delete使用的时候需要注意的问题.\n谈到指针,问多线程删除map元素怎么办 -> 先回答把多个线程要删除的记下来,然后统一删除, 他说可以, 但是希望我在指针的方式考虑, 想了想不会, 他让我回去看下map的源码关于元素删除的部分, 看过之后会有想法.\n多线程有什么了解 -> 说了下ABC循环打印的那个, 然后就没有了\n高并发怎么处理, -> 读的不加锁,写的加锁\n接上个问我脏读怎么办 -> 我说加个时间戳,他说不太好,然后不会了\n对安全了解多少 -> 把只会的凯撒加密和RSA加密说了说\n对称加密和非对称加密 -> 忘记了,说不太清了,告诉他不强答\nC++的封装/继承/多态-> 说了说多态和继承,封装我觉得没啥说的呀,,\n\n还有几个问题,忘了\n\n非技术问题\n说给我安排一个任务,一周上线,这个任务我现在不会,怎么办 -> 我觉得时间够用,没有问题,2天时间学习,3天时间实现, 具体实施的时候先请教别人,翻论文 \n如果我现在时间很紧的赶一个任务,有人请教我会的东西,我怎么做 -> 甩给他相关的资料让他自己学习, 如果还不懂,粗浅的指点一下  还不懂,就对不起了,(这个很坑呀,步步紧逼)\n\n问问题\n就问了怎么学习linux,\n之前准备问的问题,都忘记问了\n\n----------------------------------\n面试官挺随和的, 开始挺紧张的 ,后来就不紧张了, 现场面试还是比电面/视频面舒服.\n过程就像实在闲聊\n还是什么都不会, 面试官让我把学习重心放在网络编程和安全这方面,说用到的多,学习的时候多看看源码.\n\n### 二面\n\n问的和一面差不多,\n多问了几个小问题而已\n\n数据库的东西问了很多, 但不会\n然后和一面有重复的问题,但是昨天回去查了下,答得比较完整\nHash处理冲突,解决办法\n内存泄露的时候如何定位 -> 说调用系统的函数监控内存\n内存分布 -> 有一个忘记了,其他的说的没问题\n进程调度算法 -> 先到先服务 , 短作业优先, 多级反馈队列\n接上个问现在系统的调度算法 -> 在提示说同时能音乐,处理网页这些 想起来时间片轮转算法,说了些, \nstd::sort()怎么实现的 -> 内省排序,\n接上个std::sort()什么时候采用插入排序,归并排序,快排 -> 举了什么时候插排会更快, 和归并是为了防止快排退化 balabala\n\n剩下的暂时想不起来了,\n\n\n----------------------------------\n面试官看起来挺年轻的, 数据库东西确实不太会, 而且又没让写代码, 以为凉凉了,,,\n5点多接到明天hr面的消息,\n\n\n## 旷视 Face++   后台实习生 \n\n### 一面\n\n就两个问题\n一个拓扑排序,拓扑序计数,\n一个二分check的问题\n\n开始网站打不开,只写了第二个的代码\n\n然后就问我最近学什么, 以后的方向什么的 聊了好久\n\n问了几个问题就结束了\n\n--------------------------------------\n感觉不错,面试官说重视的就是coding能力,其他的都可以在学,\n等消息\n~~智障,问面试官需要什么样的人才,说我这样的,一周后问面试官,说挂了~~\n\n## 京东云 C++(实习)\n\n### 一面\n刚面完腾讯的hr面回来到实验室扯了两句,就收到面试了\n\n给了个写代码的网页死活打不开,然后就改手写发照片了\n写了一个矩阵,一层一层输出的代码\n\n然后说了C++的stl\nvector的变长机制\n平衡树\n\ntcp的三次握手,四次挥手,为什么三次,为什么四次\n网络分层,说了下osi的七层\n问tcp在那层,不知道,猜了个网络层,,,然后面试官问tcp的t是什么,想起是transfer,说出了传输层\n\n然后还有几个问题,忘了\n\n日常问面试官问题结束\n---------------------------------\n面试官挺nice的\n\n### 二面\n感觉效率很高 上午面完下午5点就来二面了,\n\n面向对象编程谈谈\nC++ stl\n内存分布\n网络的那几个老生常谈的问题\n进程间通信\n数据库谈了谈\n\n一个linux 操作的问题,不会\n\n还有几个问题 忘了\n\n### hr面\n因为一二面是周五 周一去考科四的时候来的电话\n\n瞎聊天 结束\n","slug":"ExperienceOfInterview","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2r00izsafk16n6v1gm","content":"<blockquote>\n<p>总结下所有的面试, 这样才能<strong>慢慢</strong>进步呀,,,,</p>\n</blockquote>\n<h2 id=\"哈尔滨某小公司-C-岗实习-现场面-offer\"><a href=\"#哈尔滨某小公司-C-岗实习-现场面-offer\" class=\"headerlink\" title=\"哈尔滨某小公司 - C++岗实习 [现场面] - offer\"></a>哈尔滨某小公司 - C++岗实习 [现场面] - offer</h2><p>除了问一个多态,没有技术问题,大概是给答上了 意思对,但不专业</p>\n<hr>\n<p>小公司估计是真的没人了,,,,待遇实在…拒绝</p>\n<h2 id=\"头条-后台开发实习生-视频面试-一面-跪\"><a href=\"#头条-后台开发实习生-视频面试-一面-跪\" class=\"headerlink\" title=\"头条 - 后台开发实习生 [视频面试] 一面 - 跪\"></a>头条 - 后台开发实习生 [视频面试] 一面 - 跪</h2><p>可能是紧张吧,开始闲聊然后给了个编程题<br>给一个化学表达式</p>\n<pre><code class=\"math\">eg: HMg_{_2}(H_2O(N_3Ag)_2)_3N_2\n</code></pre>\n<p>,让算每个元素有多少个.</p>\n<p>这种题本就不难 问题就是怎么处理括号<br>之前在hiho上还遇到过类似的问题<a href=\"http://www.hihocoder.com/contest/offers41/problem/2\" target=\"_blank\" rel=\"noopener\">http://www.hihocoder.com/contest/offers41/problem/2</a></p>\n<p>然后不知道紧张还是什么的就写的很乱,然后面试官提示递归,然后墨迹了好久才用stack写了下来…..</p>\n<p>因为我没有项目,就没有问项目.<br>然后问我们学了数据库,操作系统,网络没有,,,,   嗯 学校确实讲过,但我没听过课…</p>\n<p>问了个进程调度,</p>\n<p>我就知道有个算法叫FIFO, 具体是啥还忘了, 然后说错了,,GG</p>\n<p>然后唠了两句面试官说结束,等HR通知,,,  嗯.感谢面试官浪费40+分钟陪我 hhhh.</p>\n<hr>\n<p>总结:<br>有点紧张. 代码能力差 ,<strong>[数据库,操作系统,网络]</strong> 知识严重匮乏.</p>\n<p>之前看面经说,遇到不会的或者把不准的都应该说<strong>不会</strong>. 下次注意.</p>\n<h2 id=\"达内-NOIP助教-现场面\"><a href=\"#达内-NOIP助教-现场面\" class=\"headerlink\" title=\"达内 - NOIP助教 现场面\"></a>达内 - NOIP助教 现场面</h2><p>达内这个大家都懂.</p>\n<p>突然有天接到达内一个经理的电话,问我能不能去当助教,去教小朋友普及组的NOIP.<br>我心想,这也还不错呀.<br>然后去了,开始跟我吹了1个小时的牛逼,达内多么多么牛逼.怎么怎么地.<br>然后给了我一份NOIP普及组的题让我做..</p>\n<p>说来惭愧,中文题面,我竟读错一道题卡了好久,,,然后花了1个多小时终于把4个题做出来了,最后一题还做得很麻烦…<br>然后来了一个小伙子,谈了谈对NOIP的认识,以及我的学习情况.<br>交上去给了一个小姐姐,然后看见三个人对着电脑看了半天..</p>\n<p>然后说一定要一年,但我最多只能半年,于是据.</p>\n<hr>\n<p>体验美滋滋,没有麻烦的题目,没有操作系统,没有计算机网络,没有数据库.真棒 hhh</p>\n<h2 id=\"深信服-C-C-电话面试-一面-估计跪了\"><a href=\"#深信服-C-C-电话面试-一面-估计跪了\" class=\"headerlink\" title=\"深信服 - C/C++ 电话面试 一面-估计跪了\"></a>深信服 - C/C++ 电话面试 一面-估计跪了</h2><p>深圳打来的电话, 不知道哪里人, 浓重的方言口音, 他说话我都要问好多遍才能听懂…交流真滴有障碍…</p>\n<p>一共22分钟,三个问题</p>\n<p>1 . 两个字符串,一个大串,一个小串,问小串是不是大串的子串(不连续)的.</p>\n<p>我回答了: 遍历大串,然后对小串维护一个遍历的指针就行了</p>\n<p>然后他说不是他想要的,问的是正则?</p>\n<p>我记得有正则查询可以模糊匹配,只要在两个相邻的字母中插进去就好了,,但我忘记了具体插什么,</p>\n<p>结束后一查知道是 <code>.*</code> [. 匹配任意非\\n的字符 *是0个或多个]</p>\n<p>2 . 给一个100万的字符串,然后找到最短的循环覆盖的子串.</p>\n<p>我开始以为是ABCABC这样的 最短就是ABC了 ,拿next数组直接做就行了,</p>\n<p>然后说了半天,最后知道,他说的可以是这样ABCABCAB,还可以是ABC</p>\n<p>想了想发现和之前的一样, 还是求next数组,然后就可以把结尾的AB给去掉了,然后就和之前一样了.</p>\n<p>然后不知怎么就陷入了一阵交流障碍,我不知道他说的啥,他不知道我说的啥.</p>\n<p>然后我发现他是想让我说一下next怎么求…</p>\n<p>想了想,不能画图 怎么说呀, 问写代码行吗, 额 他也看不见….</p>\n<p>然后勉强解释了下 维护两个指针,一个i遍历大串,j是维护匹配到的位置,balabala的,</p>\n<p>也不知道他明白没有…</p>\n<hr>\n<p>然后他问我用linux还是windows多,</p>\n<p>我说用过linux,但还是windows多.</p>\n<p>然后问我一个问题,我听成了python.. 我说我会python…..但他好像问的根本不是这个问题,,,</p>\n<hr>\n<p>3 . 最后问我进程的内存分布</p>\n<p>我不会呀..</p>\n<p>说了一个堆栈..就说不知道了, </p>\n<p>于是结束…</p>\n<p>目测GG</p>\n<hr>\n<p>总结: 说好的12点,结果15点电话过来了,,,措手不及,以为没我事儿了呢,</p>\n<p>交流障碍导致前面两个问题说的不太好,而且电话面试真的不如视频面试呀,更别说现场面试了,,,后面确实不会, 操作系统,网络,数据库 多看看呀..</p>\n<h2 id=\"阿里云-分布式-大数据-基础平台研发工程师实习-电话面试-一面-跪了\"><a href=\"#阿里云-分布式-大数据-基础平台研发工程师实习-电话面试-一面-跪了\" class=\"headerlink\" title=\"阿里云, 分布式,大数据   - 基础平台研发工程师实习 电话面试 一面-跪了\"></a>阿里云, 分布式,大数据   - 基础平台研发工程师实习 电话面试 一面-跪了</h2><p>redis和MongoDB的区别。 谈一谈这两个数据库 。   (他以为我是自己搭建的数据库，，但我就是安装然后用的呀)<br>说一下大数据: hadoop - HDFS，hive 和 MapReduce ，问哪个是存储的，脑抽说了个hive，，， 后来改正了，然后问HDFS里面都有什么，答NameNode 和 DataNode，<br>问我还有什么，我不知道，他告诉我还有sdk。</p>\n<p>然后让我说竞赛中做过的经典，印象深刻的题目，想了好久，随便说了一个题，题目不怎么难，其实说的很模糊，而且说的时候还把那个题给弱化了，，记不太清那个题目了，</p>\n<p>然后问了我一个问题，现在都没想明白，说HDFS传3个副本，然后又客户在另一端访问这个。 然后是传完这<strong>三</strong>个副本告诉客户传完了有一个延迟时间，这<strong>两</strong>个副本告诉客户传完了有一个延迟时间，，<br>两个的会比三个的地低，<br>然后给初问题，给一个T，求N，M。 T是客户允许的最长延迟时间，N是副本总数，M是传完M个告诉客户传完了。<br>我只知道可以通过传好多次 算一个副本的时间t，但是不会算大T， 跟概率，期望，有关</p>\n<p>最后让写了一个编程题，很简单的n个区间 问覆盖的长度总和是多少。 谈了50多分种 脑子有点蒙，写了好几分钟。。 但他看了好长时间，难道是我写的错啦？？。。</p>\n<p>然后问了面试官几个问题，<br>大数据如何高效学习，论文，跟进<br>分布式如何学习，</p>\n<p>他们这个是做底层的，，，</p>\n<p>然后就是如果通过了 下次面试是什么时候，，，，但估计没有下次了，，，，，</p>\n<hr>\n<p>虽然啥都不会，什么都没有答上来。 体验非常好的一次面试，面试官人特别好，面对我这样的垃圾面试人员，应该很无奈，但依然很耐心的面试我，最后还提了好多问题。</p>\n<p>但是很奇怪，这次竟然一点操作系统和数据结构的问题都没有问， 之前看到牛客网一个基础平台研发，问了这些问题的呀。</p>\n<h2 id=\"瓜子二手车-后台研发实习生-现场一二面-给了offer邀请\"><a href=\"#瓜子二手车-后台研发实习生-现场一二面-给了offer邀请\" class=\"headerlink\" title=\"瓜子二手车 后台研发实习生 现场一二面, 给了offer邀请.\"></a>瓜子二手车 后台研发实习生 现场一二面, 给了offer邀请.</h2><ul>\n<li><p>1面<br>  自我介绍,没准备,随便说了下<br>  唠了两句家常.</p>\n<p>  绳子不均匀,燃烧的问题,一根绳子1个小时烧完.<br>  怎么找30分钟,75分钟.</p>\n<p>  说下栈和队列<br>  双栈怎么实现队列</p>\n<p>  计算机网络的几个零碎的小问题,没记住.</p>\n<p>  然后写了两个代码题</p>\n<ul>\n<li>交叉的链表,找交叉的位置,<br>链表的代码思路对,但是head节点没有val这点被我忘记了</li>\n<li><p>单链表找倒数第k个节点,</p>\n<p>数据库索引怎么实现的 -&gt; b+树<br>b+树为什么会快 -&gt; 搜索树,有剪枝<br>非**和**的区别 -&gt; 不知道,没听说过 (告诉我是 index 和 index+data的区别,名字想不起来了)<br>数据库事务的四个特性ACID -&gt; 我分不清那个是哪个了,就举个例子说了,<br>还有两个数据库的问题,想不起来了,</p>\n<p>问问题,问了技术栈和分布式的东西.</p>\n</li>\n</ul>\n</li>\n<li><p>2面<br>  领我进去的小哥哥说是总监面</p>\n<p>  自我介绍.唠家常.</p>\n<p>  两个集合求交,写代码 谢了归并排序+二分, 然后过了会说了个更简单的方法,</p>\n<p>  几个小问题,没记住</p>\n<p>  给我写了几个词,让我谈一谈</p>\n<ul>\n<li>set,stack,链表,数组,map,hash</li>\n<li><p>tcp,udp,http,https,ftp</p>\n<p>聊了聊最近在学习什么.说我基础薄弱..</p>\n<p>问问题. 问了职业规划.答:选择做技术就一直做技术.</p>\n</li>\n</ul>\n<hr>\n<p>可能因为是小公司吧,问的问题都比较简单.算法为了体现水平,学习了网上的套路,先给出一个不是很好的做法,然后再给一个优秀的做法.[斜眼笑]<br>走的时候小哥哥看了看评价表和我说不错,应该很稳,让我回去等消息就行啦.<br>面试官都很随和,出去的时候和一个工大研一的同来面试的小哥哥聊天才知道那个总监挺牛逼的.</p>\n</li>\n</ul>\n<h2 id=\"今日头条-后端研发实习生-12面-GG\"><a href=\"#今日头条-后端研发实习生-12面-GG\" class=\"headerlink\" title=\"今日头条 后端研发实习生  - 12面 [GG]\"></a>今日头条 后端研发实习生  - 12面 [GG]</h2><h3 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>一面直接给了一个问题,<br>S_0 = {1}<br>S_0 = {1,2,1}<br>…<br>S_n = S_{n-1},n+1,S_{n-1}</p>\n<p>问: 1. |S_n|  开始嘴飘,想当然的就说了,,后来说对了 2^{n+1}-1<br>            然后让我证明,,, 不会证,,,</p>\n<pre><code>2. 让实现一个函数int get_value(int n,int i) ,S_n的第i个元素,从0开始,,,,\n    然后我写了一个从1开始的,就被嘲讽了,,,然后一个变量打错,被指漏洞百出...\n    准备说的最优解还没有开始,就不理我了, (第i个数就是0~2^{n+1}-1的第i个数二进制小的最后一个一的长度,或者理解为lowbit(i)的二进制长度)\n</code></pre><p>然后有趣,hr给我打电话,委婉的告诉我挂了,,然后突然来了二面,,,,,</p>\n<h3 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h3><p>好吧,二面,啥都不会呀 …</p>\n<p>开始看了我一面写的代码,说风格太老了,,,现在C11已经不这么写了,,</p>\n<p>然后问我平时用的数据结构是stl的还是C11的,,讲道理我只知道STL的,不知道c11有什么数据结构,难道是传说中的那个能重写pushup,pushdown的内个??</p>\n<p>谈了谈我用到的那些数据结构,说我只用过基础的数据结构,,<br>然后让说了一下vector的实现,我就说了一下仅了解的它为什么能像数组那个用,,</p>\n<p>然后问一堆c11的问题,动态指针什么的,不会</p>\n<p>其中夹杂着问</p>\n<p>问会计组么,,tm不会呀,说你问吧,我试试<br>问了int是反码还是补码,隐隐约约记得是补码,磨磨唧唧说了,</p>\n<p>问socket编程, 不会, 没接触过.<br>问多线程编程, 我说接触过一点点, 只写过多线程循环打印的.</p>\n<pre><code>class Test{\n    private int a;\n    private int b;\n    int test(){};\n}\nstruct Test2{\n    int a;\n    char b;\n    char c;\n}\n\nsizeof(Test)是多少. 我说12 ,(不知道对错,开始答8然后他沉默就改了, **其实就是8** )  \nsizeof(Test2)是多少. 我说8 , 因为要内存对齐\n</code></pre><p>让我写一个函数验证机器的大小端 表示不知道大小端是什么,</p>\n<pre><code>int main(){\n    int a = 1;\n    char s = *(char *)&amp;a;\n    if(s == 1) puts(&quot;small&quot;);\n    else       puts(&quot;big&quot;);\n}\n</code></pre><p>class 和 struct的区别, 只知道class默认是private,struct默认是public, 问我还有什么 不知道</p>\n<p>问我sizeof(一个指针)是多少,不知道,叨咕了一个8,然后他告诉我32位机器是4,64位机器是8;</p>\n<p>给了一个代码</p>\n<pre><code>void test(int *p){\n    p = (int *)malloc(sizeof(int))\n}\n</code></pre><p>问p改没改变</p>\n<p>蒙的改变, p指向了新开辟的那个地址.</p>\n<p>编程题,大数加法,不让用char a[],只让用string… 写的稍墨迹</p>\n<p>然后问string += 和 +的区别</p>\n<p>就是 a+=b 和a=a+b<br>表示没看过string源码,也不了解string咋实现的,类比vector说了一下. 又错了</p>\n<p>问数据库, 我说了解的不是很深入, 然后就没问. (其实以后应该说,试一试,,)</p>\n<p>然后就问问题,唠家常了,,,,</p>\n<p>最后再见,</p>\n<p>结果在一个小时之内,听到了两次同一个hr小姐姐的拒绝电话,,,,</p>\n<hr>\n<p>体验是真几把刺激,面挂了一面还面了第二面,hhhh,于是二面的时候就很懵逼,,,</p>\n<p>但是确实啥都不会呀….</p>\n<p>总结就是多学习吧. </p>\n<p>但是有个大失误,问计网,操作系统,数据库的时候,应该说试一下的,,毕竟还是看了一些的呀,多少还是能答上来一点的,,</p>\n<h2 id=\"美团-后台开发-搞笑\"><a href=\"#美团-后台开发-搞笑\" class=\"headerlink\" title=\"美团 后台开发 (搞笑)\"></a>美团 后台开发 (搞笑)</h2><p>开始自我介绍,聊了聊最近看什么数,还有数据库啥的</p>\n<p>十分钟过后,跟我说只要Java, 不合适, 嗯 ,然后88</p>\n<hr>\n<p>傻逼美团,怎么筛选的简历,岗位要求上不是写的4中语言之一吗,,,,,而且不准备培养实习生的吗,,还听说之前实习生一个转正的都没有??!</p>\n<h2 id=\"吉比特-游戏开发-实习\"><a href=\"#吉比特-游戏开发-实习\" class=\"headerlink\" title=\"吉比特 游戏开发(实习)\"></a>吉比特 游戏开发(实习)</h2><h3 id=\"一面-1\"><a href=\"#一面-1\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>自我介绍<br>多线程<br>内联函数和宏函数<br>python闭包<br>socket编程<br>函数内的malloc 存在哪里<br>内联函数<br>右值引用<br>进程间通信<br>连续子序列最大和<br>vector<br>set 和 map的底层数据结构<br>hash冲突解决<br>内存泄漏解决<br>C++调用函数<br>虚析构函数<br>一个文本相同的行去除, 保留第一个 (内存存的下/存不下)<br>还有问题 记不起来了</p>\n<hr>\n<p>表现很差呀, 算法也没有问，代码都没让写，，，</p>\n<h2 id=\"腾讯-后台开发-实习\"><a href=\"#腾讯-后台开发-实习\" class=\"headerlink\" title=\"腾讯 后台开发(实习)\"></a>腾讯 后台开发(实习)</h2><h3 id=\"一面-2\"><a href=\"#一面-2\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>自我介绍,</p>\n<p>闲聊<br>介绍了ACM比赛<br>最近在干什么</p>\n<p>技术上的问了<br>网络编程接触过没 -&gt;没接触过<br>数据一致性怎么保证 -&gt; 不会<br>两个文件都是100W个整数,找出相同的 -&gt; 排序,然后归并的过程<br>进程间通信 并举例说出场景 -&gt; 管道不知道,剩下三个举例了,<br>说说STL -&gt; 说了下vector怎么保证可变长度而且复杂度还是O(1),map和set都是红黑树啥啥啥的<br>new/delete 和malloc/free的区别 -&gt; 说没怎么用过后者,一直用前者,因为后者长.面试官笑..然后说了几个new/delete使用的时候需要注意的问题.<br>谈到指针,问多线程删除map元素怎么办 -&gt; 先回答把多个线程要删除的记下来,然后统一删除, 他说可以, 但是希望我在指针的方式考虑, 想了想不会, 他让我回去看下map的源码关于元素删除的部分, 看过之后会有想法.<br>多线程有什么了解 -&gt; 说了下ABC循环打印的那个, 然后就没有了<br>高并发怎么处理, -&gt; 读的不加锁,写的加锁<br>接上个问我脏读怎么办 -&gt; 我说加个时间戳,他说不太好,然后不会了<br>对安全了解多少 -&gt; 把只会的凯撒加密和RSA加密说了说<br>对称加密和非对称加密 -&gt; 忘记了,说不太清了,告诉他不强答<br>C++的封装/继承/多态-&gt; 说了说多态和继承,封装我觉得没啥说的呀,,</p>\n<p>还有几个问题,忘了</p>\n<p>非技术问题<br>说给我安排一个任务,一周上线,这个任务我现在不会,怎么办 -&gt; 我觉得时间够用,没有问题,2天时间学习,3天时间实现, 具体实施的时候先请教别人,翻论文<br>如果我现在时间很紧的赶一个任务,有人请教我会的东西,我怎么做 -&gt; 甩给他相关的资料让他自己学习, 如果还不懂,粗浅的指点一下  还不懂,就对不起了,(这个很坑呀,步步紧逼)</p>\n<p>问问题<br>就问了怎么学习linux,<br>之前准备问的问题,都忘记问了</p>\n<hr>\n<p>面试官挺随和的, 开始挺紧张的 ,后来就不紧张了, 现场面试还是比电面/视频面舒服.<br>过程就像实在闲聊<br>还是什么都不会, 面试官让我把学习重心放在网络编程和安全这方面,说用到的多,学习的时候多看看源码.</p>\n<h3 id=\"二面-1\"><a href=\"#二面-1\" class=\"headerlink\" title=\"二面\"></a>二面</h3><p>问的和一面差不多,<br>多问了几个小问题而已</p>\n<p>数据库的东西问了很多, 但不会<br>然后和一面有重复的问题,但是昨天回去查了下,答得比较完整<br>Hash处理冲突,解决办法<br>内存泄露的时候如何定位 -&gt; 说调用系统的函数监控内存<br>内存分布 -&gt; 有一个忘记了,其他的说的没问题<br>进程调度算法 -&gt; 先到先服务 , 短作业优先, 多级反馈队列<br>接上个问现在系统的调度算法 -&gt; 在提示说同时能音乐,处理网页这些 想起来时间片轮转算法,说了些,<br>std::sort()怎么实现的 -&gt; 内省排序,<br>接上个std::sort()什么时候采用插入排序,归并排序,快排 -&gt; 举了什么时候插排会更快, 和归并是为了防止快排退化 balabala</p>\n<p>剩下的暂时想不起来了,</p>\n<hr>\n<p>面试官看起来挺年轻的, 数据库东西确实不太会, 而且又没让写代码, 以为凉凉了,,,<br>5点多接到明天hr面的消息,</p>\n<h2 id=\"旷视-Face-后台实习生\"><a href=\"#旷视-Face-后台实习生\" class=\"headerlink\" title=\"旷视 Face++   后台实习生\"></a>旷视 Face++   后台实习生</h2><h3 id=\"一面-3\"><a href=\"#一面-3\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>就两个问题<br>一个拓扑排序,拓扑序计数,<br>一个二分check的问题</p>\n<p>开始网站打不开,只写了第二个的代码</p>\n<p>然后就问我最近学什么, 以后的方向什么的 聊了好久</p>\n<p>问了几个问题就结束了</p>\n<hr>\n<p>感觉不错,面试官说重视的就是coding能力,其他的都可以在学,<br>等消息<br><del>智障,问面试官需要什么样的人才,说我这样的,一周后问面试官,说挂了</del></p>\n<h2 id=\"京东云-C-实习\"><a href=\"#京东云-C-实习\" class=\"headerlink\" title=\"京东云 C++(实习)\"></a>京东云 C++(实习)</h2><h3 id=\"一面-4\"><a href=\"#一面-4\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>刚面完腾讯的hr面回来到实验室扯了两句,就收到面试了</p>\n<p>给了个写代码的网页死活打不开,然后就改手写发照片了<br>写了一个矩阵,一层一层输出的代码</p>\n<p>然后说了C++的stl<br>vector的变长机制<br>平衡树</p>\n<p>tcp的三次握手,四次挥手,为什么三次,为什么四次<br>网络分层,说了下osi的七层<br>问tcp在那层,不知道,猜了个网络层,,,然后面试官问tcp的t是什么,想起是transfer,说出了传输层</p>\n<p>然后还有几个问题,忘了</p>\n<h2 id=\"日常问面试官问题结束\"><a href=\"#日常问面试官问题结束\" class=\"headerlink\" title=\"日常问面试官问题结束\"></a>日常问面试官问题结束</h2><p>面试官挺nice的</p>\n<h3 id=\"二面-2\"><a href=\"#二面-2\" class=\"headerlink\" title=\"二面\"></a>二面</h3><p>感觉效率很高 上午面完下午5点就来二面了,</p>\n<p>面向对象编程谈谈<br>C++ stl<br>内存分布<br>网络的那几个老生常谈的问题<br>进程间通信<br>数据库谈了谈</p>\n<p>一个linux 操作的问题,不会</p>\n<p>还有几个问题 忘了</p>\n<h3 id=\"hr面\"><a href=\"#hr面\" class=\"headerlink\" title=\"hr面\"></a>hr面</h3><p>因为一二面是周五 周一去考科四的时候来的电话</p>\n<p>瞎聊天 结束</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>总结下所有的面试, 这样才能<strong>慢慢</strong>进步呀,,,,</p>\n</blockquote>\n<h2 id=\"哈尔滨某小公司-C-岗实习-现场面-offer\"><a href=\"#哈尔滨某小公司-C-岗实习-现场面-offer\" class=\"headerlink\" title=\"哈尔滨某小公司 - C++岗实习 [现场面] - offer\"></a>哈尔滨某小公司 - C++岗实习 [现场面] - offer</h2><p>除了问一个多态,没有技术问题,大概是给答上了 意思对,但不专业</p>\n<hr>\n<p>小公司估计是真的没人了,,,,待遇实在…拒绝</p>\n<h2 id=\"头条-后台开发实习生-视频面试-一面-跪\"><a href=\"#头条-后台开发实习生-视频面试-一面-跪\" class=\"headerlink\" title=\"头条 - 后台开发实习生 [视频面试] 一面 - 跪\"></a>头条 - 后台开发实习生 [视频面试] 一面 - 跪</h2><p>可能是紧张吧,开始闲聊然后给了个编程题<br>给一个化学表达式</p>\n<pre><code class=\"math\">eg: HMg_{_2}(H_2O(N_3Ag)_2)_3N_2\n</code></pre>\n<p>,让算每个元素有多少个.</p>\n<p>这种题本就不难 问题就是怎么处理括号<br>之前在hiho上还遇到过类似的问题<a href=\"http://www.hihocoder.com/contest/offers41/problem/2\" target=\"_blank\" rel=\"noopener\">http://www.hihocoder.com/contest/offers41/problem/2</a></p>\n<p>然后不知道紧张还是什么的就写的很乱,然后面试官提示递归,然后墨迹了好久才用stack写了下来…..</p>\n<p>因为我没有项目,就没有问项目.<br>然后问我们学了数据库,操作系统,网络没有,,,,   嗯 学校确实讲过,但我没听过课…</p>\n<p>问了个进程调度,</p>\n<p>我就知道有个算法叫FIFO, 具体是啥还忘了, 然后说错了,,GG</p>\n<p>然后唠了两句面试官说结束,等HR通知,,,  嗯.感谢面试官浪费40+分钟陪我 hhhh.</p>\n<hr>\n<p>总结:<br>有点紧张. 代码能力差 ,<strong>[数据库,操作系统,网络]</strong> 知识严重匮乏.</p>\n<p>之前看面经说,遇到不会的或者把不准的都应该说<strong>不会</strong>. 下次注意.</p>\n<h2 id=\"达内-NOIP助教-现场面\"><a href=\"#达内-NOIP助教-现场面\" class=\"headerlink\" title=\"达内 - NOIP助教 现场面\"></a>达内 - NOIP助教 现场面</h2><p>达内这个大家都懂.</p>\n<p>突然有天接到达内一个经理的电话,问我能不能去当助教,去教小朋友普及组的NOIP.<br>我心想,这也还不错呀.<br>然后去了,开始跟我吹了1个小时的牛逼,达内多么多么牛逼.怎么怎么地.<br>然后给了我一份NOIP普及组的题让我做..</p>\n<p>说来惭愧,中文题面,我竟读错一道题卡了好久,,,然后花了1个多小时终于把4个题做出来了,最后一题还做得很麻烦…<br>然后来了一个小伙子,谈了谈对NOIP的认识,以及我的学习情况.<br>交上去给了一个小姐姐,然后看见三个人对着电脑看了半天..</p>\n<p>然后说一定要一年,但我最多只能半年,于是据.</p>\n<hr>\n<p>体验美滋滋,没有麻烦的题目,没有操作系统,没有计算机网络,没有数据库.真棒 hhh</p>\n<h2 id=\"深信服-C-C-电话面试-一面-估计跪了\"><a href=\"#深信服-C-C-电话面试-一面-估计跪了\" class=\"headerlink\" title=\"深信服 - C/C++ 电话面试 一面-估计跪了\"></a>深信服 - C/C++ 电话面试 一面-估计跪了</h2><p>深圳打来的电话, 不知道哪里人, 浓重的方言口音, 他说话我都要问好多遍才能听懂…交流真滴有障碍…</p>\n<p>一共22分钟,三个问题</p>\n<p>1 . 两个字符串,一个大串,一个小串,问小串是不是大串的子串(不连续)的.</p>\n<p>我回答了: 遍历大串,然后对小串维护一个遍历的指针就行了</p>\n<p>然后他说不是他想要的,问的是正则?</p>\n<p>我记得有正则查询可以模糊匹配,只要在两个相邻的字母中插进去就好了,,但我忘记了具体插什么,</p>\n<p>结束后一查知道是 <code>.*</code> [. 匹配任意非\\n的字符 *是0个或多个]</p>\n<p>2 . 给一个100万的字符串,然后找到最短的循环覆盖的子串.</p>\n<p>我开始以为是ABCABC这样的 最短就是ABC了 ,拿next数组直接做就行了,</p>\n<p>然后说了半天,最后知道,他说的可以是这样ABCABCAB,还可以是ABC</p>\n<p>想了想发现和之前的一样, 还是求next数组,然后就可以把结尾的AB给去掉了,然后就和之前一样了.</p>\n<p>然后不知怎么就陷入了一阵交流障碍,我不知道他说的啥,他不知道我说的啥.</p>\n<p>然后我发现他是想让我说一下next怎么求…</p>\n<p>想了想,不能画图 怎么说呀, 问写代码行吗, 额 他也看不见….</p>\n<p>然后勉强解释了下 维护两个指针,一个i遍历大串,j是维护匹配到的位置,balabala的,</p>\n<p>也不知道他明白没有…</p>\n<hr>\n<p>然后他问我用linux还是windows多,</p>\n<p>我说用过linux,但还是windows多.</p>\n<p>然后问我一个问题,我听成了python.. 我说我会python…..但他好像问的根本不是这个问题,,,</p>\n<hr>\n<p>3 . 最后问我进程的内存分布</p>\n<p>我不会呀..</p>\n<p>说了一个堆栈..就说不知道了, </p>\n<p>于是结束…</p>\n<p>目测GG</p>\n<hr>\n<p>总结: 说好的12点,结果15点电话过来了,,,措手不及,以为没我事儿了呢,</p>\n<p>交流障碍导致前面两个问题说的不太好,而且电话面试真的不如视频面试呀,更别说现场面试了,,,后面确实不会, 操作系统,网络,数据库 多看看呀..</p>\n<h2 id=\"阿里云-分布式-大数据-基础平台研发工程师实习-电话面试-一面-跪了\"><a href=\"#阿里云-分布式-大数据-基础平台研发工程师实习-电话面试-一面-跪了\" class=\"headerlink\" title=\"阿里云, 分布式,大数据   - 基础平台研发工程师实习 电话面试 一面-跪了\"></a>阿里云, 分布式,大数据   - 基础平台研发工程师实习 电话面试 一面-跪了</h2><p>redis和MongoDB的区别。 谈一谈这两个数据库 。   (他以为我是自己搭建的数据库，，但我就是安装然后用的呀)<br>说一下大数据: hadoop - HDFS，hive 和 MapReduce ，问哪个是存储的，脑抽说了个hive，，， 后来改正了，然后问HDFS里面都有什么，答NameNode 和 DataNode，<br>问我还有什么，我不知道，他告诉我还有sdk。</p>\n<p>然后让我说竞赛中做过的经典，印象深刻的题目，想了好久，随便说了一个题，题目不怎么难，其实说的很模糊，而且说的时候还把那个题给弱化了，，记不太清那个题目了，</p>\n<p>然后问了我一个问题，现在都没想明白，说HDFS传3个副本，然后又客户在另一端访问这个。 然后是传完这<strong>三</strong>个副本告诉客户传完了有一个延迟时间，这<strong>两</strong>个副本告诉客户传完了有一个延迟时间，，<br>两个的会比三个的地低，<br>然后给初问题，给一个T，求N，M。 T是客户允许的最长延迟时间，N是副本总数，M是传完M个告诉客户传完了。<br>我只知道可以通过传好多次 算一个副本的时间t，但是不会算大T， 跟概率，期望，有关</p>\n<p>最后让写了一个编程题，很简单的n个区间 问覆盖的长度总和是多少。 谈了50多分种 脑子有点蒙，写了好几分钟。。 但他看了好长时间，难道是我写的错啦？？。。</p>\n<p>然后问了面试官几个问题，<br>大数据如何高效学习，论文，跟进<br>分布式如何学习，</p>\n<p>他们这个是做底层的，，，</p>\n<p>然后就是如果通过了 下次面试是什么时候，，，，但估计没有下次了，，，，，</p>\n<hr>\n<p>虽然啥都不会，什么都没有答上来。 体验非常好的一次面试，面试官人特别好，面对我这样的垃圾面试人员，应该很无奈，但依然很耐心的面试我，最后还提了好多问题。</p>\n<p>但是很奇怪，这次竟然一点操作系统和数据结构的问题都没有问， 之前看到牛客网一个基础平台研发，问了这些问题的呀。</p>\n<h2 id=\"瓜子二手车-后台研发实习生-现场一二面-给了offer邀请\"><a href=\"#瓜子二手车-后台研发实习生-现场一二面-给了offer邀请\" class=\"headerlink\" title=\"瓜子二手车 后台研发实习生 现场一二面, 给了offer邀请.\"></a>瓜子二手车 后台研发实习生 现场一二面, 给了offer邀请.</h2><ul>\n<li><p>1面<br>  自我介绍,没准备,随便说了下<br>  唠了两句家常.</p>\n<p>  绳子不均匀,燃烧的问题,一根绳子1个小时烧完.<br>  怎么找30分钟,75分钟.</p>\n<p>  说下栈和队列<br>  双栈怎么实现队列</p>\n<p>  计算机网络的几个零碎的小问题,没记住.</p>\n<p>  然后写了两个代码题</p>\n<ul>\n<li>交叉的链表,找交叉的位置,<br>链表的代码思路对,但是head节点没有val这点被我忘记了</li>\n<li><p>单链表找倒数第k个节点,</p>\n<p>数据库索引怎么实现的 -&gt; b+树<br>b+树为什么会快 -&gt; 搜索树,有剪枝<br>非**和**的区别 -&gt; 不知道,没听说过 (告诉我是 index 和 index+data的区别,名字想不起来了)<br>数据库事务的四个特性ACID -&gt; 我分不清那个是哪个了,就举个例子说了,<br>还有两个数据库的问题,想不起来了,</p>\n<p>问问题,问了技术栈和分布式的东西.</p>\n</li>\n</ul>\n</li>\n<li><p>2面<br>  领我进去的小哥哥说是总监面</p>\n<p>  自我介绍.唠家常.</p>\n<p>  两个集合求交,写代码 谢了归并排序+二分, 然后过了会说了个更简单的方法,</p>\n<p>  几个小问题,没记住</p>\n<p>  给我写了几个词,让我谈一谈</p>\n<ul>\n<li>set,stack,链表,数组,map,hash</li>\n<li><p>tcp,udp,http,https,ftp</p>\n<p>聊了聊最近在学习什么.说我基础薄弱..</p>\n<p>问问题. 问了职业规划.答:选择做技术就一直做技术.</p>\n</li>\n</ul>\n<hr>\n<p>可能因为是小公司吧,问的问题都比较简单.算法为了体现水平,学习了网上的套路,先给出一个不是很好的做法,然后再给一个优秀的做法.[斜眼笑]<br>走的时候小哥哥看了看评价表和我说不错,应该很稳,让我回去等消息就行啦.<br>面试官都很随和,出去的时候和一个工大研一的同来面试的小哥哥聊天才知道那个总监挺牛逼的.</p>\n</li>\n</ul>\n<h2 id=\"今日头条-后端研发实习生-12面-GG\"><a href=\"#今日头条-后端研发实习生-12面-GG\" class=\"headerlink\" title=\"今日头条 后端研发实习生  - 12面 [GG]\"></a>今日头条 后端研发实习生  - 12面 [GG]</h2><h3 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>一面直接给了一个问题,<br>S_0 = {1}<br>S_0 = {1,2,1}<br>…<br>S_n = S_{n-1},n+1,S_{n-1}</p>\n<p>问: 1. |S_n|  开始嘴飘,想当然的就说了,,后来说对了 2^{n+1}-1<br>            然后让我证明,,, 不会证,,,</p>\n<pre><code>2. 让实现一个函数int get_value(int n,int i) ,S_n的第i个元素,从0开始,,,,\n    然后我写了一个从1开始的,就被嘲讽了,,,然后一个变量打错,被指漏洞百出...\n    准备说的最优解还没有开始,就不理我了, (第i个数就是0~2^{n+1}-1的第i个数二进制小的最后一个一的长度,或者理解为lowbit(i)的二进制长度)\n</code></pre><p>然后有趣,hr给我打电话,委婉的告诉我挂了,,然后突然来了二面,,,,,</p>\n<h3 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h3><p>好吧,二面,啥都不会呀 …</p>\n<p>开始看了我一面写的代码,说风格太老了,,,现在C11已经不这么写了,,</p>\n<p>然后问我平时用的数据结构是stl的还是C11的,,讲道理我只知道STL的,不知道c11有什么数据结构,难道是传说中的那个能重写pushup,pushdown的内个??</p>\n<p>谈了谈我用到的那些数据结构,说我只用过基础的数据结构,,<br>然后让说了一下vector的实现,我就说了一下仅了解的它为什么能像数组那个用,,</p>\n<p>然后问一堆c11的问题,动态指针什么的,不会</p>\n<p>其中夹杂着问</p>\n<p>问会计组么,,tm不会呀,说你问吧,我试试<br>问了int是反码还是补码,隐隐约约记得是补码,磨磨唧唧说了,</p>\n<p>问socket编程, 不会, 没接触过.<br>问多线程编程, 我说接触过一点点, 只写过多线程循环打印的.</p>\n<pre><code>class Test{\n    private int a;\n    private int b;\n    int test(){};\n}\nstruct Test2{\n    int a;\n    char b;\n    char c;\n}\n\nsizeof(Test)是多少. 我说12 ,(不知道对错,开始答8然后他沉默就改了, **其实就是8** )  \nsizeof(Test2)是多少. 我说8 , 因为要内存对齐\n</code></pre><p>让我写一个函数验证机器的大小端 表示不知道大小端是什么,</p>\n<pre><code>int main(){\n    int a = 1;\n    char s = *(char *)&amp;a;\n    if(s == 1) puts(&quot;small&quot;);\n    else       puts(&quot;big&quot;);\n}\n</code></pre><p>class 和 struct的区别, 只知道class默认是private,struct默认是public, 问我还有什么 不知道</p>\n<p>问我sizeof(一个指针)是多少,不知道,叨咕了一个8,然后他告诉我32位机器是4,64位机器是8;</p>\n<p>给了一个代码</p>\n<pre><code>void test(int *p){\n    p = (int *)malloc(sizeof(int))\n}\n</code></pre><p>问p改没改变</p>\n<p>蒙的改变, p指向了新开辟的那个地址.</p>\n<p>编程题,大数加法,不让用char a[],只让用string… 写的稍墨迹</p>\n<p>然后问string += 和 +的区别</p>\n<p>就是 a+=b 和a=a+b<br>表示没看过string源码,也不了解string咋实现的,类比vector说了一下. 又错了</p>\n<p>问数据库, 我说了解的不是很深入, 然后就没问. (其实以后应该说,试一试,,)</p>\n<p>然后就问问题,唠家常了,,,,</p>\n<p>最后再见,</p>\n<p>结果在一个小时之内,听到了两次同一个hr小姐姐的拒绝电话,,,,</p>\n<hr>\n<p>体验是真几把刺激,面挂了一面还面了第二面,hhhh,于是二面的时候就很懵逼,,,</p>\n<p>但是确实啥都不会呀….</p>\n<p>总结就是多学习吧. </p>\n<p>但是有个大失误,问计网,操作系统,数据库的时候,应该说试一下的,,毕竟还是看了一些的呀,多少还是能答上来一点的,,</p>\n<h2 id=\"美团-后台开发-搞笑\"><a href=\"#美团-后台开发-搞笑\" class=\"headerlink\" title=\"美团 后台开发 (搞笑)\"></a>美团 后台开发 (搞笑)</h2><p>开始自我介绍,聊了聊最近看什么数,还有数据库啥的</p>\n<p>十分钟过后,跟我说只要Java, 不合适, 嗯 ,然后88</p>\n<hr>\n<p>傻逼美团,怎么筛选的简历,岗位要求上不是写的4中语言之一吗,,,,,而且不准备培养实习生的吗,,还听说之前实习生一个转正的都没有??!</p>\n<h2 id=\"吉比特-游戏开发-实习\"><a href=\"#吉比特-游戏开发-实习\" class=\"headerlink\" title=\"吉比特 游戏开发(实习)\"></a>吉比特 游戏开发(实习)</h2><h3 id=\"一面-1\"><a href=\"#一面-1\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>自我介绍<br>多线程<br>内联函数和宏函数<br>python闭包<br>socket编程<br>函数内的malloc 存在哪里<br>内联函数<br>右值引用<br>进程间通信<br>连续子序列最大和<br>vector<br>set 和 map的底层数据结构<br>hash冲突解决<br>内存泄漏解决<br>C++调用函数<br>虚析构函数<br>一个文本相同的行去除, 保留第一个 (内存存的下/存不下)<br>还有问题 记不起来了</p>\n<hr>\n<p>表现很差呀, 算法也没有问，代码都没让写，，，</p>\n<h2 id=\"腾讯-后台开发-实习\"><a href=\"#腾讯-后台开发-实习\" class=\"headerlink\" title=\"腾讯 后台开发(实习)\"></a>腾讯 后台开发(实习)</h2><h3 id=\"一面-2\"><a href=\"#一面-2\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>自我介绍,</p>\n<p>闲聊<br>介绍了ACM比赛<br>最近在干什么</p>\n<p>技术上的问了<br>网络编程接触过没 -&gt;没接触过<br>数据一致性怎么保证 -&gt; 不会<br>两个文件都是100W个整数,找出相同的 -&gt; 排序,然后归并的过程<br>进程间通信 并举例说出场景 -&gt; 管道不知道,剩下三个举例了,<br>说说STL -&gt; 说了下vector怎么保证可变长度而且复杂度还是O(1),map和set都是红黑树啥啥啥的<br>new/delete 和malloc/free的区别 -&gt; 说没怎么用过后者,一直用前者,因为后者长.面试官笑..然后说了几个new/delete使用的时候需要注意的问题.<br>谈到指针,问多线程删除map元素怎么办 -&gt; 先回答把多个线程要删除的记下来,然后统一删除, 他说可以, 但是希望我在指针的方式考虑, 想了想不会, 他让我回去看下map的源码关于元素删除的部分, 看过之后会有想法.<br>多线程有什么了解 -&gt; 说了下ABC循环打印的那个, 然后就没有了<br>高并发怎么处理, -&gt; 读的不加锁,写的加锁<br>接上个问我脏读怎么办 -&gt; 我说加个时间戳,他说不太好,然后不会了<br>对安全了解多少 -&gt; 把只会的凯撒加密和RSA加密说了说<br>对称加密和非对称加密 -&gt; 忘记了,说不太清了,告诉他不强答<br>C++的封装/继承/多态-&gt; 说了说多态和继承,封装我觉得没啥说的呀,,</p>\n<p>还有几个问题,忘了</p>\n<p>非技术问题<br>说给我安排一个任务,一周上线,这个任务我现在不会,怎么办 -&gt; 我觉得时间够用,没有问题,2天时间学习,3天时间实现, 具体实施的时候先请教别人,翻论文<br>如果我现在时间很紧的赶一个任务,有人请教我会的东西,我怎么做 -&gt; 甩给他相关的资料让他自己学习, 如果还不懂,粗浅的指点一下  还不懂,就对不起了,(这个很坑呀,步步紧逼)</p>\n<p>问问题<br>就问了怎么学习linux,<br>之前准备问的问题,都忘记问了</p>\n<hr>\n<p>面试官挺随和的, 开始挺紧张的 ,后来就不紧张了, 现场面试还是比电面/视频面舒服.<br>过程就像实在闲聊<br>还是什么都不会, 面试官让我把学习重心放在网络编程和安全这方面,说用到的多,学习的时候多看看源码.</p>\n<h3 id=\"二面-1\"><a href=\"#二面-1\" class=\"headerlink\" title=\"二面\"></a>二面</h3><p>问的和一面差不多,<br>多问了几个小问题而已</p>\n<p>数据库的东西问了很多, 但不会<br>然后和一面有重复的问题,但是昨天回去查了下,答得比较完整<br>Hash处理冲突,解决办法<br>内存泄露的时候如何定位 -&gt; 说调用系统的函数监控内存<br>内存分布 -&gt; 有一个忘记了,其他的说的没问题<br>进程调度算法 -&gt; 先到先服务 , 短作业优先, 多级反馈队列<br>接上个问现在系统的调度算法 -&gt; 在提示说同时能音乐,处理网页这些 想起来时间片轮转算法,说了些,<br>std::sort()怎么实现的 -&gt; 内省排序,<br>接上个std::sort()什么时候采用插入排序,归并排序,快排 -&gt; 举了什么时候插排会更快, 和归并是为了防止快排退化 balabala</p>\n<p>剩下的暂时想不起来了,</p>\n<hr>\n<p>面试官看起来挺年轻的, 数据库东西确实不太会, 而且又没让写代码, 以为凉凉了,,,<br>5点多接到明天hr面的消息,</p>\n<h2 id=\"旷视-Face-后台实习生\"><a href=\"#旷视-Face-后台实习生\" class=\"headerlink\" title=\"旷视 Face++   后台实习生\"></a>旷视 Face++   后台实习生</h2><h3 id=\"一面-3\"><a href=\"#一面-3\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>就两个问题<br>一个拓扑排序,拓扑序计数,<br>一个二分check的问题</p>\n<p>开始网站打不开,只写了第二个的代码</p>\n<p>然后就问我最近学什么, 以后的方向什么的 聊了好久</p>\n<p>问了几个问题就结束了</p>\n<hr>\n<p>感觉不错,面试官说重视的就是coding能力,其他的都可以在学,<br>等消息<br><del>智障,问面试官需要什么样的人才,说我这样的,一周后问面试官,说挂了</del></p>\n<h2 id=\"京东云-C-实习\"><a href=\"#京东云-C-实习\" class=\"headerlink\" title=\"京东云 C++(实习)\"></a>京东云 C++(实习)</h2><h3 id=\"一面-4\"><a href=\"#一面-4\" class=\"headerlink\" title=\"一面\"></a>一面</h3><p>刚面完腾讯的hr面回来到实验室扯了两句,就收到面试了</p>\n<p>给了个写代码的网页死活打不开,然后就改手写发照片了<br>写了一个矩阵,一层一层输出的代码</p>\n<p>然后说了C++的stl<br>vector的变长机制<br>平衡树</p>\n<p>tcp的三次握手,四次挥手,为什么三次,为什么四次<br>网络分层,说了下osi的七层<br>问tcp在那层,不知道,猜了个网络层,,,然后面试官问tcp的t是什么,想起是transfer,说出了传输层</p>\n<p>然后还有几个问题,忘了</p>\n<h2 id=\"日常问面试官问题结束\"><a href=\"#日常问面试官问题结束\" class=\"headerlink\" title=\"日常问面试官问题结束\"></a>日常问面试官问题结束</h2><p>面试官挺nice的</p>\n<h3 id=\"二面-2\"><a href=\"#二面-2\" class=\"headerlink\" title=\"二面\"></a>二面</h3><p>感觉效率很高 上午面完下午5点就来二面了,</p>\n<p>面向对象编程谈谈<br>C++ stl<br>内存分布<br>网络的那几个老生常谈的问题<br>进程间通信<br>数据库谈了谈</p>\n<p>一个linux 操作的问题,不会</p>\n<p>还有几个问题 忘了</p>\n<h3 id=\"hr面\"><a href=\"#hr面\" class=\"headerlink\" title=\"hr面\"></a>hr面</h3><p>因为一二面是周五 周一去考科四的时候来的电话</p>\n<p>瞎聊天 结束</p>\n"},{"title":"GraduationProject","date":"2018-09-23T07:33:11.000Z","description":"tabris的毕业设计","toc":true,"_content":"\n\n> 在这里记录一下我的毕业设计\n> 链接在[GitHub](https://github.com/tabris233/GraduationProject)上\n\n\n\nmd 写个p 面向cv编程就完了","source":"_posts/GraduationProject.md","raw":"---\ntitle: GraduationProject\ndate: 2018-09-23 15:33:11\ncategories:  \ntags: [毕业设计] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: tabris的毕业设计 \ntoc: true\n---\n\n\n> 在这里记录一下我的毕业设计\n> 链接在[GitHub](https://github.com/tabris233/GraduationProject)上\n\n\n\nmd 写个p 面向cv编程就完了","slug":"GraduationProject","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2s00j0safko8ith4ib","content":"<blockquote>\n<p>在这里记录一下我的毕业设计<br>链接在<a href=\"https://github.com/tabris233/GraduationProject\" target=\"_blank\" rel=\"noopener\">GitHub</a>上</p>\n</blockquote>\n<p>md 写个p 面向cv编程就完了</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在这里记录一下我的毕业设计<br>链接在<a href=\"https://github.com/tabris233/GraduationProject\" target=\"_blank\" rel=\"noopener\">GitHub</a>上</p>\n</blockquote>\n<p>md 写个p 面向cv编程就完了</p>\n"},{"title":"InternshipSummary","date":"2017-12-30T16:00:00.000Z","description":null,"toc":true,"_content":"\n\n\n## Internship Summary\n\n> this is the summary for my six month internship. \n>\n> 2018-05-24~\n\n### 干了什么\n\n`5月24日`入职.\n\n半个月后开始参与**商户联调**.\n\n`6月22号`接到**手机号同步脚本**的需求,`7月11号`上线\n\n- 开发用时其实只有两天. 后面进行的是漫长的发布流程,公司内开发工具不熟悉.同时测试也是一个实习生,卡住了几天.\n\n同时接到**自动化用例server**需求\n\n`8月5号`正式方案评审结束\n\n`8月10号`正式开发完,后一直等待测试侧的开发\n\n`8月17号`左右接到**商户迁移对账脚本**的需求 `8月24号`开发完毕,但后期有优化\n\n- 这个做的就太慢了, 6张表整不明白了 当然也和python语言有些关系,语言基础不够\n\n`8月底`开始部署自动化测试用例,陆续到9月中旬正式运行.\n\n`8月底`接到QA的**商户监控报表**需求,开始采取`监控平台报表定制`,但不能查到商户名称,无奈改成python脚本.\n\n- 开发上线还是有问题.  分布式调度平台无法调用.\n\n`9月10号`左右接到**深铁预测提取脚本**需求, `9月18号`会议结束,`9月25号`脚本开发完毕,等征信侧部署ditto.\n\n> 这时候基本没有商户联调的工作了\n\n`9月14号`接到**客服系统优化**需求,`9月底`前端功能点部分优化结束.然后开始挂起.\n\n- 前端都不会,现学现卖,做的很慢,\n\n> ~~`9月底`接到薪资offer,心态崩.此事不谈~~\n\n`10月中旬`开始在做后台部分的修改方案\n\n> 当时考虑的是2.0的兼容,但是沟通问题,导致没有理解到位\n\n`10月中旬`接到**自动化用例的优化**小需求,工时较短,但由于依赖服务还在测试阶段 没有提发.\n\n> 测试结束后突然又加了个优化点..\n\n`10月中旬`接到**行业数据预拉取**需求 ,于`10月17日`方案评审 ,`10月25日正式开始编码`,`10月26日`提code review,`10月27日`提测, `11月5日`评审了代码,同日排上测试,`11月9日`测完,`11月12日`发布.\n\n> 接到需求时 客服系统需求挂起 快结束时继续开发\n>\n> 并发程序开发经验匮乏.\n>\n> 同时出现shell脚本 '\\r\\n'和'\\n' 的问题\n>\n> bug超多,\n\n`10月中旬后期`征信侧部署结束,开始联调,后发布\n\n`10月底,11月初`接到**自动化用例改造**需求,`11月13日`完成开发,次日联调\n\n> cgi,server 改造,基本是从其他模块复用代码,难度不大,但cgi首次开发,进度较慢,\n>\n> **但是写在方案上的点竟然有遗漏,用户白名单没有配置????**\n>\n> 同事周5前端换人,进度延期\n>\n> 之前代码仓库申请的是我的git目录下 发布的时候发现不行\n>\n> `11月15日`申请正式代码库,被要求用新框架开发cgi,尝试改造,**半天工**后,发现框架改动较大,依赖非常不好改,遂放弃,依旧沿用老框架.\n\n`11月15,16日`完成**客服系统**的前后端开发\n\n> 前端的分支目录未知, 还没有把代码提交到分支上.\n>\n> 后面验证下就可以发布了\n\n`11月17,20~24日`,**自动化用例**与前端联调,同时接到**广告/活动/红点查询链路优化需求**\n\n> 前端临时换人, 导致了很多坑,本预计17号收尾的,延误一个多星期.\n>\n> 联调过程,虽然是开发环境缺少数据等因素耽搁了时间.同时前端工作交接出现问题,前端代码中的一处修改/一处打桩,导致两个调了很久的问题.但主要还是我的经验不足,一来导致不管是前端还是导师/leader都觉得是我的问题.......\n>\n> 没有对前后端参数进行仔细的对比,,,对基础工具(apache)的使用不熟练.造成时间上的严重浪费.\n\n### 学习了什么\n\n很多,\n\n> 点比较杂,一些零散经验性的东西,很难列出.\n\n- linux的使用\n- 开发工具的使用\n- 应该注意的问题\n- 对架构有了点了解\n\n\n\n\n### 现在的问题\n\n>  能力问题还是经验问题?\n\n经验问题是一定存在的. \n\n- 内部工具掌握的不够\n- 开发经验的不足\n- 项目系统不够了解,\n\n能力问题\n\n- 问题定位的速度慢\n- 头铁,\n- 基础**不**扎实\n","source":"_posts/InternshipSummary.md","raw":"---\ntitle: InternshipSummary\ndate: 2017-12-31 00:00:00\ncategories:  \ntags: [实习] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n\n---\n\n\n\n## Internship Summary\n\n> this is the summary for my six month internship. \n>\n> 2018-05-24~\n\n### 干了什么\n\n`5月24日`入职.\n\n半个月后开始参与**商户联调**.\n\n`6月22号`接到**手机号同步脚本**的需求,`7月11号`上线\n\n- 开发用时其实只有两天. 后面进行的是漫长的发布流程,公司内开发工具不熟悉.同时测试也是一个实习生,卡住了几天.\n\n同时接到**自动化用例server**需求\n\n`8月5号`正式方案评审结束\n\n`8月10号`正式开发完,后一直等待测试侧的开发\n\n`8月17号`左右接到**商户迁移对账脚本**的需求 `8月24号`开发完毕,但后期有优化\n\n- 这个做的就太慢了, 6张表整不明白了 当然也和python语言有些关系,语言基础不够\n\n`8月底`开始部署自动化测试用例,陆续到9月中旬正式运行.\n\n`8月底`接到QA的**商户监控报表**需求,开始采取`监控平台报表定制`,但不能查到商户名称,无奈改成python脚本.\n\n- 开发上线还是有问题.  分布式调度平台无法调用.\n\n`9月10号`左右接到**深铁预测提取脚本**需求, `9月18号`会议结束,`9月25号`脚本开发完毕,等征信侧部署ditto.\n\n> 这时候基本没有商户联调的工作了\n\n`9月14号`接到**客服系统优化**需求,`9月底`前端功能点部分优化结束.然后开始挂起.\n\n- 前端都不会,现学现卖,做的很慢,\n\n> ~~`9月底`接到薪资offer,心态崩.此事不谈~~\n\n`10月中旬`开始在做后台部分的修改方案\n\n> 当时考虑的是2.0的兼容,但是沟通问题,导致没有理解到位\n\n`10月中旬`接到**自动化用例的优化**小需求,工时较短,但由于依赖服务还在测试阶段 没有提发.\n\n> 测试结束后突然又加了个优化点..\n\n`10月中旬`接到**行业数据预拉取**需求 ,于`10月17日`方案评审 ,`10月25日正式开始编码`,`10月26日`提code review,`10月27日`提测, `11月5日`评审了代码,同日排上测试,`11月9日`测完,`11月12日`发布.\n\n> 接到需求时 客服系统需求挂起 快结束时继续开发\n>\n> 并发程序开发经验匮乏.\n>\n> 同时出现shell脚本 '\\r\\n'和'\\n' 的问题\n>\n> bug超多,\n\n`10月中旬后期`征信侧部署结束,开始联调,后发布\n\n`10月底,11月初`接到**自动化用例改造**需求,`11月13日`完成开发,次日联调\n\n> cgi,server 改造,基本是从其他模块复用代码,难度不大,但cgi首次开发,进度较慢,\n>\n> **但是写在方案上的点竟然有遗漏,用户白名单没有配置????**\n>\n> 同事周5前端换人,进度延期\n>\n> 之前代码仓库申请的是我的git目录下 发布的时候发现不行\n>\n> `11月15日`申请正式代码库,被要求用新框架开发cgi,尝试改造,**半天工**后,发现框架改动较大,依赖非常不好改,遂放弃,依旧沿用老框架.\n\n`11月15,16日`完成**客服系统**的前后端开发\n\n> 前端的分支目录未知, 还没有把代码提交到分支上.\n>\n> 后面验证下就可以发布了\n\n`11月17,20~24日`,**自动化用例**与前端联调,同时接到**广告/活动/红点查询链路优化需求**\n\n> 前端临时换人, 导致了很多坑,本预计17号收尾的,延误一个多星期.\n>\n> 联调过程,虽然是开发环境缺少数据等因素耽搁了时间.同时前端工作交接出现问题,前端代码中的一处修改/一处打桩,导致两个调了很久的问题.但主要还是我的经验不足,一来导致不管是前端还是导师/leader都觉得是我的问题.......\n>\n> 没有对前后端参数进行仔细的对比,,,对基础工具(apache)的使用不熟练.造成时间上的严重浪费.\n\n### 学习了什么\n\n很多,\n\n> 点比较杂,一些零散经验性的东西,很难列出.\n\n- linux的使用\n- 开发工具的使用\n- 应该注意的问题\n- 对架构有了点了解\n\n\n\n\n### 现在的问题\n\n>  能力问题还是经验问题?\n\n经验问题是一定存在的. \n\n- 内部工具掌握的不够\n- 开发经验的不足\n- 项目系统不够了解,\n\n能力问题\n\n- 问题定位的速度慢\n- 头铁,\n- 基础**不**扎实\n","slug":"InternshipSummary","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2t00j1safkai32k9ye","content":"<h2 id=\"Internship-Summary\"><a href=\"#Internship-Summary\" class=\"headerlink\" title=\"Internship Summary\"></a>Internship Summary</h2><blockquote>\n<p>this is the summary for my six month internship. </p>\n<p>2018-05-24~</p>\n</blockquote>\n<h3 id=\"干了什么\"><a href=\"#干了什么\" class=\"headerlink\" title=\"干了什么\"></a>干了什么</h3><p><code>5月24日</code>入职.</p>\n<p>半个月后开始参与<strong>商户联调</strong>.</p>\n<p><code>6月22号</code>接到<strong>手机号同步脚本</strong>的需求,<code>7月11号</code>上线</p>\n<ul>\n<li>开发用时其实只有两天. 后面进行的是漫长的发布流程,公司内开发工具不熟悉.同时测试也是一个实习生,卡住了几天.</li>\n</ul>\n<p>同时接到<strong>自动化用例server</strong>需求</p>\n<p><code>8月5号</code>正式方案评审结束</p>\n<p><code>8月10号</code>正式开发完,后一直等待测试侧的开发</p>\n<p><code>8月17号</code>左右接到<strong>商户迁移对账脚本</strong>的需求 <code>8月24号</code>开发完毕,但后期有优化</p>\n<ul>\n<li>这个做的就太慢了, 6张表整不明白了 当然也和python语言有些关系,语言基础不够</li>\n</ul>\n<p><code>8月底</code>开始部署自动化测试用例,陆续到9月中旬正式运行.</p>\n<p><code>8月底</code>接到QA的<strong>商户监控报表</strong>需求,开始采取<code>监控平台报表定制</code>,但不能查到商户名称,无奈改成python脚本.</p>\n<ul>\n<li>开发上线还是有问题.  分布式调度平台无法调用.</li>\n</ul>\n<p><code>9月10号</code>左右接到<strong>深铁预测提取脚本</strong>需求, <code>9月18号</code>会议结束,<code>9月25号</code>脚本开发完毕,等征信侧部署ditto.</p>\n<blockquote>\n<p>这时候基本没有商户联调的工作了</p>\n</blockquote>\n<p><code>9月14号</code>接到<strong>客服系统优化</strong>需求,<code>9月底</code>前端功能点部分优化结束.然后开始挂起.</p>\n<ul>\n<li>前端都不会,现学现卖,做的很慢,</li>\n</ul>\n<blockquote>\n<p><del><code>9月底</code>接到薪资offer,心态崩.此事不谈</del></p>\n</blockquote>\n<p><code>10月中旬</code>开始在做后台部分的修改方案</p>\n<blockquote>\n<p>当时考虑的是2.0的兼容,但是沟通问题,导致没有理解到位</p>\n</blockquote>\n<p><code>10月中旬</code>接到<strong>自动化用例的优化</strong>小需求,工时较短,但由于依赖服务还在测试阶段 没有提发.</p>\n<blockquote>\n<p>测试结束后突然又加了个优化点..</p>\n</blockquote>\n<p><code>10月中旬</code>接到<strong>行业数据预拉取</strong>需求 ,于<code>10月17日</code>方案评审 ,<code>10月25日正式开始编码</code>,<code>10月26日</code>提code review,<code>10月27日</code>提测, <code>11月5日</code>评审了代码,同日排上测试,<code>11月9日</code>测完,<code>11月12日</code>发布.</p>\n<blockquote>\n<p>接到需求时 客服系统需求挂起 快结束时继续开发</p>\n<p>并发程序开发经验匮乏.</p>\n<p>同时出现shell脚本 ‘\\r\\n’和’\\n’ 的问题</p>\n<p>bug超多,</p>\n</blockquote>\n<p><code>10月中旬后期</code>征信侧部署结束,开始联调,后发布</p>\n<p><code>10月底,11月初</code>接到<strong>自动化用例改造</strong>需求,<code>11月13日</code>完成开发,次日联调</p>\n<blockquote>\n<p>cgi,server 改造,基本是从其他模块复用代码,难度不大,但cgi首次开发,进度较慢,</p>\n<p><strong>但是写在方案上的点竟然有遗漏,用户白名单没有配置????</strong></p>\n<p>同事周5前端换人,进度延期</p>\n<p>之前代码仓库申请的是我的git目录下 发布的时候发现不行</p>\n<p><code>11月15日</code>申请正式代码库,被要求用新框架开发cgi,尝试改造,<strong>半天工</strong>后,发现框架改动较大,依赖非常不好改,遂放弃,依旧沿用老框架.</p>\n</blockquote>\n<p><code>11月15,16日</code>完成<strong>客服系统</strong>的前后端开发</p>\n<blockquote>\n<p>前端的分支目录未知, 还没有把代码提交到分支上.</p>\n<p>后面验证下就可以发布了</p>\n</blockquote>\n<p><code>11月17,20~24日</code>,<strong>自动化用例</strong>与前端联调,同时接到<strong>广告/活动/红点查询链路优化需求</strong></p>\n<blockquote>\n<p>前端临时换人, 导致了很多坑,本预计17号收尾的,延误一个多星期.</p>\n<p>联调过程,虽然是开发环境缺少数据等因素耽搁了时间.同时前端工作交接出现问题,前端代码中的一处修改/一处打桩,导致两个调了很久的问题.但主要还是我的经验不足,一来导致不管是前端还是导师/leader都觉得是我的问题…….</p>\n<p>没有对前后端参数进行仔细的对比,,,对基础工具(apache)的使用不熟练.造成时间上的严重浪费.</p>\n</blockquote>\n<h3 id=\"学习了什么\"><a href=\"#学习了什么\" class=\"headerlink\" title=\"学习了什么\"></a>学习了什么</h3><p>很多,</p>\n<blockquote>\n<p>点比较杂,一些零散经验性的东西,很难列出.</p>\n</blockquote>\n<ul>\n<li>linux的使用</li>\n<li>开发工具的使用</li>\n<li>应该注意的问题</li>\n<li>对架构有了点了解</li>\n</ul>\n<h3 id=\"现在的问题\"><a href=\"#现在的问题\" class=\"headerlink\" title=\"现在的问题\"></a>现在的问题</h3><blockquote>\n<p> 能力问题还是经验问题?</p>\n</blockquote>\n<p>经验问题是一定存在的. </p>\n<ul>\n<li>内部工具掌握的不够</li>\n<li>开发经验的不足</li>\n<li>项目系统不够了解,</li>\n</ul>\n<p>能力问题</p>\n<ul>\n<li>问题定位的速度慢</li>\n<li>头铁,</li>\n<li>基础<strong>不</strong>扎实</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Internship-Summary\"><a href=\"#Internship-Summary\" class=\"headerlink\" title=\"Internship Summary\"></a>Internship Summary</h2><blockquote>\n<p>this is the summary for my six month internship. </p>\n<p>2018-05-24~</p>\n</blockquote>\n<h3 id=\"干了什么\"><a href=\"#干了什么\" class=\"headerlink\" title=\"干了什么\"></a>干了什么</h3><p><code>5月24日</code>入职.</p>\n<p>半个月后开始参与<strong>商户联调</strong>.</p>\n<p><code>6月22号</code>接到<strong>手机号同步脚本</strong>的需求,<code>7月11号</code>上线</p>\n<ul>\n<li>开发用时其实只有两天. 后面进行的是漫长的发布流程,公司内开发工具不熟悉.同时测试也是一个实习生,卡住了几天.</li>\n</ul>\n<p>同时接到<strong>自动化用例server</strong>需求</p>\n<p><code>8月5号</code>正式方案评审结束</p>\n<p><code>8月10号</code>正式开发完,后一直等待测试侧的开发</p>\n<p><code>8月17号</code>左右接到<strong>商户迁移对账脚本</strong>的需求 <code>8月24号</code>开发完毕,但后期有优化</p>\n<ul>\n<li>这个做的就太慢了, 6张表整不明白了 当然也和python语言有些关系,语言基础不够</li>\n</ul>\n<p><code>8月底</code>开始部署自动化测试用例,陆续到9月中旬正式运行.</p>\n<p><code>8月底</code>接到QA的<strong>商户监控报表</strong>需求,开始采取<code>监控平台报表定制</code>,但不能查到商户名称,无奈改成python脚本.</p>\n<ul>\n<li>开发上线还是有问题.  分布式调度平台无法调用.</li>\n</ul>\n<p><code>9月10号</code>左右接到<strong>深铁预测提取脚本</strong>需求, <code>9月18号</code>会议结束,<code>9月25号</code>脚本开发完毕,等征信侧部署ditto.</p>\n<blockquote>\n<p>这时候基本没有商户联调的工作了</p>\n</blockquote>\n<p><code>9月14号</code>接到<strong>客服系统优化</strong>需求,<code>9月底</code>前端功能点部分优化结束.然后开始挂起.</p>\n<ul>\n<li>前端都不会,现学现卖,做的很慢,</li>\n</ul>\n<blockquote>\n<p><del><code>9月底</code>接到薪资offer,心态崩.此事不谈</del></p>\n</blockquote>\n<p><code>10月中旬</code>开始在做后台部分的修改方案</p>\n<blockquote>\n<p>当时考虑的是2.0的兼容,但是沟通问题,导致没有理解到位</p>\n</blockquote>\n<p><code>10月中旬</code>接到<strong>自动化用例的优化</strong>小需求,工时较短,但由于依赖服务还在测试阶段 没有提发.</p>\n<blockquote>\n<p>测试结束后突然又加了个优化点..</p>\n</blockquote>\n<p><code>10月中旬</code>接到<strong>行业数据预拉取</strong>需求 ,于<code>10月17日</code>方案评审 ,<code>10月25日正式开始编码</code>,<code>10月26日</code>提code review,<code>10月27日</code>提测, <code>11月5日</code>评审了代码,同日排上测试,<code>11月9日</code>测完,<code>11月12日</code>发布.</p>\n<blockquote>\n<p>接到需求时 客服系统需求挂起 快结束时继续开发</p>\n<p>并发程序开发经验匮乏.</p>\n<p>同时出现shell脚本 ‘\\r\\n’和’\\n’ 的问题</p>\n<p>bug超多,</p>\n</blockquote>\n<p><code>10月中旬后期</code>征信侧部署结束,开始联调,后发布</p>\n<p><code>10月底,11月初</code>接到<strong>自动化用例改造</strong>需求,<code>11月13日</code>完成开发,次日联调</p>\n<blockquote>\n<p>cgi,server 改造,基本是从其他模块复用代码,难度不大,但cgi首次开发,进度较慢,</p>\n<p><strong>但是写在方案上的点竟然有遗漏,用户白名单没有配置????</strong></p>\n<p>同事周5前端换人,进度延期</p>\n<p>之前代码仓库申请的是我的git目录下 发布的时候发现不行</p>\n<p><code>11月15日</code>申请正式代码库,被要求用新框架开发cgi,尝试改造,<strong>半天工</strong>后,发现框架改动较大,依赖非常不好改,遂放弃,依旧沿用老框架.</p>\n</blockquote>\n<p><code>11月15,16日</code>完成<strong>客服系统</strong>的前后端开发</p>\n<blockquote>\n<p>前端的分支目录未知, 还没有把代码提交到分支上.</p>\n<p>后面验证下就可以发布了</p>\n</blockquote>\n<p><code>11月17,20~24日</code>,<strong>自动化用例</strong>与前端联调,同时接到<strong>广告/活动/红点查询链路优化需求</strong></p>\n<blockquote>\n<p>前端临时换人, 导致了很多坑,本预计17号收尾的,延误一个多星期.</p>\n<p>联调过程,虽然是开发环境缺少数据等因素耽搁了时间.同时前端工作交接出现问题,前端代码中的一处修改/一处打桩,导致两个调了很久的问题.但主要还是我的经验不足,一来导致不管是前端还是导师/leader都觉得是我的问题…….</p>\n<p>没有对前后端参数进行仔细的对比,,,对基础工具(apache)的使用不熟练.造成时间上的严重浪费.</p>\n</blockquote>\n<h3 id=\"学习了什么\"><a href=\"#学习了什么\" class=\"headerlink\" title=\"学习了什么\"></a>学习了什么</h3><p>很多,</p>\n<blockquote>\n<p>点比较杂,一些零散经验性的东西,很难列出.</p>\n</blockquote>\n<ul>\n<li>linux的使用</li>\n<li>开发工具的使用</li>\n<li>应该注意的问题</li>\n<li>对架构有了点了解</li>\n</ul>\n<h3 id=\"现在的问题\"><a href=\"#现在的问题\" class=\"headerlink\" title=\"现在的问题\"></a>现在的问题</h3><blockquote>\n<p> 能力问题还是经验问题?</p>\n</blockquote>\n<p>经验问题是一定存在的. </p>\n<ul>\n<li>内部工具掌握的不够</li>\n<li>开发经验的不足</li>\n<li>项目系统不够了解,</li>\n</ul>\n<p>能力问题</p>\n<ul>\n<li>问题定位的速度慢</li>\n<li>头铁,</li>\n<li>基础<strong>不</strong>扎实</li>\n</ul>\n"},{"title":"正则表达式手册","date":"2018-03-17T08:15:41.000Z","_content":"# 表达式全集\n\n由于hexo的markdown的引擎太烂了  这里的格式会乱点\n有时间在换一个好一点的引擎   太乱了!! \n移步这里[格式好看的正则表达式手册](http://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n\n|     字符     | 描述                                                         |\n| :----------: | :----------------------------------------------------------- |\n|      \\       | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“`n`”匹配字符“`n`”。“`\\n`”匹配一个换行符。串行“`\\`”匹配“`\\`”而“`(`”则匹配“`(`”。 |\n|      ^       | 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“`\\n`”或“`\\r`”之后的位置。 |\n|      $       | 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“`\\n`”或“`\\r`”之前的位置。 |\n|              | 匹配前面的子表达式零次或多次。例如，zo能匹配“`z`”以及“`zoo`”。*等价于{0,}。* |\n|      +       | 匹配前面的子表达式一次或多次。例如，“`zo+`”能匹配“`zo`”以及“`zoo`”，但不能匹配“`z`”。+等价于{1,}。 |\n|      ?       | 匹配前面的子表达式零次或一次。例如，“`do(es)?`”可以匹配“`does`”或“`does`”中的“`do`”。?等价于{0,1}。 |\n|     {n}      | n是一个非负整数。匹配确定的n次。例如，“`o{2}`”不能匹配“`Bob`”中的“`o`”，但是能匹配“`food`”中的两个o。 |\n|     {n,}     | n是一个非负整数。至少匹配n次。例如，“`o{2,}`”不能匹配“`Bob`”中的“`o`”，但能匹配“`foooood`”中的所有o。“`o{1,}`”等价于“`o+`”。“`o{0,}`”则等价于“`o`”。 |\n|    {n,m}     | m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“`o{1,3}`”将匹配“`fooooood`”中的前三个o。“`o{0,1}`”等价于“`o?`”。请注意在逗号和两个数之间不能有空格。 |\n|      ?       | 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“`oooo`”，“`o+?`”将匹配单个“`o`”，而“`o+`”将匹配所有“`o`”。 |\n|      .       | 匹配除“`\\``n`”之外的任何单个字符。要匹配包括“`\\``n`”在内的任何字符，请使用像“`(.|\\n)`”的模式。 |\n|  (pattern)   | 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“`(`”或“`)`”。 |\n| (?:pattern)  | 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(|)`”来组合一个模式的各个部分是很有用。例如“`industr(?:y|ies)`”就是一个比“`industry|industries`”更简略的表达式。 |\n| (?=pattern)  | 正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95|98|NT|2000)`”能匹配“`Windows2000`”中的“`Windows`”，但不能匹配“`Windows3.1`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |\n| (?!pattern)  | 正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95|98|NT|2000)`”能匹配“`Windows3.1`”中的“`Windows`”，但不能匹配“`Windows2000`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始 |\n| (?<=pattern) | 反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?<=95|98|NT|2000)Windows`”能匹配“`2000Windows`”中的“`Windows`”，但不能匹配“`3.1Windows`”中的“`Windows`”。 |\n| (?<!pattern) | 反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?<!95|98|NT|2000)Windows`”能匹配“`3.1Windows`”中的“`Windows`”，但不能匹配“`2000Windows`”中的“`Windows`”。 |\n|     x\\|y     | 匹配x或y。例如，“`z|food`”能匹配“`z`”或“`food`”。“`(z|f)ood`”则匹配“`zood`”或“`food`”。 |\n|    [xyz]     | 字符集合。匹配所包含的任意一个字符。例如，“`[abc]`”可以匹配“`plain`”中的“`a`”。 |\n|    [^xyz]    | 负值字符集合。匹配未包含的任意字符。例如，“`[^abc]`”可以匹配“`plain`”中的“`p`”。 |\n|    [a-z]     | 字符范围。匹配指定范围内的任意字符。例如，“`[a-z]`”可以匹配“`a`”到“`z`”范围内的任意小写字母字符。 |\n|    [^a-z]    | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“`[^a-z]`”可以匹配任何不在“`a`”到“`z`”范围内的任意字符。 |\n|      \\b      | 匹配一个单词边界，也就是指单词和空格间的位置。例如，“`er\\b`”可以匹配“`never`”中的“`er`”，但不能匹配“`verb`”中的“`er`”。 |\n|      \\B      | 匹配非单词边界。“`er\\B`”能匹配“`verb`”中的“`er`”，但不能匹配“`never`”中的“`er`”。 |\n|     \\cx      | 匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“`c`”字符。 |\n|      \\d      | 匹配一个数字字符。等价于[0-9]。                              |\n|      \\D      | 匹配一个非数字字符。等价于[^0-9]。                           |\n|      \\f      | 匹配一个换页符。等价于\\x0c和\\cL。                            |\n|      \\n      | 匹配一个换行符。等价于\\x0a和\\cJ。                            |\n|      \\r      | 匹配一个回车符。等价于\\x0d和\\cM。                            |\n|      \\s      | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。 |\n|      \\S      | 匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。                   |\n|      \\t      | 匹配一个制表符。等价于\\x09和\\cI。                            |\n|      \\v      | 匹配一个垂直制表符。等价于\\x0b和\\cK。                        |\n|      \\w      | 匹配包括下划线的任何单词字符。等价于“`[A-Za-z0-9*]*`”。      |\n|      \\W      | 匹配任何非单词字符。等价于“`[^A-Za-z0-9]`”。                 |\n|     \\xn      | 匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“`\\x41`”匹配“`A`”。“`\\x041`”则等价于“`\\x04&1`”。正则表达式中可以使用ASCII编码。. |\n|     \\num     | 匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“`(.)\\1`”匹配两个连续的相同字符。 |\n|      \\n      | 标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。 |\n|     \\nm      | 标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。 |\n|     \\nml     | 如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。 |\n|     \\un      | 匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。 |\n\n# 常用正则表达式\n\n|||\n|-|-|\n|         用户名          | `/^[a-z0-9*-]{3,16}$/`                                        |\n|          密码           | `/^[a-z0-9-]{6,18}$/`                                          |\n|       十六进制值        | `/^#?([a-f0-9]{6}\\&#124;[a-f0-9]{3})$/`                            |\n|        电子邮箱         | `/^([a-z0-9*.-]+)@([\\da-z.-]+).([a-z.]{2,6})$/` `/^[a-z\\d]+(.[a-z\\d]+)@(\\da-z?)+(.{1,2}[a-z]+)+$/`*` |\n|           URL           | `/^(https?:\\/\\/)?([\\da-z.-]+).([a-z.]{2,6})([\\/\\w .-])*\\/?$/`*` |\n|         IP 地址         | `/((2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?).){3}(2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?)/` `/^(?:(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?).){3}(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?)$/` |\n|        HTML 标签        | `/^<([a-z]+)([^<]+)(?:>(.*)<\\/\\1>\\|\\s+\\/>)$/`                 |\n|      删除代码\\注释      | `(?<!http:\\|\\S)//.$`                                           |\n| Unicode编码中的汉字范围 | `/^[\\u2E80-\\u9FFF]+$/`                                         |","source":"_posts/ManualOfRegex.md","raw":"---\ntitle: 正则表达式手册\ndate: 2018-03-17 16:15:41\ntags: 正则表达式\n---\n# 表达式全集\n\n由于hexo的markdown的引擎太烂了  这里的格式会乱点\n有时间在换一个好一点的引擎   太乱了!! \n移步这里[格式好看的正则表达式手册](http://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n\n|     字符     | 描述                                                         |\n| :----------: | :----------------------------------------------------------- |\n|      \\       | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“`n`”匹配字符“`n`”。“`\\n`”匹配一个换行符。串行“`\\`”匹配“`\\`”而“`(`”则匹配“`(`”。 |\n|      ^       | 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“`\\n`”或“`\\r`”之后的位置。 |\n|      $       | 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“`\\n`”或“`\\r`”之前的位置。 |\n|              | 匹配前面的子表达式零次或多次。例如，zo能匹配“`z`”以及“`zoo`”。*等价于{0,}。* |\n|      +       | 匹配前面的子表达式一次或多次。例如，“`zo+`”能匹配“`zo`”以及“`zoo`”，但不能匹配“`z`”。+等价于{1,}。 |\n|      ?       | 匹配前面的子表达式零次或一次。例如，“`do(es)?`”可以匹配“`does`”或“`does`”中的“`do`”。?等价于{0,1}。 |\n|     {n}      | n是一个非负整数。匹配确定的n次。例如，“`o{2}`”不能匹配“`Bob`”中的“`o`”，但是能匹配“`food`”中的两个o。 |\n|     {n,}     | n是一个非负整数。至少匹配n次。例如，“`o{2,}`”不能匹配“`Bob`”中的“`o`”，但能匹配“`foooood`”中的所有o。“`o{1,}`”等价于“`o+`”。“`o{0,}`”则等价于“`o`”。 |\n|    {n,m}     | m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“`o{1,3}`”将匹配“`fooooood`”中的前三个o。“`o{0,1}`”等价于“`o?`”。请注意在逗号和两个数之间不能有空格。 |\n|      ?       | 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“`oooo`”，“`o+?`”将匹配单个“`o`”，而“`o+`”将匹配所有“`o`”。 |\n|      .       | 匹配除“`\\``n`”之外的任何单个字符。要匹配包括“`\\``n`”在内的任何字符，请使用像“`(.|\\n)`”的模式。 |\n|  (pattern)   | 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“`(`”或“`)`”。 |\n| (?:pattern)  | 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(|)`”来组合一个模式的各个部分是很有用。例如“`industr(?:y|ies)`”就是一个比“`industry|industries`”更简略的表达式。 |\n| (?=pattern)  | 正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95|98|NT|2000)`”能匹配“`Windows2000`”中的“`Windows`”，但不能匹配“`Windows3.1`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |\n| (?!pattern)  | 正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95|98|NT|2000)`”能匹配“`Windows3.1`”中的“`Windows`”，但不能匹配“`Windows2000`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始 |\n| (?<=pattern) | 反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?<=95|98|NT|2000)Windows`”能匹配“`2000Windows`”中的“`Windows`”，但不能匹配“`3.1Windows`”中的“`Windows`”。 |\n| (?<!pattern) | 反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?<!95|98|NT|2000)Windows`”能匹配“`3.1Windows`”中的“`Windows`”，但不能匹配“`2000Windows`”中的“`Windows`”。 |\n|     x\\|y     | 匹配x或y。例如，“`z|food`”能匹配“`z`”或“`food`”。“`(z|f)ood`”则匹配“`zood`”或“`food`”。 |\n|    [xyz]     | 字符集合。匹配所包含的任意一个字符。例如，“`[abc]`”可以匹配“`plain`”中的“`a`”。 |\n|    [^xyz]    | 负值字符集合。匹配未包含的任意字符。例如，“`[^abc]`”可以匹配“`plain`”中的“`p`”。 |\n|    [a-z]     | 字符范围。匹配指定范围内的任意字符。例如，“`[a-z]`”可以匹配“`a`”到“`z`”范围内的任意小写字母字符。 |\n|    [^a-z]    | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“`[^a-z]`”可以匹配任何不在“`a`”到“`z`”范围内的任意字符。 |\n|      \\b      | 匹配一个单词边界，也就是指单词和空格间的位置。例如，“`er\\b`”可以匹配“`never`”中的“`er`”，但不能匹配“`verb`”中的“`er`”。 |\n|      \\B      | 匹配非单词边界。“`er\\B`”能匹配“`verb`”中的“`er`”，但不能匹配“`never`”中的“`er`”。 |\n|     \\cx      | 匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“`c`”字符。 |\n|      \\d      | 匹配一个数字字符。等价于[0-9]。                              |\n|      \\D      | 匹配一个非数字字符。等价于[^0-9]。                           |\n|      \\f      | 匹配一个换页符。等价于\\x0c和\\cL。                            |\n|      \\n      | 匹配一个换行符。等价于\\x0a和\\cJ。                            |\n|      \\r      | 匹配一个回车符。等价于\\x0d和\\cM。                            |\n|      \\s      | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。 |\n|      \\S      | 匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。                   |\n|      \\t      | 匹配一个制表符。等价于\\x09和\\cI。                            |\n|      \\v      | 匹配一个垂直制表符。等价于\\x0b和\\cK。                        |\n|      \\w      | 匹配包括下划线的任何单词字符。等价于“`[A-Za-z0-9*]*`”。      |\n|      \\W      | 匹配任何非单词字符。等价于“`[^A-Za-z0-9]`”。                 |\n|     \\xn      | 匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“`\\x41`”匹配“`A`”。“`\\x041`”则等价于“`\\x04&1`”。正则表达式中可以使用ASCII编码。. |\n|     \\num     | 匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“`(.)\\1`”匹配两个连续的相同字符。 |\n|      \\n      | 标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。 |\n|     \\nm      | 标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。 |\n|     \\nml     | 如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。 |\n|     \\un      | 匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。 |\n\n# 常用正则表达式\n\n|||\n|-|-|\n|         用户名          | `/^[a-z0-9*-]{3,16}$/`                                        |\n|          密码           | `/^[a-z0-9-]{6,18}$/`                                          |\n|       十六进制值        | `/^#?([a-f0-9]{6}\\&#124;[a-f0-9]{3})$/`                            |\n|        电子邮箱         | `/^([a-z0-9*.-]+)@([\\da-z.-]+).([a-z.]{2,6})$/` `/^[a-z\\d]+(.[a-z\\d]+)@(\\da-z?)+(.{1,2}[a-z]+)+$/`*` |\n|           URL           | `/^(https?:\\/\\/)?([\\da-z.-]+).([a-z.]{2,6})([\\/\\w .-])*\\/?$/`*` |\n|         IP 地址         | `/((2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?).){3}(2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?)/` `/^(?:(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?).){3}(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?)$/` |\n|        HTML 标签        | `/^<([a-z]+)([^<]+)(?:>(.*)<\\/\\1>\\|\\s+\\/>)$/`                 |\n|      删除代码\\注释      | `(?<!http:\\|\\S)//.$`                                           |\n| Unicode编码中的汉字范围 | `/^[\\u2E80-\\u9FFF]+$/`                                         |","slug":"ManualOfRegex","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2u00j3safk1jzish17","content":"<h1 id=\"表达式全集\"><a href=\"#表达式全集\" class=\"headerlink\" title=\"表达式全集\"></a>表达式全集</h1><p>由于hexo的markdown的引擎太烂了  这里的格式会乱点<br>有时间在换一个好一点的引擎   太乱了!!<br>移步这里<a href=\"http://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">格式好看的正则表达式手册</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:left\">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\\</code>”而“<code>(</code>”则匹配“<code>(</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\\n</code>”或“<code>\\r</code>”之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\\n</code>”或“<code>\\r</code>”之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。例如，zo能匹配“<code>z</code>”以及“<code>zoo</code>”。<em>等价于{0,}。</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n}</td>\n<td style=\"text-align:left\">n是一个非负整数。匹配确定的n次。例如，“<code>o{2}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,}</td>\n<td style=\"text-align:left\">n是一个非负整数。至少匹配n次。例如，“<code>o{2,}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o{1,}</code>”等价于“<code>o+</code>”。“<code>o{0,}</code>”则等价于“<code>o</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,m}</td>\n<td style=\"text-align:left\">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“<code>o{1,3}</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o{0,1}</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">匹配除“<code>\\`</code>n<code>”之外的任何单个字符。要匹配包括“</code>`<code>n</code>”在内的任何字符，请使用像“`(.</td>\n<td>\\n)`”的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(pattern)</td>\n<td style=\"text-align:left\">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>(</code>”或“<code>)</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?:pattern)</td>\n<td style=\"text-align:left\">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td>\n<td>)<code>”来组合一个模式的各个部分是很有用。例如“</code>industr(?:y</td>\n<td>ies)<code>”就是一个比“</code>industry</td>\n<td>industries`”更简略的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?=pattern)</td>\n<td style=\"text-align:left\">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)<code>”能匹配“</code>Windows2000<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows3.1<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?!pattern)</td>\n<td style=\"text-align:left\">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)<code>”能匹配“</code>Windows3.1<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows2000<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;=pattern)</td>\n<td style=\"text-align:left\">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)Windows<code>”能匹配“</code>2000Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>3.1Windows<code>”中的“</code>Windows`”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;!pattern)</td>\n<td style=\"text-align:left\">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)Windows<code>”能匹配“</code>3.1Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>2000Windows<code>”中的“</code>Windows`”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x\\</td>\n<td style=\"text-align:left\">y</td>\n<td>匹配x或y。例如，“`z</td>\n<td>food<code>”能匹配“</code>z<code>”或“</code>food<code>”。“</code>(z</td>\n<td>f)ood<code>”则匹配“</code>zood<code>”或“</code>food`”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[xyz]</td>\n<td style=\"text-align:left\">字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^xyz]</td>\n<td style=\"text-align:left\">负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[a-z]</td>\n<td style=\"text-align:left\">字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^a-z]</td>\n<td style=\"text-align:left\">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:left\">匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界。“<code>er\\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\cx</td>\n<td style=\"text-align:left\">匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:left\">匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:left\">匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\f</td>\n<td style=\"text-align:left\">匹配一个换页符。等价于\\x0c和\\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:left\">匹配一个换行符。等价于\\x0a和\\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\r</td>\n<td style=\"text-align:left\">匹配一个回车符。等价于\\x0d和\\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:left\">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:left\">匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\t</td>\n<td style=\"text-align:left\">匹配一个制表符。等价于\\x09和\\cI。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\v</td>\n<td style=\"text-align:left\">匹配一个垂直制表符。等价于\\x0b和\\cK。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:left\">匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9*]*</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:left\">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9]</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\xn</td>\n<td style=\"text-align:left\">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\\x41</code>”匹配“<code>A</code>”。“<code>\\x041</code>”则等价于“<code>\\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\num</td>\n<td style=\"text-align:left\">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\\1</code>”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\nm</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\nml</td>\n<td style=\"text-align:left\">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\un</td>\n<td style=\"text-align:left\">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h1><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户名</td>\n<td><code>/^[a-z0-9*-]{3,16}$/</code></td>\n</tr>\n<tr>\n<td>密码</td>\n<td><code>/^[a-z0-9-]{6,18}$/</code></td>\n</tr>\n<tr>\n<td>十六进制值</td>\n<td><code>/^#?([a-f0-9]{6}\\&amp;#124;[a-f0-9]{3})$/</code></td>\n</tr>\n<tr>\n<td>电子邮箱</td>\n<td><code>/^([a-z0-9*.-]+)@([\\da-z.-]+).([a-z.]{2,6})$/</code> <code>/^[a-z\\d]+(.[a-z\\d]+)@(\\da-z?)+(.{1,2}[a-z]+)+$/</code>*`</td>\n</tr>\n<tr>\n<td>URL</td>\n<td><code>/^(https?:\\/\\/)?([\\da-z.-]+).([a-z.]{2,6})([\\/\\w .-])*\\/?$/</code>*`</td>\n</tr>\n<tr>\n<td>IP 地址</td>\n<td>`/((2[0-4]\\d\\</td>\n<td>25[0-5]\\</td>\n<td>[01]?\\d\\d?).){3}(2[0-4]\\d\\</td>\n<td>25[0-5]\\</td>\n<td>[01]?\\d\\d?)/<code></code>/^(?:(?:25[0-5]\\</td>\n<td>2[0-4][0-9]\\</td>\n<td>[01]?[0-9][0-9]?).){3}(?:25[0-5]\\</td>\n<td>2[0-4][0-9]\\</td>\n<td>[01]?[0-9][0-9]?)$/`</td>\n</tr>\n<tr>\n<td>HTML 标签</td>\n<td>`/^&lt;([a-z]+)([^&lt;]+)(?:&gt;(.*)&lt;\\/\\1&gt;\\</td>\n<td>\\s+\\/&gt;)$/`</td>\n</tr>\n<tr>\n<td>删除代码\\注释</td>\n<td>`(?&lt;!http:\\</td>\n<td>\\S)//.$`</td>\n</tr>\n<tr>\n<td>Unicode编码中的汉字范围</td>\n<td><code>/^[\\u2E80-\\u9FFF]+$/</code></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"表达式全集\"><a href=\"#表达式全集\" class=\"headerlink\" title=\"表达式全集\"></a>表达式全集</h1><p>由于hexo的markdown的引擎太烂了  这里的格式会乱点<br>有时间在换一个好一点的引擎   太乱了!!<br>移步这里<a href=\"http://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">格式好看的正则表达式手册</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:left\">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\\</code>”而“<code>(</code>”则匹配“<code>(</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\\n</code>”或“<code>\\r</code>”之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\\n</code>”或“<code>\\r</code>”之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。例如，zo能匹配“<code>z</code>”以及“<code>zoo</code>”。<em>等价于{0,}。</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n}</td>\n<td style=\"text-align:left\">n是一个非负整数。匹配确定的n次。例如，“<code>o{2}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,}</td>\n<td style=\"text-align:left\">n是一个非负整数。至少匹配n次。例如，“<code>o{2,}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o{1,}</code>”等价于“<code>o+</code>”。“<code>o{0,}</code>”则等价于“<code>o</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,m}</td>\n<td style=\"text-align:left\">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“<code>o{1,3}</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o{0,1}</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">匹配除“<code>\\`</code>n<code>”之外的任何单个字符。要匹配包括“</code>`<code>n</code>”在内的任何字符，请使用像“`(.</td>\n<td>\\n)`”的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(pattern)</td>\n<td style=\"text-align:left\">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>(</code>”或“<code>)</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?:pattern)</td>\n<td style=\"text-align:left\">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td>\n<td>)<code>”来组合一个模式的各个部分是很有用。例如“</code>industr(?:y</td>\n<td>ies)<code>”就是一个比“</code>industry</td>\n<td>industries`”更简略的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?=pattern)</td>\n<td style=\"text-align:left\">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)<code>”能匹配“</code>Windows2000<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows3.1<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?!pattern)</td>\n<td style=\"text-align:left\">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)<code>”能匹配“</code>Windows3.1<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows2000<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;=pattern)</td>\n<td style=\"text-align:left\">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)Windows<code>”能匹配“</code>2000Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>3.1Windows<code>”中的“</code>Windows`”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;!pattern)</td>\n<td style=\"text-align:left\">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td>\n<td>98</td>\n<td>NT</td>\n<td>2000)Windows<code>”能匹配“</code>3.1Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>2000Windows<code>”中的“</code>Windows`”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x\\</td>\n<td style=\"text-align:left\">y</td>\n<td>匹配x或y。例如，“`z</td>\n<td>food<code>”能匹配“</code>z<code>”或“</code>food<code>”。“</code>(z</td>\n<td>f)ood<code>”则匹配“</code>zood<code>”或“</code>food`”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[xyz]</td>\n<td style=\"text-align:left\">字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^xyz]</td>\n<td style=\"text-align:left\">负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[a-z]</td>\n<td style=\"text-align:left\">字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^a-z]</td>\n<td style=\"text-align:left\">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:left\">匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界。“<code>er\\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\cx</td>\n<td style=\"text-align:left\">匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:left\">匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:left\">匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\f</td>\n<td style=\"text-align:left\">匹配一个换页符。等价于\\x0c和\\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:left\">匹配一个换行符。等价于\\x0a和\\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\r</td>\n<td style=\"text-align:left\">匹配一个回车符。等价于\\x0d和\\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:left\">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:left\">匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\t</td>\n<td style=\"text-align:left\">匹配一个制表符。等价于\\x09和\\cI。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\v</td>\n<td style=\"text-align:left\">匹配一个垂直制表符。等价于\\x0b和\\cK。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:left\">匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9*]*</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:left\">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9]</code>”。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\xn</td>\n<td style=\"text-align:left\">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\\x41</code>”匹配“<code>A</code>”。“<code>\\x041</code>”则等价于“<code>\\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\num</td>\n<td style=\"text-align:left\">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\\1</code>”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\nm</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\nml</td>\n<td style=\"text-align:left\">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\un</td>\n<td style=\"text-align:left\">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h1><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户名</td>\n<td><code>/^[a-z0-9*-]{3,16}$/</code></td>\n</tr>\n<tr>\n<td>密码</td>\n<td><code>/^[a-z0-9-]{6,18}$/</code></td>\n</tr>\n<tr>\n<td>十六进制值</td>\n<td><code>/^#?([a-f0-9]{6}\\&amp;#124;[a-f0-9]{3})$/</code></td>\n</tr>\n<tr>\n<td>电子邮箱</td>\n<td><code>/^([a-z0-9*.-]+)@([\\da-z.-]+).([a-z.]{2,6})$/</code> <code>/^[a-z\\d]+(.[a-z\\d]+)@(\\da-z?)+(.{1,2}[a-z]+)+$/</code>*`</td>\n</tr>\n<tr>\n<td>URL</td>\n<td><code>/^(https?:\\/\\/)?([\\da-z.-]+).([a-z.]{2,6})([\\/\\w .-])*\\/?$/</code>*`</td>\n</tr>\n<tr>\n<td>IP 地址</td>\n<td>`/((2[0-4]\\d\\</td>\n<td>25[0-5]\\</td>\n<td>[01]?\\d\\d?).){3}(2[0-4]\\d\\</td>\n<td>25[0-5]\\</td>\n<td>[01]?\\d\\d?)/<code></code>/^(?:(?:25[0-5]\\</td>\n<td>2[0-4][0-9]\\</td>\n<td>[01]?[0-9][0-9]?).){3}(?:25[0-5]\\</td>\n<td>2[0-4][0-9]\\</td>\n<td>[01]?[0-9][0-9]?)$/`</td>\n</tr>\n<tr>\n<td>HTML 标签</td>\n<td>`/^&lt;([a-z]+)([^&lt;]+)(?:&gt;(.*)&lt;\\/\\1&gt;\\</td>\n<td>\\s+\\/&gt;)$/`</td>\n</tr>\n<tr>\n<td>删除代码\\注释</td>\n<td>`(?&lt;!http:\\</td>\n<td>\\S)//.$`</td>\n</tr>\n<tr>\n<td>Unicode编码中的汉字范围</td>\n<td><code>/^[\\u2E80-\\u9FFF]+$/</code></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Python学习笔记","date":"2018-03-07T12:12:11.000Z","_content":"\n抄写了两个Spider,发现对于Python基础的掌握实在是差劲的可以.\n\n于是乎 过来补补基础\n\n一直在[Hackerrank](https://www.hackerrank.com/)上面做Python的题目.知识点覆盖挺全面的,推荐一波.\n\n# Basic\n\n## 乱七八糟小技巧\n\n```python\n>>> n,m,*l = ['1','2']\n>>> print(n,m,l)\n1 2 []\n```\n\n## 基本数据类型\n\n### .\n\n#### set\n\n集合是一个无序的，不重复的数据组合，它的主要作用如下：\n去重，把一个列表变成集合，就自动去重了\n关系测试，测试两组数据之前的交集、差集、并集等关系\n\n```python\n\nlist_1 = [1,3,4,7,3,6,7,9]\n#去重\nlist_1 = set(list_1)\n\nlist_2 = set([2,6,0,66,22,8,4])\nlist_3 = set([1,3,7])\nprint(list_1)\nprint(list_2)\nprint(list_3)\nprint(\"---------------------------\")\n\n#关系测试\n#交集(两个列表里面都有的值，这里是4、6)：\nprint(list_1.intersection(list_2))\n\n#并集（把两个列别合并起来，然后去重）：\nprint(list_1.union(list_2))\n\n#差集（把list_1里面有的而list_2里面没有的取出来）：\nprint(list_1.difference(list_2))\n#对称差集（两个列表里面，互相没有的取出来，也就是只去掉那些互相都有的值）\nprint(list_1.symmetric_difference(list_2))\n\n#子集（判断list_1是否包含了list_3里面的所有值）\nprint(list_3.issubset(list_1))\n#父集（判断list_1是否为list_3的父集）\nprint(list_1.issuperset(list_3))\n\n#无交集（判断list_3和list_4是否完全没有任何交集）\nlist_4 = set([5,6,8])\nprint(list_3.isdisjoint(list_4))\n\n#-----------------------关系测试的另一种写法：\n'''\ns = set([3,5,9,10])      #创建一个数值集合\nt = set(\"Hello\")         #创建一个唯一字符的集合\n\na = t | s          # t 和 s的并集\nb = t & s          # t 和 s的交集\nc = t – s          # 求差集（项在t中，但不在s中）\nd = t ^ s          # 对称差集（项在t或s中，但不会同时出现在二者中）\n\n基本操作：\nt.add('x')            # 添加一项\ns.update([10,37,42])  # 在s中添加多项\n\n使用remove()可以删除一项：\n\nt.remove('H')   #有就删除，没有就报错\nt.pop() #随机弹出一个\nt.discard('H')  #有就删除，没有也不会报错\n\nlen(s)\nset 的长度\n\nx in s\n测试 x 是否是 s 的成员\n\nx not in s\n测试 x 是否不是 s 的成员\n\ns.issubset(t)\ns <= t\n测试是否 s 中的每一个元素都在 t 中\n\ns.issuperset(t)\ns >= t\n测试是否 t 中的每一个元素都在 s 中\n\ns.union(t)\ns | t\n返回一个新的 set 包含 s 和 t 中的每一个元素\n\ns.intersection(t)\ns & t\n返回一个新的 set 包含 s 和 t 中的公共元素\n\ns.difference(t)\ns - t\n返回一个新的 set 包含 s 中有但是 t 中没有的元素\n\ns.symmetric_difference(t)\ns ^ t\n返回一个新的 set 包含 s 和 t 中不重复的元素\n\ns.copy()\n返回 set “s”的一个浅复制\n```\n\n## 排序\n\n### .\n\n#### 对字符定义优先级\n\n将需要排序的字符集放到一个字符串中\n在这个字符串中越靠前的字符排序后越靠前\n\n```python\norder = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1357902468'\nprint(*sorted(input(), key=order.index), sep='')\n```\n\n\n#### 关键字排序\n\n```python\nN, M = map(int, input().split())    # Ｎ行 Ｍ列\nrows = [input() for _ in range(N)]  # 一行 为一组数据\nK = int(input()) # 以第几为关键字\n\nfor row in sorted(rows, key=lambda x: int(x.split()[K])):# lambda 匿名函数\n    print(row)\n\n```\n\n## 字符串\n\n### .\n\n#### 26字母\n\n```Python\nimport string\nalpha = string.ascii_lowercase\n```\n\n#### 字符串反转\n\n```Python\n>>>　s = 'abcde'\n>>>　print(s[::-1])\nedcba\n```\n\n#### 字符串格式化输出\n\n个人喜欢最新的`'{}'.format()`的形式,不仅写起来更方便一些,还有旧方法不能实现的操作.感觉以后可能完全取缔旧的方法.\n\n[.format的介绍(与旧方法的对比)](https://pyformat.info/)\n\n\n输出一行 '-'\n```Python\n'{:-{align}{width}}'.format( '',align='>', width = 5)\n```\n输出\n```\n-----\n```\n\n## 函数(function)\n\n可更改(mutable)与不可更改(immutable)对象\n在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。\n\n- 不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。\n- 可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。\n\npython 函数的参数传递：\n\n- 不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。\n- 可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响\n\npython 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。\n\n\n### .\n\n#### eval()\n\neval(string) 对于一个字符串，相当与**运行**这个字符串所代表的python代码\n\n```python\n>>> x = 1\n>>> eval('x+1')\n>>> print(eval('x+1'))\n2\n```\n\n\n# 各种库\n\n导入库\n```python\nimport 库 #使用时需要 `库.函数()`\nfrom 库 import 函数 # 使用时直接 `函数()` 即可\n```\n\n## collections\n\n```python\nimport collections\n```\n\n### Counter\n\n计数用的函数\n\n###  defaultdict\n\n可以简单理解为一个**map**,\n\n```python\na = defaultdict([Type of value])\n------\na['key'] type is [Type of value]\n```\n\n### deque\n\n```python\n>>> from collections import deque\n>>> d = deque()\n>>> d.append(1)\n>>> print d\ndeque([1])\n>>> d.appendleft(2)\n>>> print d\ndeque([2, 1])\n>>> d.clear()\n>>> print d\ndeque([])\n>>> d.extend('1')\n>>> print d\ndeque(['1'])\n>>> d.extendleft('234')\n>>> print d\ndeque(['4', '3', '2', '1'])\n>>> d.count('1')\n1\n>>> d.pop()\n'1'\n>>> print d\ndeque(['4', '3', '2'])\n>>> d.popleft()\n'4'\n>>> print d\ndeque(['3', '2'])\n>>> d.extend('7896')\n>>> print d\ndeque(['3', '2', '7', '8', '9', '6'])\n>>> d.remove('2')\n>>> print d\ndeque(['3', '7', '8', '9', '6'])\n>>> d.reverse()\n>>> print d\ndeque(['6', '9', '8', '7', '3'])\n>>> d.rotate(3)\n>>> print d\ndeque(['8', '7', '3', '6', '9'])\n```\n\n# 自省\n\n## .\n\n### .\n\n#### getattr()\n\n```python\n'''\ngetattr(object, name[, default]) -> value\n其中 name 可以是字符串.\n这样的话 相当于 name可以用字符串代替 就不用一大堆`if elif else`了\n'''\ngetattr(object, name[, default]) -> value\n<==>\nobject.name(value)\n```","source":"_posts/NotesOfPython.md","raw":"---\ntitle: Python学习笔记\ndate: 2018-03-07 20:12:11\ntags:\n---\n\n抄写了两个Spider,发现对于Python基础的掌握实在是差劲的可以.\n\n于是乎 过来补补基础\n\n一直在[Hackerrank](https://www.hackerrank.com/)上面做Python的题目.知识点覆盖挺全面的,推荐一波.\n\n# Basic\n\n## 乱七八糟小技巧\n\n```python\n>>> n,m,*l = ['1','2']\n>>> print(n,m,l)\n1 2 []\n```\n\n## 基本数据类型\n\n### .\n\n#### set\n\n集合是一个无序的，不重复的数据组合，它的主要作用如下：\n去重，把一个列表变成集合，就自动去重了\n关系测试，测试两组数据之前的交集、差集、并集等关系\n\n```python\n\nlist_1 = [1,3,4,7,3,6,7,9]\n#去重\nlist_1 = set(list_1)\n\nlist_2 = set([2,6,0,66,22,8,4])\nlist_3 = set([1,3,7])\nprint(list_1)\nprint(list_2)\nprint(list_3)\nprint(\"---------------------------\")\n\n#关系测试\n#交集(两个列表里面都有的值，这里是4、6)：\nprint(list_1.intersection(list_2))\n\n#并集（把两个列别合并起来，然后去重）：\nprint(list_1.union(list_2))\n\n#差集（把list_1里面有的而list_2里面没有的取出来）：\nprint(list_1.difference(list_2))\n#对称差集（两个列表里面，互相没有的取出来，也就是只去掉那些互相都有的值）\nprint(list_1.symmetric_difference(list_2))\n\n#子集（判断list_1是否包含了list_3里面的所有值）\nprint(list_3.issubset(list_1))\n#父集（判断list_1是否为list_3的父集）\nprint(list_1.issuperset(list_3))\n\n#无交集（判断list_3和list_4是否完全没有任何交集）\nlist_4 = set([5,6,8])\nprint(list_3.isdisjoint(list_4))\n\n#-----------------------关系测试的另一种写法：\n'''\ns = set([3,5,9,10])      #创建一个数值集合\nt = set(\"Hello\")         #创建一个唯一字符的集合\n\na = t | s          # t 和 s的并集\nb = t & s          # t 和 s的交集\nc = t – s          # 求差集（项在t中，但不在s中）\nd = t ^ s          # 对称差集（项在t或s中，但不会同时出现在二者中）\n\n基本操作：\nt.add('x')            # 添加一项\ns.update([10,37,42])  # 在s中添加多项\n\n使用remove()可以删除一项：\n\nt.remove('H')   #有就删除，没有就报错\nt.pop() #随机弹出一个\nt.discard('H')  #有就删除，没有也不会报错\n\nlen(s)\nset 的长度\n\nx in s\n测试 x 是否是 s 的成员\n\nx not in s\n测试 x 是否不是 s 的成员\n\ns.issubset(t)\ns <= t\n测试是否 s 中的每一个元素都在 t 中\n\ns.issuperset(t)\ns >= t\n测试是否 t 中的每一个元素都在 s 中\n\ns.union(t)\ns | t\n返回一个新的 set 包含 s 和 t 中的每一个元素\n\ns.intersection(t)\ns & t\n返回一个新的 set 包含 s 和 t 中的公共元素\n\ns.difference(t)\ns - t\n返回一个新的 set 包含 s 中有但是 t 中没有的元素\n\ns.symmetric_difference(t)\ns ^ t\n返回一个新的 set 包含 s 和 t 中不重复的元素\n\ns.copy()\n返回 set “s”的一个浅复制\n```\n\n## 排序\n\n### .\n\n#### 对字符定义优先级\n\n将需要排序的字符集放到一个字符串中\n在这个字符串中越靠前的字符排序后越靠前\n\n```python\norder = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1357902468'\nprint(*sorted(input(), key=order.index), sep='')\n```\n\n\n#### 关键字排序\n\n```python\nN, M = map(int, input().split())    # Ｎ行 Ｍ列\nrows = [input() for _ in range(N)]  # 一行 为一组数据\nK = int(input()) # 以第几为关键字\n\nfor row in sorted(rows, key=lambda x: int(x.split()[K])):# lambda 匿名函数\n    print(row)\n\n```\n\n## 字符串\n\n### .\n\n#### 26字母\n\n```Python\nimport string\nalpha = string.ascii_lowercase\n```\n\n#### 字符串反转\n\n```Python\n>>>　s = 'abcde'\n>>>　print(s[::-1])\nedcba\n```\n\n#### 字符串格式化输出\n\n个人喜欢最新的`'{}'.format()`的形式,不仅写起来更方便一些,还有旧方法不能实现的操作.感觉以后可能完全取缔旧的方法.\n\n[.format的介绍(与旧方法的对比)](https://pyformat.info/)\n\n\n输出一行 '-'\n```Python\n'{:-{align}{width}}'.format( '',align='>', width = 5)\n```\n输出\n```\n-----\n```\n\n## 函数(function)\n\n可更改(mutable)与不可更改(immutable)对象\n在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。\n\n- 不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。\n- 可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。\n\npython 函数的参数传递：\n\n- 不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。\n- 可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响\n\npython 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。\n\n\n### .\n\n#### eval()\n\neval(string) 对于一个字符串，相当与**运行**这个字符串所代表的python代码\n\n```python\n>>> x = 1\n>>> eval('x+1')\n>>> print(eval('x+1'))\n2\n```\n\n\n# 各种库\n\n导入库\n```python\nimport 库 #使用时需要 `库.函数()`\nfrom 库 import 函数 # 使用时直接 `函数()` 即可\n```\n\n## collections\n\n```python\nimport collections\n```\n\n### Counter\n\n计数用的函数\n\n###  defaultdict\n\n可以简单理解为一个**map**,\n\n```python\na = defaultdict([Type of value])\n------\na['key'] type is [Type of value]\n```\n\n### deque\n\n```python\n>>> from collections import deque\n>>> d = deque()\n>>> d.append(1)\n>>> print d\ndeque([1])\n>>> d.appendleft(2)\n>>> print d\ndeque([2, 1])\n>>> d.clear()\n>>> print d\ndeque([])\n>>> d.extend('1')\n>>> print d\ndeque(['1'])\n>>> d.extendleft('234')\n>>> print d\ndeque(['4', '3', '2', '1'])\n>>> d.count('1')\n1\n>>> d.pop()\n'1'\n>>> print d\ndeque(['4', '3', '2'])\n>>> d.popleft()\n'4'\n>>> print d\ndeque(['3', '2'])\n>>> d.extend('7896')\n>>> print d\ndeque(['3', '2', '7', '8', '9', '6'])\n>>> d.remove('2')\n>>> print d\ndeque(['3', '7', '8', '9', '6'])\n>>> d.reverse()\n>>> print d\ndeque(['6', '9', '8', '7', '3'])\n>>> d.rotate(3)\n>>> print d\ndeque(['8', '7', '3', '6', '9'])\n```\n\n# 自省\n\n## .\n\n### .\n\n#### getattr()\n\n```python\n'''\ngetattr(object, name[, default]) -> value\n其中 name 可以是字符串.\n这样的话 相当于 name可以用字符串代替 就不用一大堆`if elif else`了\n'''\ngetattr(object, name[, default]) -> value\n<==>\nobject.name(value)\n```","slug":"NotesOfPython","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2v00j4safkwxttdujy","content":"<p>抄写了两个Spider,发现对于Python基础的掌握实在是差劲的可以.</p>\n<p>于是乎 过来补补基础</p>\n<p>一直在<a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">Hackerrank</a>上面做Python的题目.知识点覆盖挺全面的,推荐一波.</p>\n<h1 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h1><h2 id=\"乱七八糟小技巧\"><a href=\"#乱七八糟小技巧\" class=\"headerlink\" title=\"乱七八糟小技巧\"></a>乱七八糟小技巧</h2><pre><code class=\"python\">&gt;&gt;&gt; n,m,*l = [&#39;1&#39;,&#39;2&#39;]\n&gt;&gt;&gt; print(n,m,l)\n1 2 []\n</code></pre>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h4><p>集合是一个无序的，不重复的数据组合，它的主要作用如下：<br>去重，把一个列表变成集合，就自动去重了<br>关系测试，测试两组数据之前的交集、差集、并集等关系</p>\n<pre><code class=\"python\">\nlist_1 = [1,3,4,7,3,6,7,9]\n#去重\nlist_1 = set(list_1)\n\nlist_2 = set([2,6,0,66,22,8,4])\nlist_3 = set([1,3,7])\nprint(list_1)\nprint(list_2)\nprint(list_3)\nprint(&quot;---------------------------&quot;)\n\n#关系测试\n#交集(两个列表里面都有的值，这里是4、6)：\nprint(list_1.intersection(list_2))\n\n#并集（把两个列别合并起来，然后去重）：\nprint(list_1.union(list_2))\n\n#差集（把list_1里面有的而list_2里面没有的取出来）：\nprint(list_1.difference(list_2))\n#对称差集（两个列表里面，互相没有的取出来，也就是只去掉那些互相都有的值）\nprint(list_1.symmetric_difference(list_2))\n\n#子集（判断list_1是否包含了list_3里面的所有值）\nprint(list_3.issubset(list_1))\n#父集（判断list_1是否为list_3的父集）\nprint(list_1.issuperset(list_3))\n\n#无交集（判断list_3和list_4是否完全没有任何交集）\nlist_4 = set([5,6,8])\nprint(list_3.isdisjoint(list_4))\n\n#-----------------------关系测试的另一种写法：\n&#39;&#39;&#39;\ns = set([3,5,9,10])      #创建一个数值集合\nt = set(&quot;Hello&quot;)         #创建一个唯一字符的集合\n\na = t | s          # t 和 s的并集\nb = t &amp; s          # t 和 s的交集\nc = t – s          # 求差集（项在t中，但不在s中）\nd = t ^ s          # 对称差集（项在t或s中，但不会同时出现在二者中）\n\n基本操作：\nt.add(&#39;x&#39;)            # 添加一项\ns.update([10,37,42])  # 在s中添加多项\n\n使用remove()可以删除一项：\n\nt.remove(&#39;H&#39;)   #有就删除，没有就报错\nt.pop() #随机弹出一个\nt.discard(&#39;H&#39;)  #有就删除，没有也不会报错\n\nlen(s)\nset 的长度\n\nx in s\n测试 x 是否是 s 的成员\n\nx not in s\n测试 x 是否不是 s 的成员\n\ns.issubset(t)\ns &lt;= t\n测试是否 s 中的每一个元素都在 t 中\n\ns.issuperset(t)\ns &gt;= t\n测试是否 t 中的每一个元素都在 s 中\n\ns.union(t)\ns | t\n返回一个新的 set 包含 s 和 t 中的每一个元素\n\ns.intersection(t)\ns &amp; t\n返回一个新的 set 包含 s 和 t 中的公共元素\n\ns.difference(t)\ns - t\n返回一个新的 set 包含 s 中有但是 t 中没有的元素\n\ns.symmetric_difference(t)\ns ^ t\n返回一个新的 set 包含 s 和 t 中不重复的元素\n\ns.copy()\n返回 set “s”的一个浅复制\n</code></pre>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"对字符定义优先级\"><a href=\"#对字符定义优先级\" class=\"headerlink\" title=\"对字符定义优先级\"></a>对字符定义优先级</h4><p>将需要排序的字符集放到一个字符串中<br>在这个字符串中越靠前的字符排序后越靠前</p>\n<pre><code class=\"python\">order = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1357902468&#39;\nprint(*sorted(input(), key=order.index), sep=&#39;&#39;)\n</code></pre>\n<h4 id=\"关键字排序\"><a href=\"#关键字排序\" class=\"headerlink\" title=\"关键字排序\"></a>关键字排序</h4><pre><code class=\"python\">N, M = map(int, input().split())    # Ｎ行 Ｍ列\nrows = [input() for _ in range(N)]  # 一行 为一组数据\nK = int(input()) # 以第几为关键字\n\nfor row in sorted(rows, key=lambda x: int(x.split()[K])):# lambda 匿名函数\n    print(row)\n\n</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"26字母\"><a href=\"#26字母\" class=\"headerlink\" title=\"26字母\"></a>26字母</h4><pre><code class=\"Python\">import string\nalpha = string.ascii_lowercase\n</code></pre>\n<h4 id=\"字符串反转\"><a href=\"#字符串反转\" class=\"headerlink\" title=\"字符串反转\"></a>字符串反转</h4><pre><code class=\"Python\">&gt;&gt;&gt;　s = &#39;abcde&#39;\n&gt;&gt;&gt;　print(s[::-1])\nedcba\n</code></pre>\n<h4 id=\"字符串格式化输出\"><a href=\"#字符串格式化输出\" class=\"headerlink\" title=\"字符串格式化输出\"></a>字符串格式化输出</h4><p>个人喜欢最新的<code>&#39;{}&#39;.format()</code>的形式,不仅写起来更方便一些,还有旧方法不能实现的操作.感觉以后可能完全取缔旧的方法.</p>\n<p><a href=\"https://pyformat.info/\" target=\"_blank\" rel=\"noopener\">.format的介绍(与旧方法的对比)</a></p>\n<p>输出一行 ‘-‘</p>\n<pre><code class=\"Python\">&#39;{:-{align}{width}}&#39;.format( &#39;&#39;,align=&#39;&gt;&#39;, width = 5)\n</code></pre>\n<p>输出</p>\n<pre><code>-----\n</code></pre><h2 id=\"函数-function\"><a href=\"#函数-function\" class=\"headerlink\" title=\"函数(function)\"></a>函数(function)</h2><p>可更改(mutable)与不可更改(immutable)对象<br>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>\n<ul>\n<li>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li>\n<li>可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>\n</ul>\n<p>python 函数的参数传递：</p>\n<ul>\n<li>不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li>\n<li>可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li>\n</ul>\n<p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>\n<h3 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a>eval()</h4><p>eval(string) 对于一个字符串，相当与<strong>运行</strong>这个字符串所代表的python代码</p>\n<pre><code class=\"python\">&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; eval(&#39;x+1&#39;)\n&gt;&gt;&gt; print(eval(&#39;x+1&#39;))\n2\n</code></pre>\n<h1 id=\"各种库\"><a href=\"#各种库\" class=\"headerlink\" title=\"各种库\"></a>各种库</h1><p>导入库</p>\n<pre><code class=\"python\">import 库 #使用时需要 `库.函数()`\nfrom 库 import 函数 # 使用时直接 `函数()` 即可\n</code></pre>\n<h2 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h2><pre><code class=\"python\">import collections\n</code></pre>\n<h3 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h3><p>计数用的函数</p>\n<h3 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h3><p>可以简单理解为一个<strong>map</strong>,</p>\n<pre><code class=\"python\">a = defaultdict([Type of value])\n------\na[&#39;key&#39;] type is [Type of value]\n</code></pre>\n<h3 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h3><pre><code class=\"python\">&gt;&gt;&gt; from collections import deque\n&gt;&gt;&gt; d = deque()\n&gt;&gt;&gt; d.append(1)\n&gt;&gt;&gt; print d\ndeque([1])\n&gt;&gt;&gt; d.appendleft(2)\n&gt;&gt;&gt; print d\ndeque([2, 1])\n&gt;&gt;&gt; d.clear()\n&gt;&gt;&gt; print d\ndeque([])\n&gt;&gt;&gt; d.extend(&#39;1&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;1&#39;])\n&gt;&gt;&gt; d.extendleft(&#39;234&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;])\n&gt;&gt;&gt; d.count(&#39;1&#39;)\n1\n&gt;&gt;&gt; d.pop()\n&#39;1&#39;\n&gt;&gt;&gt; print d\ndeque([&#39;4&#39;, &#39;3&#39;, &#39;2&#39;])\n&gt;&gt;&gt; d.popleft()\n&#39;4&#39;\n&gt;&gt;&gt; print d\ndeque([&#39;3&#39;, &#39;2&#39;])\n&gt;&gt;&gt; d.extend(&#39;7896&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;3&#39;, &#39;2&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;6&#39;])\n&gt;&gt;&gt; d.remove(&#39;2&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;3&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;6&#39;])\n&gt;&gt;&gt; d.reverse()\n&gt;&gt;&gt; print d\ndeque([&#39;6&#39;, &#39;9&#39;, &#39;8&#39;, &#39;7&#39;, &#39;3&#39;])\n&gt;&gt;&gt; d.rotate(3)\n&gt;&gt;&gt; print d\ndeque([&#39;8&#39;, &#39;7&#39;, &#39;3&#39;, &#39;6&#39;, &#39;9&#39;])\n</code></pre>\n<h1 id=\"自省\"><a href=\"#自省\" class=\"headerlink\" title=\"自省\"></a>自省</h1><h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\".\"></a>.</h2><h3 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"getattr()\"></a>getattr()</h4><pre><code class=\"python\">&#39;&#39;&#39;\ngetattr(object, name[, default]) -&gt; value\n其中 name 可以是字符串.\n这样的话 相当于 name可以用字符串代替 就不用一大堆`if elif else`了\n&#39;&#39;&#39;\ngetattr(object, name[, default]) -&gt; value\n&lt;==&gt;\nobject.name(value)\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>抄写了两个Spider,发现对于Python基础的掌握实在是差劲的可以.</p>\n<p>于是乎 过来补补基础</p>\n<p>一直在<a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">Hackerrank</a>上面做Python的题目.知识点覆盖挺全面的,推荐一波.</p>\n<h1 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h1><h2 id=\"乱七八糟小技巧\"><a href=\"#乱七八糟小技巧\" class=\"headerlink\" title=\"乱七八糟小技巧\"></a>乱七八糟小技巧</h2><pre><code class=\"python\">&gt;&gt;&gt; n,m,*l = [&#39;1&#39;,&#39;2&#39;]\n&gt;&gt;&gt; print(n,m,l)\n1 2 []\n</code></pre>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h4><p>集合是一个无序的，不重复的数据组合，它的主要作用如下：<br>去重，把一个列表变成集合，就自动去重了<br>关系测试，测试两组数据之前的交集、差集、并集等关系</p>\n<pre><code class=\"python\">\nlist_1 = [1,3,4,7,3,6,7,9]\n#去重\nlist_1 = set(list_1)\n\nlist_2 = set([2,6,0,66,22,8,4])\nlist_3 = set([1,3,7])\nprint(list_1)\nprint(list_2)\nprint(list_3)\nprint(&quot;---------------------------&quot;)\n\n#关系测试\n#交集(两个列表里面都有的值，这里是4、6)：\nprint(list_1.intersection(list_2))\n\n#并集（把两个列别合并起来，然后去重）：\nprint(list_1.union(list_2))\n\n#差集（把list_1里面有的而list_2里面没有的取出来）：\nprint(list_1.difference(list_2))\n#对称差集（两个列表里面，互相没有的取出来，也就是只去掉那些互相都有的值）\nprint(list_1.symmetric_difference(list_2))\n\n#子集（判断list_1是否包含了list_3里面的所有值）\nprint(list_3.issubset(list_1))\n#父集（判断list_1是否为list_3的父集）\nprint(list_1.issuperset(list_3))\n\n#无交集（判断list_3和list_4是否完全没有任何交集）\nlist_4 = set([5,6,8])\nprint(list_3.isdisjoint(list_4))\n\n#-----------------------关系测试的另一种写法：\n&#39;&#39;&#39;\ns = set([3,5,9,10])      #创建一个数值集合\nt = set(&quot;Hello&quot;)         #创建一个唯一字符的集合\n\na = t | s          # t 和 s的并集\nb = t &amp; s          # t 和 s的交集\nc = t – s          # 求差集（项在t中，但不在s中）\nd = t ^ s          # 对称差集（项在t或s中，但不会同时出现在二者中）\n\n基本操作：\nt.add(&#39;x&#39;)            # 添加一项\ns.update([10,37,42])  # 在s中添加多项\n\n使用remove()可以删除一项：\n\nt.remove(&#39;H&#39;)   #有就删除，没有就报错\nt.pop() #随机弹出一个\nt.discard(&#39;H&#39;)  #有就删除，没有也不会报错\n\nlen(s)\nset 的长度\n\nx in s\n测试 x 是否是 s 的成员\n\nx not in s\n测试 x 是否不是 s 的成员\n\ns.issubset(t)\ns &lt;= t\n测试是否 s 中的每一个元素都在 t 中\n\ns.issuperset(t)\ns &gt;= t\n测试是否 t 中的每一个元素都在 s 中\n\ns.union(t)\ns | t\n返回一个新的 set 包含 s 和 t 中的每一个元素\n\ns.intersection(t)\ns &amp; t\n返回一个新的 set 包含 s 和 t 中的公共元素\n\ns.difference(t)\ns - t\n返回一个新的 set 包含 s 中有但是 t 中没有的元素\n\ns.symmetric_difference(t)\ns ^ t\n返回一个新的 set 包含 s 和 t 中不重复的元素\n\ns.copy()\n返回 set “s”的一个浅复制\n</code></pre>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"对字符定义优先级\"><a href=\"#对字符定义优先级\" class=\"headerlink\" title=\"对字符定义优先级\"></a>对字符定义优先级</h4><p>将需要排序的字符集放到一个字符串中<br>在这个字符串中越靠前的字符排序后越靠前</p>\n<pre><code class=\"python\">order = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1357902468&#39;\nprint(*sorted(input(), key=order.index), sep=&#39;&#39;)\n</code></pre>\n<h4 id=\"关键字排序\"><a href=\"#关键字排序\" class=\"headerlink\" title=\"关键字排序\"></a>关键字排序</h4><pre><code class=\"python\">N, M = map(int, input().split())    # Ｎ行 Ｍ列\nrows = [input() for _ in range(N)]  # 一行 为一组数据\nK = int(input()) # 以第几为关键字\n\nfor row in sorted(rows, key=lambda x: int(x.split()[K])):# lambda 匿名函数\n    print(row)\n\n</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"26字母\"><a href=\"#26字母\" class=\"headerlink\" title=\"26字母\"></a>26字母</h4><pre><code class=\"Python\">import string\nalpha = string.ascii_lowercase\n</code></pre>\n<h4 id=\"字符串反转\"><a href=\"#字符串反转\" class=\"headerlink\" title=\"字符串反转\"></a>字符串反转</h4><pre><code class=\"Python\">&gt;&gt;&gt;　s = &#39;abcde&#39;\n&gt;&gt;&gt;　print(s[::-1])\nedcba\n</code></pre>\n<h4 id=\"字符串格式化输出\"><a href=\"#字符串格式化输出\" class=\"headerlink\" title=\"字符串格式化输出\"></a>字符串格式化输出</h4><p>个人喜欢最新的<code>&#39;{}&#39;.format()</code>的形式,不仅写起来更方便一些,还有旧方法不能实现的操作.感觉以后可能完全取缔旧的方法.</p>\n<p><a href=\"https://pyformat.info/\" target=\"_blank\" rel=\"noopener\">.format的介绍(与旧方法的对比)</a></p>\n<p>输出一行 ‘-‘</p>\n<pre><code class=\"Python\">&#39;{:-{align}{width}}&#39;.format( &#39;&#39;,align=&#39;&gt;&#39;, width = 5)\n</code></pre>\n<p>输出</p>\n<pre><code>-----\n</code></pre><h2 id=\"函数-function\"><a href=\"#函数-function\" class=\"headerlink\" title=\"函数(function)\"></a>函数(function)</h2><p>可更改(mutable)与不可更改(immutable)对象<br>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>\n<ul>\n<li>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li>\n<li>可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>\n</ul>\n<p>python 函数的参数传递：</p>\n<ul>\n<li>不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li>\n<li>可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li>\n</ul>\n<p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>\n<h3 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a>eval()</h4><p>eval(string) 对于一个字符串，相当与<strong>运行</strong>这个字符串所代表的python代码</p>\n<pre><code class=\"python\">&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; eval(&#39;x+1&#39;)\n&gt;&gt;&gt; print(eval(&#39;x+1&#39;))\n2\n</code></pre>\n<h1 id=\"各种库\"><a href=\"#各种库\" class=\"headerlink\" title=\"各种库\"></a>各种库</h1><p>导入库</p>\n<pre><code class=\"python\">import 库 #使用时需要 `库.函数()`\nfrom 库 import 函数 # 使用时直接 `函数()` 即可\n</code></pre>\n<h2 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h2><pre><code class=\"python\">import collections\n</code></pre>\n<h3 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h3><p>计数用的函数</p>\n<h3 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h3><p>可以简单理解为一个<strong>map</strong>,</p>\n<pre><code class=\"python\">a = defaultdict([Type of value])\n------\na[&#39;key&#39;] type is [Type of value]\n</code></pre>\n<h3 id=\"deque\"><a href=\"#deque\" class=\"headerlink\" title=\"deque\"></a>deque</h3><pre><code class=\"python\">&gt;&gt;&gt; from collections import deque\n&gt;&gt;&gt; d = deque()\n&gt;&gt;&gt; d.append(1)\n&gt;&gt;&gt; print d\ndeque([1])\n&gt;&gt;&gt; d.appendleft(2)\n&gt;&gt;&gt; print d\ndeque([2, 1])\n&gt;&gt;&gt; d.clear()\n&gt;&gt;&gt; print d\ndeque([])\n&gt;&gt;&gt; d.extend(&#39;1&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;1&#39;])\n&gt;&gt;&gt; d.extendleft(&#39;234&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;])\n&gt;&gt;&gt; d.count(&#39;1&#39;)\n1\n&gt;&gt;&gt; d.pop()\n&#39;1&#39;\n&gt;&gt;&gt; print d\ndeque([&#39;4&#39;, &#39;3&#39;, &#39;2&#39;])\n&gt;&gt;&gt; d.popleft()\n&#39;4&#39;\n&gt;&gt;&gt; print d\ndeque([&#39;3&#39;, &#39;2&#39;])\n&gt;&gt;&gt; d.extend(&#39;7896&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;3&#39;, &#39;2&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;6&#39;])\n&gt;&gt;&gt; d.remove(&#39;2&#39;)\n&gt;&gt;&gt; print d\ndeque([&#39;3&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;6&#39;])\n&gt;&gt;&gt; d.reverse()\n&gt;&gt;&gt; print d\ndeque([&#39;6&#39;, &#39;9&#39;, &#39;8&#39;, &#39;7&#39;, &#39;3&#39;])\n&gt;&gt;&gt; d.rotate(3)\n&gt;&gt;&gt; print d\ndeque([&#39;8&#39;, &#39;7&#39;, &#39;3&#39;, &#39;6&#39;, &#39;9&#39;])\n</code></pre>\n<h1 id=\"自省\"><a href=\"#自省\" class=\"headerlink\" title=\"自省\"></a>自省</h1><h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\".\"></a>.</h2><h3 id=\"-5\"><a href=\"#-5\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"getattr()\"></a>getattr()</h4><pre><code class=\"python\">&#39;&#39;&#39;\ngetattr(object, name[, default]) -&gt; value\n其中 name 可以是字符串.\n这样的话 相当于 name可以用字符串代替 就不用一大堆`if elif else`了\n&#39;&#39;&#39;\ngetattr(object, name[, default]) -&gt; value\n&lt;==&gt;\nobject.name(value)\n</code></pre>\n"},{"title":"工厂模式.","date":"2018-11-18T04:44:08.000Z","description":null,"toc":true,"_content":"\n\n\nhttp://www.runoob.com/design-pattern/abstract-factory-pattern.html\n\n\n\n下面例子中鼠标，键盘，耳麦为产品，惠普，戴尔为工厂。\n\n### 简单工厂模式\n\n简单工厂模式不是 23 种里的一种，简而言之，就是有一个专门生产某个产品的类。\n\n比如下图中的鼠标工厂，专业生产鼠标，给参数 0，生产戴尔鼠标，给参数 1，生产惠普鼠标。\n\n\n\n\n\n### 工厂模式\n\n工厂模式也就是鼠标工厂是个父类，有生产鼠标这个接口。\n\n戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。\n\n生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。\n\n后续直接调用鼠标工厂.生产鼠标()即可\n\n\n\n\n\n### 抽象工厂模式\n\n抽象工厂模式也就是不仅生产鼠标，同时生产键盘。\n\n也就是 PC 厂商是个父类，有生产鼠标，生产键盘两个接口。\n\n戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。\n\n创建工厂时，由戴尔工厂创建。\n\n后续工厂.生产鼠标()则生产戴尔鼠标，工厂.生产键盘()则生产戴尔键盘。\n\n\n\n\n\n> 在抽象工厂模式中，假设我们需要增加一个工厂\n\n假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承 PC 厂商。\n\n之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类即可。\n\n\n\n\n\n> 在抽象工厂模式中，假设我们需要增加一个产品\n\n假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。\n\n之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。 以上。","source":"_posts/ProductPattern.md","raw":"---\ntitle: 工厂模式.\ndate: 2018-11-18 12:44:08\ncategories:  \ntags: [面试,设计模式] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n---\n\n\n\nhttp://www.runoob.com/design-pattern/abstract-factory-pattern.html\n\n\n\n下面例子中鼠标，键盘，耳麦为产品，惠普，戴尔为工厂。\n\n### 简单工厂模式\n\n简单工厂模式不是 23 种里的一种，简而言之，就是有一个专门生产某个产品的类。\n\n比如下图中的鼠标工厂，专业生产鼠标，给参数 0，生产戴尔鼠标，给参数 1，生产惠普鼠标。\n\n\n\n\n\n### 工厂模式\n\n工厂模式也就是鼠标工厂是个父类，有生产鼠标这个接口。\n\n戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。\n\n生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。\n\n后续直接调用鼠标工厂.生产鼠标()即可\n\n\n\n\n\n### 抽象工厂模式\n\n抽象工厂模式也就是不仅生产鼠标，同时生产键盘。\n\n也就是 PC 厂商是个父类，有生产鼠标，生产键盘两个接口。\n\n戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。\n\n创建工厂时，由戴尔工厂创建。\n\n后续工厂.生产鼠标()则生产戴尔鼠标，工厂.生产键盘()则生产戴尔键盘。\n\n\n\n\n\n> 在抽象工厂模式中，假设我们需要增加一个工厂\n\n假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承 PC 厂商。\n\n之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类即可。\n\n\n\n\n\n> 在抽象工厂模式中，假设我们需要增加一个产品\n\n假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。\n\n之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。 以上。","slug":"ProductPattern","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2w00j6safkeesfmi1h","content":"<p><a href=\"http://www.runoob.com/design-pattern/abstract-factory-pattern.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/design-pattern/abstract-factory-pattern.html</a></p>\n<p>下面例子中鼠标，键盘，耳麦为产品，惠普，戴尔为工厂。</p>\n<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><p>简单工厂模式不是 23 种里的一种，简而言之，就是有一个专门生产某个产品的类。</p>\n<p>比如下图中的鼠标工厂，专业生产鼠标，给参数 0，生产戴尔鼠标，给参数 1，生产惠普鼠标。</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式也就是鼠标工厂是个父类，有生产鼠标这个接口。</p>\n<p>戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。</p>\n<p>生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。</p>\n<p>后续直接调用鼠标工厂.生产鼠标()即可</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>抽象工厂模式也就是不仅生产鼠标，同时生产键盘。</p>\n<p>也就是 PC 厂商是个父类，有生产鼠标，生产键盘两个接口。</p>\n<p>戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。</p>\n<p>创建工厂时，由戴尔工厂创建。</p>\n<p>后续工厂.生产鼠标()则生产戴尔鼠标，工厂.生产键盘()则生产戴尔键盘。</p>\n<blockquote>\n<p>在抽象工厂模式中，假设我们需要增加一个工厂</p>\n</blockquote>\n<p>假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承 PC 厂商。</p>\n<p>之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类即可。</p>\n<blockquote>\n<p>在抽象工厂模式中，假设我们需要增加一个产品</p>\n</blockquote>\n<p>假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。</p>\n<p>之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。 以上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.runoob.com/design-pattern/abstract-factory-pattern.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/design-pattern/abstract-factory-pattern.html</a></p>\n<p>下面例子中鼠标，键盘，耳麦为产品，惠普，戴尔为工厂。</p>\n<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><p>简单工厂模式不是 23 种里的一种，简而言之，就是有一个专门生产某个产品的类。</p>\n<p>比如下图中的鼠标工厂，专业生产鼠标，给参数 0，生产戴尔鼠标，给参数 1，生产惠普鼠标。</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式也就是鼠标工厂是个父类，有生产鼠标这个接口。</p>\n<p>戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。</p>\n<p>生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。</p>\n<p>后续直接调用鼠标工厂.生产鼠标()即可</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>抽象工厂模式也就是不仅生产鼠标，同时生产键盘。</p>\n<p>也就是 PC 厂商是个父类，有生产鼠标，生产键盘两个接口。</p>\n<p>戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。</p>\n<p>创建工厂时，由戴尔工厂创建。</p>\n<p>后续工厂.生产鼠标()则生产戴尔鼠标，工厂.生产键盘()则生产戴尔键盘。</p>\n<blockquote>\n<p>在抽象工厂模式中，假设我们需要增加一个工厂</p>\n</blockquote>\n<p>假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承 PC 厂商。</p>\n<p>之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类即可。</p>\n<blockquote>\n<p>在抽象工厂模式中，假设我们需要增加一个产品</p>\n</blockquote>\n<p>假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。</p>\n<p>之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。 以上。</p>\n"},{"title":"StudyDocker","date":"2019-01-10T09:21:03.000Z","description":["Docker 轻量级虚拟化"],"toc":true,"_content":"\n\n\n操作环境: Arch & manjaro \n\ndocker命令行管理工具使用的`dockly` 但仍然有缺陷,以后再找找 有没有其他更好用的命令行工具.\n\n教程先看了一遍 [B站的尚硅谷教程](https://www.bilibili.com/video/av27122140) 有些av号的顺序不对.  看这个就行了.\n\ntabris's 阿里云镜像加速器: https://oj7znbfj.mirror.aliyuncs.com\n\n\n\n# 安装篇\n\n命令安装`docker`本体\n\n```shell\nsudo pacman -S docker\n```\n\n\n\n> 同时建议安装`dockly`作为docker的命令行管理软件.\n>\n> https://www.npmjs.com/package/dockly\n\n非root用户运行docker是执行如下命令\n\n```shell\nsudo usermod -aG docker $USER #your usrname\n```\n\n执行如下命令启动docker服务\n\n```shell\nsystemctl enable docker  \nsystemctl start docker\n```\n\n## 镜像加速\n\n鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: https://oj7znbfj.mirror.aliyuncs.com\n\n新版的 `Docker` 使用 `/etc/docker/daemon.json（Linux）` 或者 `%programdata%\\docker\\config\\daemon.json（Windows）` 来配置 `Daemon`。\n\n请在该配置文件中加入（没有该文件的话，请先建一个）：\n\n```json\n{\n    \"registry-mirrors\": [\"https://oj7znbfj.mirror.aliyuncs.com\"]\n}\n```\n\n","source":"_posts/StudyDocker.md","raw":"---\ntitle: StudyDocker\ndate: 2019-1-10 17:21:03\ntags: [linux,docker,虚拟化]\ndescription: [\"Docker 轻量级虚拟化\"]\ntoc: true\n---\n\n\n\n操作环境: Arch & manjaro \n\ndocker命令行管理工具使用的`dockly` 但仍然有缺陷,以后再找找 有没有其他更好用的命令行工具.\n\n教程先看了一遍 [B站的尚硅谷教程](https://www.bilibili.com/video/av27122140) 有些av号的顺序不对.  看这个就行了.\n\ntabris's 阿里云镜像加速器: https://oj7znbfj.mirror.aliyuncs.com\n\n\n\n# 安装篇\n\n命令安装`docker`本体\n\n```shell\nsudo pacman -S docker\n```\n\n\n\n> 同时建议安装`dockly`作为docker的命令行管理软件.\n>\n> https://www.npmjs.com/package/dockly\n\n非root用户运行docker是执行如下命令\n\n```shell\nsudo usermod -aG docker $USER #your usrname\n```\n\n执行如下命令启动docker服务\n\n```shell\nsystemctl enable docker  \nsystemctl start docker\n```\n\n## 镜像加速\n\n鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: https://oj7znbfj.mirror.aliyuncs.com\n\n新版的 `Docker` 使用 `/etc/docker/daemon.json（Linux）` 或者 `%programdata%\\docker\\config\\daemon.json（Windows）` 来配置 `Daemon`。\n\n请在该配置文件中加入（没有该文件的话，请先建一个）：\n\n```json\n{\n    \"registry-mirrors\": [\"https://oj7znbfj.mirror.aliyuncs.com\"]\n}\n```\n\n","slug":"StudyDocker","published":1,"updated":"2019-04-17T11:16:35.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2x00j7safkwpumpmli","content":"<p>操作环境: Arch &amp; manjaro </p>\n<p>docker命令行管理工具使用的<code>dockly</code> 但仍然有缺陷,以后再找找 有没有其他更好用的命令行工具.</p>\n<p>教程先看了一遍 <a href=\"https://www.bilibili.com/video/av27122140\" target=\"_blank\" rel=\"noopener\">B站的尚硅谷教程</a> 有些av号的顺序不对.  看这个就行了.</p>\n<p>tabris’s 阿里云镜像加速器: <a href=\"https://oj7znbfj.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://oj7znbfj.mirror.aliyuncs.com</a></p>\n<h1 id=\"安装篇\"><a href=\"#安装篇\" class=\"headerlink\" title=\"安装篇\"></a>安装篇</h1><p>命令安装<code>docker</code>本体</p>\n<pre><code class=\"shell\">sudo pacman -S docker\n</code></pre>\n<blockquote>\n<p>同时建议安装<code>dockly</code>作为docker的命令行管理软件.</p>\n<p><a href=\"https://www.npmjs.com/package/dockly\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/dockly</a></p>\n</blockquote>\n<p>非root用户运行docker是执行如下命令</p>\n<pre><code class=\"shell\">sudo usermod -aG docker $USER #your usrname\n</code></pre>\n<p>执行如下命令启动docker服务</p>\n<pre><code class=\"shell\">systemctl enable docker  \nsystemctl start docker\n</code></pre>\n<h2 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h2><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: <a href=\"https://oj7znbfj.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://oj7znbfj.mirror.aliyuncs.com</a></p>\n<p>新版的 <code>Docker</code> 使用 <code>/etc/docker/daemon.json（Linux）</code> 或者 <code>%programdata%\\docker\\config\\daemon.json（Windows）</code> 来配置 <code>Daemon</code>。</p>\n<p>请在该配置文件中加入（没有该文件的话，请先建一个）：</p>\n<pre><code class=\"json\">{\n    &quot;registry-mirrors&quot;: [&quot;https://oj7znbfj.mirror.aliyuncs.com&quot;]\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>操作环境: Arch &amp; manjaro </p>\n<p>docker命令行管理工具使用的<code>dockly</code> 但仍然有缺陷,以后再找找 有没有其他更好用的命令行工具.</p>\n<p>教程先看了一遍 <a href=\"https://www.bilibili.com/video/av27122140\" target=\"_blank\" rel=\"noopener\">B站的尚硅谷教程</a> 有些av号的顺序不对.  看这个就行了.</p>\n<p>tabris’s 阿里云镜像加速器: <a href=\"https://oj7znbfj.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://oj7znbfj.mirror.aliyuncs.com</a></p>\n<h1 id=\"安装篇\"><a href=\"#安装篇\" class=\"headerlink\" title=\"安装篇\"></a>安装篇</h1><p>命令安装<code>docker</code>本体</p>\n<pre><code class=\"shell\">sudo pacman -S docker\n</code></pre>\n<blockquote>\n<p>同时建议安装<code>dockly</code>作为docker的命令行管理软件.</p>\n<p><a href=\"https://www.npmjs.com/package/dockly\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/dockly</a></p>\n</blockquote>\n<p>非root用户运行docker是执行如下命令</p>\n<pre><code class=\"shell\">sudo usermod -aG docker $USER #your usrname\n</code></pre>\n<p>执行如下命令启动docker服务</p>\n<pre><code class=\"shell\">systemctl enable docker  \nsystemctl start docker\n</code></pre>\n<h2 id=\"镜像加速\"><a href=\"#镜像加速\" class=\"headerlink\" title=\"镜像加速\"></a>镜像加速</h2><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是阿里云的镜像加速器: <a href=\"https://oj7znbfj.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://oj7znbfj.mirror.aliyuncs.com</a></p>\n<p>新版的 <code>Docker</code> 使用 <code>/etc/docker/daemon.json（Linux）</code> 或者 <code>%programdata%\\docker\\config\\daemon.json（Windows）</code> 来配置 <code>Daemon</code>。</p>\n<p>请在该配置文件中加入（没有该文件的话，请先建一个）：</p>\n<pre><code class=\"json\">{\n    &quot;registry-mirrors&quot;: [&quot;https://oj7znbfj.mirror.aliyuncs.com&quot;]\n}\n</code></pre>\n"},{"title":"StudyLinux----arch","date":"2018-09-23T09:21:03.000Z","description":["Arch 作为'最难'安装的linux系统  通过它可以更好的了解linux"],"toc":true,"_content":"\n> manjaro 真好用 arch 再见!\n>\n> 推荐manjaro-deepin 对中文的支持比较好\n>\n> 桌面环境真的是个大坑啊   \n>\n> \n>\n> 现在觉得折腾确实挺有趣的, 但以后有机会还是配一个mbp吧, linux的桌面环境是真的烦人..aur和完善的桌面环境感觉还是后者比较重要.\n>\n> \n>\n> 争取能做出来一个安装+部署配置的脚本\n\n# Arch 踩坑笔记\n\n> 记录一下从0开始玩linux的经历\n>\n> 其实之前已经有了一点ubuntu的使用经验 但是很浅\n>\n>Arch 作为'最难'安装的linux系统  通过它可以更好的了解linux\n>\n> 这里是VMware安装的Arch虚拟机\n> [配置和美化Arch Linux](https://blog.csdn.net/u011054333/article/details/50631599)\n## 安装:\n\n这里参考\n\n>  **注意引导方式建议使用rEFInd 代替教程里采用的grub**\n>\n> [这是最全面的安装指南](https://www.viseator.com/2017/05/17/arch_install/)\n\n如果进入不了`[root@archiso ]` 是物理机安装时 u盘的卷标不是`ARCH_20XXYY\n\n### 基础设置:\n\n#### 创建新用户\n\n```\n# useradd -m -G wheel <username> （请自行替换username为你的用户名）\n# passwd <username> （请自行替换username为你的用户名）\n```\n#### 开机自动联网\n\n```shell\n# systemctl enable dhcpcd\n```\n\n#### 网络工具\n\n```shell\n# pacman -Syy net-tools\n```\n\n#### 时间\n\n装完archlinux，因为时区的问题，时间总是比实际快了8个小时，找了各种办法，最终使用了openNTPD的方法\n\n设置时区：`sudo ln sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime`\n\n安装openNTPD：`sudo pacman -S openntpd`\n\n重启openNTPD：`systemctl restart openntpd`\n\n设置开机启动：`systemctl enable openntpd`\n\n#### ssh\n\n安装ssh\n```\n# pacman -Syy openssh\n```\n启动服务\n```\n# systemctl start sshd\n```\n开机启动\n```\n# systemctl enable sshd.service\n```\n\n#### 启用中国源\n\n```shell\nsudo pacman-mirrors -c China\n```\n\n#### 添加archlinuxcn源\n\narchlinuxcn源至您的 /etc/pacman.conf\n\n```toml\n[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n#### aur助手\n\n[yay](https://github.com/Jguer/yay) 是下一个最好的 AUR 助手。它使用 Go 语言写成，宗旨是提供最少化用户输入的 `pacman` 界面、yaourt 式的搜索，而几乎没有任何依赖软件。\n\nyay 的特性：\n\n- `yay` 提供 AUR 表格补全，并且从 ABS 或 AUR 下载 PKGBUILD\n- 支持收窄搜索，并且不需要引用 PKGBUILD 源\n- `yay` 的二进制文件除了 `pacman` 以外别无依赖\n- 提供先进的包依赖解决方案，以及在编译安装之后移除编译时的依赖\n- 当在 `/etc/pacman.conf` 文件配置中启用了色彩时支持色彩输出\n- `yay` 可被配置成只支持 AUR 或者 repo 里的软件包\n\n安装 yay：\n\n> **现在yay已经添加到官方源中**\n>\n> **`sudo pacman -S yay`即可安装**\n\n当然你还可以从 `git` 克隆并编译安装。\n\n```\ngit clone https://aur.archlinux.org/yay.git\ncd yay\nmakepkg -si\n```\n\n使用 yay：\n\n搜索：\n\n```\nyay -Ss <package-name>\n```\n\n安装：\n\n```\nyay -S <package-name>\n```\n\n\n\n#### powerline\n\nPowerline 是 vim、zsh、bash、tmux、IPython、Awesome、bar、fish、lemonbar、pdb、rc、shell、tcsh、wm、i3 和 Qtil 中的一个状态栏插件。它给程序提供了状态栏，并使程序更好看。它用 Python 写成。\n\n\n\n#### VPN\n\nelectron-ssr : GUI的界面的ssr.很好用\n\n####  中文字体\n\n[参考ArchWiki]\n\n<https://wiki.archlinux.org/index.php/Font_Configuration/Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)>\n\n```\nyay -S ttf-ms-fonts ttf-roboto noto-fonts noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts ttf-dejavu\n```\n\n添加配置文件,`~/.config/fontconfig/fonts.conf` or `/etc/fonts/local.conf`\n\n### 命令行\n\n> linux 强大的命令行操作,使效率倍增,所以配置好命令行,并安装实用命令行软件是必要的\n\n#### zsh[^1]\n\n[^1]: [终端环境之Zsh＆oh-my-zsh](https://mtaoist.xyz/2018/03/14/oh-my-zsh/)\n\n```shell\nsudo pacman -S zsh zsh-completions\n\n# 将zsh设为默认shell\nchsh -s /bin/zsh\n#其他发行版可先用chsh -l 查看zsh安装位置\n```\n\n##### oh-my-zsh\n\n- curl 和 git 应该已被安装(若没有Arch 用sudo pacman -S curl git 安装，其他发行版类似。)\n\n- [Oh-my-zsh](http://ohmyz.sh/)是一个傻瓜化的zsh配置管理框架，提供了大量实用的功能，主题等。做到开箱即用，现在基本成为了Zsh的标配。\n\n- 安装\n\n  ```\n  sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n  ```\n\n- 配置文件位置： ~/.zshrc\n\n- 主题\n  `oh-my-zsh`自带大量[Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)，默认为`robbyrussell`。你也可以选择`random`，即每次打开终端随机选一个主题。\n\n  > ZSH_THEME=”你喜欢的主题名”\n  > ![themes](https://mtaoist.xyz/img/zsh_theme.png)\n\n- 常用插件\n\n  - git: 提供大量git的Aliases，[详情](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git)\n\n  - archlinux： 提供一些pacman包管理器的Aliases，[详情](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#archlinux)\n\n  - z：经常使用cd 切换路径，积累一定数据后可用z快速跳转到指定位置\n\n  - sudo：按两次[Esc]自动在前面加sudo\n\n  - pip： 补全pip 命令\n\n  - zsh-autosuggestions: 根据历史记录进行智能提示(按 ctrl+E 是正确姿势)。非oh-my-zsh自带，用git下载安装\n\n    ```\n    git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n    ```\n\n  - zsh-syntax-highlighting：命令高亮，正确显示绿色，错误为红色。非oh-my-zsh自带，用git下载安装\n\n    ```\n    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n    ```\n\n    > plugins=( 你想启用的插件，空格分隔 )\n    > ![plugins](https://mtaoist.xyz/img/zsh_plugins.png)\n\n  - 重新加载配置文件，立刻生效。\n\n    > source ~/.zshrc\n\n- 其他插件请参见官方[wiki](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview)\n\n- 少即是多，启用大量插件会严重拖慢zsh启动速度\n\n---\n\n我这里采用的是`agnoster`主题\n为在使用tmux时不重复显示`whoami@whereami`做两处修改\n\n- 在`/etc/profile`中添加环境变量\n  ```\n  DEFAULT_USER=$USER\n  ```\n- 在`agnoster`主题文件91行中做如下修改\n  ```git\n  - if [[ \"$USER\" != \"$DEFAULT_USER\" || -n \"$SSH_CLIENT\"]]; then\n  + if [[ \"$USER\" != \"$DEFAULT_USER\" || (( -n \"$SSH_CLIENT\" && -z \"$TMUX\" )) ]]; then\n  ```\n  这样在本地初始打开一个terminal时不会显示,ssh远程连接是时显示\n  进入tmux时不会显示\n\n原因是\n[Archlinux下安装和配置zsh](https://blog.csdn.net/kingolie/article/details/53066679)\n\n#### tmux\n\n安装tmux\n\n```shell\nsudo pacman -S tmux\n```\n\n在这里配置tmux\n<https://github.com/gpakosz/.tmux> 这个简单好看,且对true color支持很好,但对\nhttps://github.com/samoshkin/tmux-config  <--推荐这个配置,这个配置针对键位的优化很好,\n\n[为 vim + tmux 开启真彩色(true color)](http://lotabout.me/2018/true-color-for-tmux-and-vim/)\n\n[tmux进阶之tmuxinator](https://blog.csdn.net/u014717036/article/details/60139776)\n\n>   FAQ:\n>\n>   1.  tmux 嵌套使用的话，如何将 tmux 命令发送到嵌套内的会话窗口？[转载自](<https://blog.csdn.net/henryhu712/article/details/83824487>)\n>\n>         很常见的例子是，在本地用 tmux 登陆远程服务器，服务器上又使用了 tmux。问题是，在这种情况下，tmux 指令被外层会话窗口捕获（本地 tmux），根本无法控制服务器上运行的 tmux。例如，想退出服务器上的会话，ctrl + b, d, 结果退出的是本地 tmux 连接, sh*t。\n>\n>         介绍一个简单方法：按着 ctrl，点击两次 b 键，这样发出的 tmux 指令就是发送到内层窗口会话！如此简单！\n>\n>   ---\n\n\n\n#### neovim\n\n> neovim属于vim的加强版  功能更加强大\n\n注意的是启动neovim的命令式`nvim`而不是`neovim`\n\n同时安装 [nerd-fonts](https://gitee.com/hustlion-dev/nerd-fonts#option-3-install-script) \n\n> 如果安装spacevim 则不需要手动安装nerd-fonts\n\n##### spacevim\n\n一个定制化的vim配置,支持`vim,neovim` \n\n[官网](https://spacevim.org/)\n\n> 初学的时候可以使用这个省事儿些,但是后面学习使用vim最好采用自己的配置,按需添加插件配置.\n\n\n\n#### *Xshell下256/真色支持\n\n检查当前是否为256/真色[参考本篇文章](https://gaomf.cn/2017/01/16/Terminal_Color/)\n\n\n我这里的xshell只能支持256色\n\n这时xshell中只有在tmux下spacevim才能显示256色,不支持真色\n\n在.zshrc文件头添加\n```shell\nsh /${.zshrc的目录}/.change_term.sh\n```\n.change_term.sh文件内容如下\n```shell\necho \"before: $TERM\"\nif [ \"$TERM\" = \"linux\" ]\nthen\n  echo \"export TERM=xterm-256color\"\n  export TERM=xterm-256color\nelif [ \"$TERM\" = \"xterm\" ]\nthen\n  echo \"export TERM=tmux-direct\"\n  export TERM=tmux-direct\nelif [ \"$TERM\" = \"xterm-256color\" ]\nthen\n  echo \"export TERM=xterm-direct\"\n  export TERM=xterm-direct\nelse\n  echo \"export TERM=tmux-256color\"\n  export TERM=tmux-256color\nfi\necho \"now: $TERM\"\n# 如果是ssh自动启用tmux\nif [ -n \"$SSH_CLIENT\" ]\nthen\n  tmux\nfi\n\nclear \n```\n\nglances: 代替htop的资源监控工具\n\nranger: ranger是一个以[GPL](https://baike.baidu.com/item/GPL)许可证发放源码，默认使用VIM风格键盘绑定、[curses](https://baike.baidu.com/item/curses/1630775)图形库，基于字符终端的[文件管理器](https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/8716754)，是自由免费软件。\n\ntig: git的命令行管理软件\n\ndockly: docker的命令行管理软件\n\nwtfutil: 基于 Terminal 的个人 dashboard 实用程序，专为显示不常用的但非常重要的日常数据而设计\n\n### 常用软件\n\n#### 编辑器&IDE\n\nJetBrains ToolBox: JB全家桶,管理Clion,IDEA,PyCharm项目\n\ncode::blocks\n\nvscode: \n\nTypora: markdown编辑器\n\n#### 终端\n\nYakuake: 悬挂式命令行,很方便\n\n#### 开发工具\n\nGitKraken: git的图形化管理软件\n\n: (文件对比工具)\n\n#### 影音\n\n网易云音乐\n\n#### 浏览器\n\ngoogle-chrome\n\n#### 通讯工具\n\ndeepin.com.qq.office： tim\n\ndeepin-wechat： 微信\n\n> wine程序字体dpi太小导致视觉观感很难受\n>\n> 调整DPI字体\n>\n> 1，先退出deepin-tim或deepin-qq，否则会提示错误。\n>\n> 2，运行**env WINEPREFIX=\"$HOME/.deepinwine/Deepin-TIM\" winecfg**（如果是修改QQ界面字体大小，就把Deepin-TIM改成Deepin-QQ），然后将屏幕分辨率拖放到合适的大小（一般120就可以了）。\n\ngitter:\n\ntelegram:\n\n#### 虚拟机\n\ndocker\n\nvirtualbox\n\n#### helper\n\nalbert: linux下的启动器 \n\n\n\n### 桌面环境\n\n> [参考](https://blog.csdn.net/kingolie/article/details/76723448)\n>\n> 如果安装manjaro 就不需要手动安装这些了\n\n#### **1、安装显卡驱动**\n\n```zsh\n# lspci | grep VGA    # 确定显卡型号\n# pacman -S <驱动包>\n#\n# # 官方仓库提供的驱动包：\n# # +----------------------+--------------------+--------------+\n# # |                      |        开源        |     私有     |\n# # +----------------------+--------------------+--------------+\n# # |         通用         |   xf86-video-vesa  |              |\n# # +----------------------+--------------------+--------------+\n# # |         Intel        |  xf86-video-intel  |              |\n# # +--------+-------------+--------------------+--------------+\n# # |        | GeForce 9+  |                    |    nvidia    |\n# # +        +-------------+                    +--------------+\n# # | nVidia | GeForce 8/9 | xf86-video-nouveau | nvidia-340xx |\n# # +        +-------------+                    +--------------+\n# # |        | GeForce 6/7 |                    | nvidia-304xx |\n# # +--------+-------------+--------------------+--------------+\n# # |        AMD/ATI       |   xf86-video-ati   |              |\n# # +----------------------+--------------------+--------------+12345678910111213141516171819\n```\n\n#### **2、安装桌面环境**\n\n所有桌面环境都需要依赖xorg。所以先要安装xorg组。\n\n```shell\npacman -S xorg\n```\n\n输入命令之后首先会询问要安装xorg组下的哪些包，选择全部。然后对于libgl包有个四个不同的实现，选择mesa-libgl。 \n然后再安装xorg-xinit和xterm：\n\n```shell\npacman -S xorg-xinit xterm\n```\n\n安装完成之后就可以使用startx命令启动xorg的简易界面了。进入成功的话会显示出几个简陋的窗口。然后按Ctrl+D就可以退出了。\n\n#### **3、安装xfce4桌面**\n\n安装xfce4桌面和附带的软件包：\n\n```shell\npacman -S xfce4 xfce4-goodies\n```\n\n#### **4、安装LightDM登录管理器(显示管理器)**\n\n详细安装和配置看arch-wiki-lighdm \n我没有通过startx的方式启动桌面环境，而是使用了登录管理器lightdm \n安装：\n\n```zsh\npacman -S lightdm lightdm-gtk-greeter\n```\n\n其配置文件为：\n/etc/lightdm/lightdm.conf \n安装好之后测试启动：\n\n```shell\nsystemctl start lightdm.service1\n```\n\n如果正常就会看到熟悉的登录界面了，不过不要登录，现在只是测试lightdm是否可以正常启动 \n点击画面上的关机小图标，弹出关机对话，选择注销! \n注销之后就回到之前的tty命令行模式了，可以看到相关的启动信息 \n一切正常，所以设置lightdm为开机自动启动，这样以后开机就不会出现tty命令行界面了，而是直接进入登录界面：\n\n```shell\nsystemctl enable lightdm.service\n```\n\n之后你可以重启进入xfce4图形界面，然后在图形界面中使用终端来继续以下配置步骤，也可以不重启，直接继续\n\n进入xfce4图形界面的命令为`startxfce4`\n\n\n\n#### 桌面美化\n\n好好干活,美化个屁.\n","source":"_posts/StudyLinux-arch.md","raw":"---\ntitle: StudyLinux----arch\ndate: 2018-09-23 17:21:03\ntags: [linux]\ndescription: [\"Arch 作为'最难'安装的linux系统  通过它可以更好的了解linux\"]\ntoc: true\n---\n\n> manjaro 真好用 arch 再见!\n>\n> 推荐manjaro-deepin 对中文的支持比较好\n>\n> 桌面环境真的是个大坑啊   \n>\n> \n>\n> 现在觉得折腾确实挺有趣的, 但以后有机会还是配一个mbp吧, linux的桌面环境是真的烦人..aur和完善的桌面环境感觉还是后者比较重要.\n>\n> \n>\n> 争取能做出来一个安装+部署配置的脚本\n\n# Arch 踩坑笔记\n\n> 记录一下从0开始玩linux的经历\n>\n> 其实之前已经有了一点ubuntu的使用经验 但是很浅\n>\n>Arch 作为'最难'安装的linux系统  通过它可以更好的了解linux\n>\n> 这里是VMware安装的Arch虚拟机\n> [配置和美化Arch Linux](https://blog.csdn.net/u011054333/article/details/50631599)\n## 安装:\n\n这里参考\n\n>  **注意引导方式建议使用rEFInd 代替教程里采用的grub**\n>\n> [这是最全面的安装指南](https://www.viseator.com/2017/05/17/arch_install/)\n\n如果进入不了`[root@archiso ]` 是物理机安装时 u盘的卷标不是`ARCH_20XXYY\n\n### 基础设置:\n\n#### 创建新用户\n\n```\n# useradd -m -G wheel <username> （请自行替换username为你的用户名）\n# passwd <username> （请自行替换username为你的用户名）\n```\n#### 开机自动联网\n\n```shell\n# systemctl enable dhcpcd\n```\n\n#### 网络工具\n\n```shell\n# pacman -Syy net-tools\n```\n\n#### 时间\n\n装完archlinux，因为时区的问题，时间总是比实际快了8个小时，找了各种办法，最终使用了openNTPD的方法\n\n设置时区：`sudo ln sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime`\n\n安装openNTPD：`sudo pacman -S openntpd`\n\n重启openNTPD：`systemctl restart openntpd`\n\n设置开机启动：`systemctl enable openntpd`\n\n#### ssh\n\n安装ssh\n```\n# pacman -Syy openssh\n```\n启动服务\n```\n# systemctl start sshd\n```\n开机启动\n```\n# systemctl enable sshd.service\n```\n\n#### 启用中国源\n\n```shell\nsudo pacman-mirrors -c China\n```\n\n#### 添加archlinuxcn源\n\narchlinuxcn源至您的 /etc/pacman.conf\n\n```toml\n[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n#### aur助手\n\n[yay](https://github.com/Jguer/yay) 是下一个最好的 AUR 助手。它使用 Go 语言写成，宗旨是提供最少化用户输入的 `pacman` 界面、yaourt 式的搜索，而几乎没有任何依赖软件。\n\nyay 的特性：\n\n- `yay` 提供 AUR 表格补全，并且从 ABS 或 AUR 下载 PKGBUILD\n- 支持收窄搜索，并且不需要引用 PKGBUILD 源\n- `yay` 的二进制文件除了 `pacman` 以外别无依赖\n- 提供先进的包依赖解决方案，以及在编译安装之后移除编译时的依赖\n- 当在 `/etc/pacman.conf` 文件配置中启用了色彩时支持色彩输出\n- `yay` 可被配置成只支持 AUR 或者 repo 里的软件包\n\n安装 yay：\n\n> **现在yay已经添加到官方源中**\n>\n> **`sudo pacman -S yay`即可安装**\n\n当然你还可以从 `git` 克隆并编译安装。\n\n```\ngit clone https://aur.archlinux.org/yay.git\ncd yay\nmakepkg -si\n```\n\n使用 yay：\n\n搜索：\n\n```\nyay -Ss <package-name>\n```\n\n安装：\n\n```\nyay -S <package-name>\n```\n\n\n\n#### powerline\n\nPowerline 是 vim、zsh、bash、tmux、IPython、Awesome、bar、fish、lemonbar、pdb、rc、shell、tcsh、wm、i3 和 Qtil 中的一个状态栏插件。它给程序提供了状态栏，并使程序更好看。它用 Python 写成。\n\n\n\n#### VPN\n\nelectron-ssr : GUI的界面的ssr.很好用\n\n####  中文字体\n\n[参考ArchWiki]\n\n<https://wiki.archlinux.org/index.php/Font_Configuration/Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)>\n\n```\nyay -S ttf-ms-fonts ttf-roboto noto-fonts noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts ttf-dejavu\n```\n\n添加配置文件,`~/.config/fontconfig/fonts.conf` or `/etc/fonts/local.conf`\n\n### 命令行\n\n> linux 强大的命令行操作,使效率倍增,所以配置好命令行,并安装实用命令行软件是必要的\n\n#### zsh[^1]\n\n[^1]: [终端环境之Zsh＆oh-my-zsh](https://mtaoist.xyz/2018/03/14/oh-my-zsh/)\n\n```shell\nsudo pacman -S zsh zsh-completions\n\n# 将zsh设为默认shell\nchsh -s /bin/zsh\n#其他发行版可先用chsh -l 查看zsh安装位置\n```\n\n##### oh-my-zsh\n\n- curl 和 git 应该已被安装(若没有Arch 用sudo pacman -S curl git 安装，其他发行版类似。)\n\n- [Oh-my-zsh](http://ohmyz.sh/)是一个傻瓜化的zsh配置管理框架，提供了大量实用的功能，主题等。做到开箱即用，现在基本成为了Zsh的标配。\n\n- 安装\n\n  ```\n  sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n  ```\n\n- 配置文件位置： ~/.zshrc\n\n- 主题\n  `oh-my-zsh`自带大量[Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)，默认为`robbyrussell`。你也可以选择`random`，即每次打开终端随机选一个主题。\n\n  > ZSH_THEME=”你喜欢的主题名”\n  > ![themes](https://mtaoist.xyz/img/zsh_theme.png)\n\n- 常用插件\n\n  - git: 提供大量git的Aliases，[详情](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git)\n\n  - archlinux： 提供一些pacman包管理器的Aliases，[详情](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#archlinux)\n\n  - z：经常使用cd 切换路径，积累一定数据后可用z快速跳转到指定位置\n\n  - sudo：按两次[Esc]自动在前面加sudo\n\n  - pip： 补全pip 命令\n\n  - zsh-autosuggestions: 根据历史记录进行智能提示(按 ctrl+E 是正确姿势)。非oh-my-zsh自带，用git下载安装\n\n    ```\n    git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n    ```\n\n  - zsh-syntax-highlighting：命令高亮，正确显示绿色，错误为红色。非oh-my-zsh自带，用git下载安装\n\n    ```\n    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n    ```\n\n    > plugins=( 你想启用的插件，空格分隔 )\n    > ![plugins](https://mtaoist.xyz/img/zsh_plugins.png)\n\n  - 重新加载配置文件，立刻生效。\n\n    > source ~/.zshrc\n\n- 其他插件请参见官方[wiki](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview)\n\n- 少即是多，启用大量插件会严重拖慢zsh启动速度\n\n---\n\n我这里采用的是`agnoster`主题\n为在使用tmux时不重复显示`whoami@whereami`做两处修改\n\n- 在`/etc/profile`中添加环境变量\n  ```\n  DEFAULT_USER=$USER\n  ```\n- 在`agnoster`主题文件91行中做如下修改\n  ```git\n  - if [[ \"$USER\" != \"$DEFAULT_USER\" || -n \"$SSH_CLIENT\"]]; then\n  + if [[ \"$USER\" != \"$DEFAULT_USER\" || (( -n \"$SSH_CLIENT\" && -z \"$TMUX\" )) ]]; then\n  ```\n  这样在本地初始打开一个terminal时不会显示,ssh远程连接是时显示\n  进入tmux时不会显示\n\n原因是\n[Archlinux下安装和配置zsh](https://blog.csdn.net/kingolie/article/details/53066679)\n\n#### tmux\n\n安装tmux\n\n```shell\nsudo pacman -S tmux\n```\n\n在这里配置tmux\n<https://github.com/gpakosz/.tmux> 这个简单好看,且对true color支持很好,但对\nhttps://github.com/samoshkin/tmux-config  <--推荐这个配置,这个配置针对键位的优化很好,\n\n[为 vim + tmux 开启真彩色(true color)](http://lotabout.me/2018/true-color-for-tmux-and-vim/)\n\n[tmux进阶之tmuxinator](https://blog.csdn.net/u014717036/article/details/60139776)\n\n>   FAQ:\n>\n>   1.  tmux 嵌套使用的话，如何将 tmux 命令发送到嵌套内的会话窗口？[转载自](<https://blog.csdn.net/henryhu712/article/details/83824487>)\n>\n>         很常见的例子是，在本地用 tmux 登陆远程服务器，服务器上又使用了 tmux。问题是，在这种情况下，tmux 指令被外层会话窗口捕获（本地 tmux），根本无法控制服务器上运行的 tmux。例如，想退出服务器上的会话，ctrl + b, d, 结果退出的是本地 tmux 连接, sh*t。\n>\n>         介绍一个简单方法：按着 ctrl，点击两次 b 键，这样发出的 tmux 指令就是发送到内层窗口会话！如此简单！\n>\n>   ---\n\n\n\n#### neovim\n\n> neovim属于vim的加强版  功能更加强大\n\n注意的是启动neovim的命令式`nvim`而不是`neovim`\n\n同时安装 [nerd-fonts](https://gitee.com/hustlion-dev/nerd-fonts#option-3-install-script) \n\n> 如果安装spacevim 则不需要手动安装nerd-fonts\n\n##### spacevim\n\n一个定制化的vim配置,支持`vim,neovim` \n\n[官网](https://spacevim.org/)\n\n> 初学的时候可以使用这个省事儿些,但是后面学习使用vim最好采用自己的配置,按需添加插件配置.\n\n\n\n#### *Xshell下256/真色支持\n\n检查当前是否为256/真色[参考本篇文章](https://gaomf.cn/2017/01/16/Terminal_Color/)\n\n\n我这里的xshell只能支持256色\n\n这时xshell中只有在tmux下spacevim才能显示256色,不支持真色\n\n在.zshrc文件头添加\n```shell\nsh /${.zshrc的目录}/.change_term.sh\n```\n.change_term.sh文件内容如下\n```shell\necho \"before: $TERM\"\nif [ \"$TERM\" = \"linux\" ]\nthen\n  echo \"export TERM=xterm-256color\"\n  export TERM=xterm-256color\nelif [ \"$TERM\" = \"xterm\" ]\nthen\n  echo \"export TERM=tmux-direct\"\n  export TERM=tmux-direct\nelif [ \"$TERM\" = \"xterm-256color\" ]\nthen\n  echo \"export TERM=xterm-direct\"\n  export TERM=xterm-direct\nelse\n  echo \"export TERM=tmux-256color\"\n  export TERM=tmux-256color\nfi\necho \"now: $TERM\"\n# 如果是ssh自动启用tmux\nif [ -n \"$SSH_CLIENT\" ]\nthen\n  tmux\nfi\n\nclear \n```\n\nglances: 代替htop的资源监控工具\n\nranger: ranger是一个以[GPL](https://baike.baidu.com/item/GPL)许可证发放源码，默认使用VIM风格键盘绑定、[curses](https://baike.baidu.com/item/curses/1630775)图形库，基于字符终端的[文件管理器](https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/8716754)，是自由免费软件。\n\ntig: git的命令行管理软件\n\ndockly: docker的命令行管理软件\n\nwtfutil: 基于 Terminal 的个人 dashboard 实用程序，专为显示不常用的但非常重要的日常数据而设计\n\n### 常用软件\n\n#### 编辑器&IDE\n\nJetBrains ToolBox: JB全家桶,管理Clion,IDEA,PyCharm项目\n\ncode::blocks\n\nvscode: \n\nTypora: markdown编辑器\n\n#### 终端\n\nYakuake: 悬挂式命令行,很方便\n\n#### 开发工具\n\nGitKraken: git的图形化管理软件\n\n: (文件对比工具)\n\n#### 影音\n\n网易云音乐\n\n#### 浏览器\n\ngoogle-chrome\n\n#### 通讯工具\n\ndeepin.com.qq.office： tim\n\ndeepin-wechat： 微信\n\n> wine程序字体dpi太小导致视觉观感很难受\n>\n> 调整DPI字体\n>\n> 1，先退出deepin-tim或deepin-qq，否则会提示错误。\n>\n> 2，运行**env WINEPREFIX=\"$HOME/.deepinwine/Deepin-TIM\" winecfg**（如果是修改QQ界面字体大小，就把Deepin-TIM改成Deepin-QQ），然后将屏幕分辨率拖放到合适的大小（一般120就可以了）。\n\ngitter:\n\ntelegram:\n\n#### 虚拟机\n\ndocker\n\nvirtualbox\n\n#### helper\n\nalbert: linux下的启动器 \n\n\n\n### 桌面环境\n\n> [参考](https://blog.csdn.net/kingolie/article/details/76723448)\n>\n> 如果安装manjaro 就不需要手动安装这些了\n\n#### **1、安装显卡驱动**\n\n```zsh\n# lspci | grep VGA    # 确定显卡型号\n# pacman -S <驱动包>\n#\n# # 官方仓库提供的驱动包：\n# # +----------------------+--------------------+--------------+\n# # |                      |        开源        |     私有     |\n# # +----------------------+--------------------+--------------+\n# # |         通用         |   xf86-video-vesa  |              |\n# # +----------------------+--------------------+--------------+\n# # |         Intel        |  xf86-video-intel  |              |\n# # +--------+-------------+--------------------+--------------+\n# # |        | GeForce 9+  |                    |    nvidia    |\n# # +        +-------------+                    +--------------+\n# # | nVidia | GeForce 8/9 | xf86-video-nouveau | nvidia-340xx |\n# # +        +-------------+                    +--------------+\n# # |        | GeForce 6/7 |                    | nvidia-304xx |\n# # +--------+-------------+--------------------+--------------+\n# # |        AMD/ATI       |   xf86-video-ati   |              |\n# # +----------------------+--------------------+--------------+12345678910111213141516171819\n```\n\n#### **2、安装桌面环境**\n\n所有桌面环境都需要依赖xorg。所以先要安装xorg组。\n\n```shell\npacman -S xorg\n```\n\n输入命令之后首先会询问要安装xorg组下的哪些包，选择全部。然后对于libgl包有个四个不同的实现，选择mesa-libgl。 \n然后再安装xorg-xinit和xterm：\n\n```shell\npacman -S xorg-xinit xterm\n```\n\n安装完成之后就可以使用startx命令启动xorg的简易界面了。进入成功的话会显示出几个简陋的窗口。然后按Ctrl+D就可以退出了。\n\n#### **3、安装xfce4桌面**\n\n安装xfce4桌面和附带的软件包：\n\n```shell\npacman -S xfce4 xfce4-goodies\n```\n\n#### **4、安装LightDM登录管理器(显示管理器)**\n\n详细安装和配置看arch-wiki-lighdm \n我没有通过startx的方式启动桌面环境，而是使用了登录管理器lightdm \n安装：\n\n```zsh\npacman -S lightdm lightdm-gtk-greeter\n```\n\n其配置文件为：\n/etc/lightdm/lightdm.conf \n安装好之后测试启动：\n\n```shell\nsystemctl start lightdm.service1\n```\n\n如果正常就会看到熟悉的登录界面了，不过不要登录，现在只是测试lightdm是否可以正常启动 \n点击画面上的关机小图标，弹出关机对话，选择注销! \n注销之后就回到之前的tty命令行模式了，可以看到相关的启动信息 \n一切正常，所以设置lightdm为开机自动启动，这样以后开机就不会出现tty命令行界面了，而是直接进入登录界面：\n\n```shell\nsystemctl enable lightdm.service\n```\n\n之后你可以重启进入xfce4图形界面，然后在图形界面中使用终端来继续以下配置步骤，也可以不重启，直接继续\n\n进入xfce4图形界面的命令为`startxfce4`\n\n\n\n#### 桌面美化\n\n好好干活,美化个屁.\n","slug":"StudyLinux-arch","published":1,"updated":"2019-04-17T11:16:35.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2y00j9safkyht5vl3m","content":"<blockquote>\n<p>manjaro 真好用 arch 再见!</p>\n<p>推荐manjaro-deepin 对中文的支持比较好</p>\n<p>桌面环境真的是个大坑啊   </p>\n<p>现在觉得折腾确实挺有趣的, 但以后有机会还是配一个mbp吧, linux的桌面环境是真的烦人..aur和完善的桌面环境感觉还是后者比较重要.</p>\n<p>争取能做出来一个安装+部署配置的脚本</p>\n</blockquote>\n<h1 id=\"Arch-踩坑笔记\"><a href=\"#Arch-踩坑笔记\" class=\"headerlink\" title=\"Arch 踩坑笔记\"></a>Arch 踩坑笔记</h1><blockquote>\n<p>记录一下从0开始玩linux的经历</p>\n<p>其实之前已经有了一点ubuntu的使用经验 但是很浅</p>\n<p>Arch 作为’最难’安装的linux系统  通过它可以更好的了解linux</p>\n<p>这里是VMware安装的Arch虚拟机<br><a href=\"https://blog.csdn.net/u011054333/article/details/50631599\" target=\"_blank\" rel=\"noopener\">配置和美化Arch Linux</a></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装:\"></a>安装:</h2><p>这里参考</p>\n<blockquote>\n<p> <strong>注意引导方式建议使用rEFInd 代替教程里采用的grub</strong></p>\n<p><a href=\"https://www.viseator.com/2017/05/17/arch_install/\" target=\"_blank\" rel=\"noopener\">这是最全面的安装指南</a></p>\n</blockquote>\n<p>如果进入不了<code>[root@archiso ]</code> 是物理机安装时 u盘的卷标不是`ARCH_20XXYY</p>\n<h3 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置:\"></a>基础设置:</h3><h4 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h4><pre><code># useradd -m -G wheel &lt;username&gt; （请自行替换username为你的用户名）\n# passwd &lt;username&gt; （请自行替换username为你的用户名）\n</code></pre><h4 id=\"开机自动联网\"><a href=\"#开机自动联网\" class=\"headerlink\" title=\"开机自动联网\"></a>开机自动联网</h4><pre><code class=\"shell\"># systemctl enable dhcpcd\n</code></pre>\n<h4 id=\"网络工具\"><a href=\"#网络工具\" class=\"headerlink\" title=\"网络工具\"></a>网络工具</h4><pre><code class=\"shell\"># pacman -Syy net-tools\n</code></pre>\n<h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><p>装完archlinux，因为时区的问题，时间总是比实际快了8个小时，找了各种办法，最终使用了openNTPD的方法</p>\n<p>设置时区：<code>sudo ln sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p>\n<p>安装openNTPD：<code>sudo pacman -S openntpd</code></p>\n<p>重启openNTPD：<code>systemctl restart openntpd</code></p>\n<p>设置开机启动：<code>systemctl enable openntpd</code></p>\n<h4 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h4><p>安装ssh</p>\n<pre><code># pacman -Syy openssh\n</code></pre><p>启动服务</p>\n<pre><code># systemctl start sshd\n</code></pre><p>开机启动</p>\n<pre><code># systemctl enable sshd.service\n</code></pre><h4 id=\"启用中国源\"><a href=\"#启用中国源\" class=\"headerlink\" title=\"启用中国源\"></a>启用中国源</h4><pre><code class=\"shell\">sudo pacman-mirrors -c China\n</code></pre>\n<h4 id=\"添加archlinuxcn源\"><a href=\"#添加archlinuxcn源\" class=\"headerlink\" title=\"添加archlinuxcn源\"></a>添加archlinuxcn源</h4><p>archlinuxcn源至您的 /etc/pacman.conf</p>\n<pre><code class=\"toml\">[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n</code></pre>\n<h4 id=\"aur助手\"><a href=\"#aur助手\" class=\"headerlink\" title=\"aur助手\"></a>aur助手</h4><p><a href=\"https://github.com/Jguer/yay\" target=\"_blank\" rel=\"noopener\">yay</a> 是下一个最好的 AUR 助手。它使用 Go 语言写成，宗旨是提供最少化用户输入的 <code>pacman</code> 界面、yaourt 式的搜索，而几乎没有任何依赖软件。</p>\n<p>yay 的特性：</p>\n<ul>\n<li><code>yay</code> 提供 AUR 表格补全，并且从 ABS 或 AUR 下载 PKGBUILD</li>\n<li>支持收窄搜索，并且不需要引用 PKGBUILD 源</li>\n<li><code>yay</code> 的二进制文件除了 <code>pacman</code> 以外别无依赖</li>\n<li>提供先进的包依赖解决方案，以及在编译安装之后移除编译时的依赖</li>\n<li>当在 <code>/etc/pacman.conf</code> 文件配置中启用了色彩时支持色彩输出</li>\n<li><code>yay</code> 可被配置成只支持 AUR 或者 repo 里的软件包</li>\n</ul>\n<p>安装 yay：</p>\n<blockquote>\n<p><strong>现在yay已经添加到官方源中</strong></p>\n<p><strong><code>sudo pacman -S yay</code>即可安装</strong></p>\n</blockquote>\n<p>当然你还可以从 <code>git</code> 克隆并编译安装。</p>\n<pre><code>git clone https://aur.archlinux.org/yay.git\ncd yay\nmakepkg -si\n</code></pre><p>使用 yay：</p>\n<p>搜索：</p>\n<pre><code>yay -Ss &lt;package-name&gt;\n</code></pre><p>安装：</p>\n<pre><code>yay -S &lt;package-name&gt;\n</code></pre><h4 id=\"powerline\"><a href=\"#powerline\" class=\"headerlink\" title=\"powerline\"></a>powerline</h4><p>Powerline 是 vim、zsh、bash、tmux、IPython、Awesome、bar、fish、lemonbar、pdb、rc、shell、tcsh、wm、i3 和 Qtil 中的一个状态栏插件。它给程序提供了状态栏，并使程序更好看。它用 Python 写成。</p>\n<h4 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h4><p>electron-ssr : GUI的界面的ssr.很好用</p>\n<h4 id=\"中文字体\"><a href=\"#中文字体\" class=\"headerlink\" title=\"中文字体\"></a>中文字体</h4><p>[参考ArchWiki]</p>\n<p><a href=\"https://wiki.archlinux.org/index.php/Font_Configuration/Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\" target=\"_blank\" rel=\"noopener\">https://wiki.archlinux.org/index.php/Font_Configuration/Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>\n<pre><code>yay -S ttf-ms-fonts ttf-roboto noto-fonts noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts ttf-dejavu\n</code></pre><p>添加配置文件,<code>~/.config/fontconfig/fonts.conf</code> or <code>/etc/fonts/local.conf</code></p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><blockquote>\n<p>linux 强大的命令行操作,使效率倍增,所以配置好命令行,并安装实用命令行软件是必要的</p>\n</blockquote>\n<h4 id=\"zsh-1\"><a href=\"#zsh-1\" class=\"headerlink\" title=\"zsh^1\"></a>zsh<a href=\"[终端环境之Zsh＆oh-my-zsh](https://mtaoist.xyz/2018/03/14/oh-my-zsh/)\">^1</a></h4><pre><code class=\"shell\">sudo pacman -S zsh zsh-completions\n\n# 将zsh设为默认shell\nchsh -s /bin/zsh\n#其他发行版可先用chsh -l 查看zsh安装位置\n</code></pre>\n<h5 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h5><ul>\n<li><p>curl 和 git 应该已被安装(若没有Arch 用sudo pacman -S curl git 安装，其他发行版类似。)</p>\n</li>\n<li><p><a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"noopener\">Oh-my-zsh</a>是一个傻瓜化的zsh配置管理框架，提供了大量实用的功能，主题等。做到开箱即用，现在基本成为了Zsh的标配。</p>\n</li>\n<li><p>安装</p>\n<pre><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\n</code></pre></li>\n<li><p>配置文件位置： ~/.zshrc</p>\n</li>\n<li><p>主题<br><code>oh-my-zsh</code>自带大量<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"noopener\">Themes</a>，默认为<code>robbyrussell</code>。你也可以选择<code>random</code>，即每次打开终端随机选一个主题。</p>\n<blockquote>\n<p>ZSH_THEME=”你喜欢的主题名”<br><img src=\"https://mtaoist.xyz/img/zsh_theme.png\" alt=\"themes\"></p>\n</blockquote>\n</li>\n<li><p>常用插件</p>\n<ul>\n<li><p>git: 提供大量git的Aliases，<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n</li>\n<li><p>archlinux： 提供一些pacman包管理器的Aliases，<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#archlinux\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n</li>\n<li><p>z：经常使用cd 切换路径，积累一定数据后可用z快速跳转到指定位置</p>\n</li>\n<li><p>sudo：按两次[Esc]自动在前面加sudo</p>\n</li>\n<li><p>pip： 补全pip 命令</p>\n</li>\n<li><p>zsh-autosuggestions: 根据历史记录进行智能提示(按 ctrl+E 是正确姿势)。非oh-my-zsh自带，用git下载安装</p>\n<pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n</code></pre></li>\n<li><p>zsh-syntax-highlighting：命令高亮，正确显示绿色，错误为红色。非oh-my-zsh自带，用git下载安装</p>\n<pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n</code></pre><blockquote>\n<p>plugins=( 你想启用的插件，空格分隔 )<br><img src=\"https://mtaoist.xyz/img/zsh_plugins.png\" alt=\"plugins\"></p>\n</blockquote>\n</li>\n<li><p>重新加载配置文件，立刻生效。</p>\n<blockquote>\n<p>source ~/.zshrc</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>其他插件请参见官方<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n</li>\n<li><p>少即是多，启用大量插件会严重拖慢zsh启动速度</p>\n</li>\n</ul>\n<hr>\n<p>我这里采用的是<code>agnoster</code>主题<br>为在使用tmux时不重复显示<code>whoami@whereami</code>做两处修改</p>\n<ul>\n<li>在<code>/etc/profile</code>中添加环境变量<pre><code>DEFAULT_USER=$USER\n</code></pre></li>\n<li>在<code>agnoster</code>主题文件91行中做如下修改<pre><code class=\"git\">- if [[ &quot;$USER&quot; != &quot;$DEFAULT_USER&quot; || -n &quot;$SSH_CLIENT&quot;]]; then\n+ if [[ &quot;$USER&quot; != &quot;$DEFAULT_USER&quot; || (( -n &quot;$SSH_CLIENT&quot; &amp;&amp; -z &quot;$TMUX&quot; )) ]]; then\n</code></pre>\n这样在本地初始打开一个terminal时不会显示,ssh远程连接是时显示<br>进入tmux时不会显示</li>\n</ul>\n<p>原因是<br><a href=\"https://blog.csdn.net/kingolie/article/details/53066679\" target=\"_blank\" rel=\"noopener\">Archlinux下安装和配置zsh</a></p>\n<h4 id=\"tmux\"><a href=\"#tmux\" class=\"headerlink\" title=\"tmux\"></a>tmux</h4><p>安装tmux</p>\n<pre><code class=\"shell\">sudo pacman -S tmux\n</code></pre>\n<p>在这里配置tmux<br><a href=\"https://github.com/gpakosz/.tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/gpakosz/.tmux</a> 这个简单好看,且对true color支持很好,但对<br><a href=\"https://github.com/samoshkin/tmux-config\" target=\"_blank\" rel=\"noopener\">https://github.com/samoshkin/tmux-config</a>  &lt;–推荐这个配置,这个配置针对键位的优化很好,</p>\n<p><a href=\"http://lotabout.me/2018/true-color-for-tmux-and-vim/\" target=\"_blank\" rel=\"noopener\">为 vim + tmux 开启真彩色(true color)</a></p>\n<p><a href=\"https://blog.csdn.net/u014717036/article/details/60139776\" target=\"_blank\" rel=\"noopener\">tmux进阶之tmuxinator</a></p>\n<blockquote>\n<p>  FAQ:</p>\n<ol>\n<li><p>tmux 嵌套使用的话，如何将 tmux 命令发送到嵌套内的会话窗口？<a href=\"https://blog.csdn.net/henryhu712/article/details/83824487\" target=\"_blank\" rel=\"noopener\">转载自</a></p>\n<p>  很常见的例子是，在本地用 tmux 登陆远程服务器，服务器上又使用了 tmux。问题是，在这种情况下，tmux 指令被外层会话窗口捕获（本地 tmux），根本无法控制服务器上运行的 tmux。例如，想退出服务器上的会话，ctrl + b, d, 结果退出的是本地 tmux 连接, sh*t。</p>\n<p>  介绍一个简单方法：按着 ctrl，点击两次 b 键，这样发出的 tmux 指令就是发送到内层窗口会话！如此简单！</p>\n</li>\n</ol>\n<hr>\n</blockquote>\n<h4 id=\"neovim\"><a href=\"#neovim\" class=\"headerlink\" title=\"neovim\"></a>neovim</h4><blockquote>\n<p>neovim属于vim的加强版  功能更加强大</p>\n</blockquote>\n<p>注意的是启动neovim的命令式<code>nvim</code>而不是<code>neovim</code></p>\n<p>同时安装 <a href=\"https://gitee.com/hustlion-dev/nerd-fonts#option-3-install-script\" target=\"_blank\" rel=\"noopener\">nerd-fonts</a> </p>\n<blockquote>\n<p>如果安装spacevim 则不需要手动安装nerd-fonts</p>\n</blockquote>\n<h5 id=\"spacevim\"><a href=\"#spacevim\" class=\"headerlink\" title=\"spacevim\"></a>spacevim</h5><p>一个定制化的vim配置,支持<code>vim,neovim</code> </p>\n<p><a href=\"https://spacevim.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<blockquote>\n<p>初学的时候可以使用这个省事儿些,但是后面学习使用vim最好采用自己的配置,按需添加插件配置.</p>\n</blockquote>\n<h4 id=\"Xshell下256-真色支持\"><a href=\"#Xshell下256-真色支持\" class=\"headerlink\" title=\"*Xshell下256/真色支持\"></a>*Xshell下256/真色支持</h4><p>检查当前是否为256/真色<a href=\"https://gaomf.cn/2017/01/16/Terminal_Color/\" target=\"_blank\" rel=\"noopener\">参考本篇文章</a></p>\n<p>我这里的xshell只能支持256色</p>\n<p>这时xshell中只有在tmux下spacevim才能显示256色,不支持真色</p>\n<p>在.zshrc文件头添加</p>\n<pre><code class=\"shell\">sh /${.zshrc的目录}/.change_term.sh\n</code></pre>\n<p>.change_term.sh文件内容如下</p>\n<pre><code class=\"shell\">echo &quot;before: $TERM&quot;\nif [ &quot;$TERM&quot; = &quot;linux&quot; ]\nthen\n  echo &quot;export TERM=xterm-256color&quot;\n  export TERM=xterm-256color\nelif [ &quot;$TERM&quot; = &quot;xterm&quot; ]\nthen\n  echo &quot;export TERM=tmux-direct&quot;\n  export TERM=tmux-direct\nelif [ &quot;$TERM&quot; = &quot;xterm-256color&quot; ]\nthen\n  echo &quot;export TERM=xterm-direct&quot;\n  export TERM=xterm-direct\nelse\n  echo &quot;export TERM=tmux-256color&quot;\n  export TERM=tmux-256color\nfi\necho &quot;now: $TERM&quot;\n# 如果是ssh自动启用tmux\nif [ -n &quot;$SSH_CLIENT&quot; ]\nthen\n  tmux\nfi\n\nclear \n</code></pre>\n<p>glances: 代替htop的资源监控工具</p>\n<p>ranger: ranger是一个以<a href=\"https://baike.baidu.com/item/GPL\" target=\"_blank\" rel=\"noopener\">GPL</a>许可证发放源码，默认使用VIM风格键盘绑定、<a href=\"https://baike.baidu.com/item/curses/1630775\" target=\"_blank\" rel=\"noopener\">curses</a>图形库，基于字符终端的<a href=\"https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/8716754\" target=\"_blank\" rel=\"noopener\">文件管理器</a>，是自由免费软件。</p>\n<p>tig: git的命令行管理软件</p>\n<p>dockly: docker的命令行管理软件</p>\n<p>wtfutil: 基于 Terminal 的个人 dashboard 实用程序，专为显示不常用的但非常重要的日常数据而设计</p>\n<h3 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h3><h4 id=\"编辑器-amp-IDE\"><a href=\"#编辑器-amp-IDE\" class=\"headerlink\" title=\"编辑器&amp;IDE\"></a>编辑器&amp;IDE</h4><p>JetBrains ToolBox: JB全家桶,管理Clion,IDEA,PyCharm项目</p>\n<p>code::blocks</p>\n<p>vscode: </p>\n<p>Typora: markdown编辑器</p>\n<h4 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h4><p>Yakuake: 悬挂式命令行,很方便</p>\n<h4 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h4><p>GitKraken: git的图形化管理软件</p>\n<p>: (文件对比工具)</p>\n<h4 id=\"影音\"><a href=\"#影音\" class=\"headerlink\" title=\"影音\"></a>影音</h4><p>网易云音乐</p>\n<h4 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h4><p>google-chrome</p>\n<h4 id=\"通讯工具\"><a href=\"#通讯工具\" class=\"headerlink\" title=\"通讯工具\"></a>通讯工具</h4><p>deepin.com.qq.office： tim</p>\n<p>deepin-wechat： 微信</p>\n<blockquote>\n<p>wine程序字体dpi太小导致视觉观感很难受</p>\n<p>调整DPI字体</p>\n<p>1，先退出deepin-tim或deepin-qq，否则会提示错误。</p>\n<p>2，运行<strong>env WINEPREFIX=”$HOME/.deepinwine/Deepin-TIM” winecfg</strong>（如果是修改QQ界面字体大小，就把Deepin-TIM改成Deepin-QQ），然后将屏幕分辨率拖放到合适的大小（一般120就可以了）。</p>\n</blockquote>\n<p>gitter:</p>\n<p>telegram:</p>\n<h4 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h4><p>docker</p>\n<p>virtualbox</p>\n<h4 id=\"helper\"><a href=\"#helper\" class=\"headerlink\" title=\"helper\"></a>helper</h4><p>albert: linux下的启动器 </p>\n<h3 id=\"桌面环境\"><a href=\"#桌面环境\" class=\"headerlink\" title=\"桌面环境\"></a>桌面环境</h3><blockquote>\n<p><a href=\"https://blog.csdn.net/kingolie/article/details/76723448\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p>如果安装manjaro 就不需要手动安装这些了</p>\n</blockquote>\n<h4 id=\"1、安装显卡驱动\"><a href=\"#1、安装显卡驱动\" class=\"headerlink\" title=\"1、安装显卡驱动\"></a><strong>1、安装显卡驱动</strong></h4><pre><code class=\"zsh\"># lspci | grep VGA    # 确定显卡型号\n# pacman -S &lt;驱动包&gt;\n#\n# # 官方仓库提供的驱动包：\n# # +----------------------+--------------------+--------------+\n# # |                      |        开源        |     私有     |\n# # +----------------------+--------------------+--------------+\n# # |         通用         |   xf86-video-vesa  |              |\n# # +----------------------+--------------------+--------------+\n# # |         Intel        |  xf86-video-intel  |              |\n# # +--------+-------------+--------------------+--------------+\n# # |        | GeForce 9+  |                    |    nvidia    |\n# # +        +-------------+                    +--------------+\n# # | nVidia | GeForce 8/9 | xf86-video-nouveau | nvidia-340xx |\n# # +        +-------------+                    +--------------+\n# # |        | GeForce 6/7 |                    | nvidia-304xx |\n# # +--------+-------------+--------------------+--------------+\n# # |        AMD/ATI       |   xf86-video-ati   |              |\n# # +----------------------+--------------------+--------------+12345678910111213141516171819\n</code></pre>\n<h4 id=\"2、安装桌面环境\"><a href=\"#2、安装桌面环境\" class=\"headerlink\" title=\"2、安装桌面环境\"></a><strong>2、安装桌面环境</strong></h4><p>所有桌面环境都需要依赖xorg。所以先要安装xorg组。</p>\n<pre><code class=\"shell\">pacman -S xorg\n</code></pre>\n<p>输入命令之后首先会询问要安装xorg组下的哪些包，选择全部。然后对于libgl包有个四个不同的实现，选择mesa-libgl。<br>然后再安装xorg-xinit和xterm：</p>\n<pre><code class=\"shell\">pacman -S xorg-xinit xterm\n</code></pre>\n<p>安装完成之后就可以使用startx命令启动xorg的简易界面了。进入成功的话会显示出几个简陋的窗口。然后按Ctrl+D就可以退出了。</p>\n<h4 id=\"3、安装xfce4桌面\"><a href=\"#3、安装xfce4桌面\" class=\"headerlink\" title=\"3、安装xfce4桌面\"></a><strong>3、安装xfce4桌面</strong></h4><p>安装xfce4桌面和附带的软件包：</p>\n<pre><code class=\"shell\">pacman -S xfce4 xfce4-goodies\n</code></pre>\n<h4 id=\"4、安装LightDM登录管理器-显示管理器\"><a href=\"#4、安装LightDM登录管理器-显示管理器\" class=\"headerlink\" title=\"4、安装LightDM登录管理器(显示管理器)\"></a><strong>4、安装LightDM登录管理器(显示管理器)</strong></h4><p>详细安装和配置看arch-wiki-lighdm<br>我没有通过startx的方式启动桌面环境，而是使用了登录管理器lightdm<br>安装：</p>\n<pre><code class=\"zsh\">pacman -S lightdm lightdm-gtk-greeter\n</code></pre>\n<p>其配置文件为：<br>/etc/lightdm/lightdm.conf<br>安装好之后测试启动：</p>\n<pre><code class=\"shell\">systemctl start lightdm.service1\n</code></pre>\n<p>如果正常就会看到熟悉的登录界面了，不过不要登录，现在只是测试lightdm是否可以正常启动<br>点击画面上的关机小图标，弹出关机对话，选择注销!<br>注销之后就回到之前的tty命令行模式了，可以看到相关的启动信息<br>一切正常，所以设置lightdm为开机自动启动，这样以后开机就不会出现tty命令行界面了，而是直接进入登录界面：</p>\n<pre><code class=\"shell\">systemctl enable lightdm.service\n</code></pre>\n<p>之后你可以重启进入xfce4图形界面，然后在图形界面中使用终端来继续以下配置步骤，也可以不重启，直接继续</p>\n<p>进入xfce4图形界面的命令为<code>startxfce4</code></p>\n<h4 id=\"桌面美化\"><a href=\"#桌面美化\" class=\"headerlink\" title=\"桌面美化\"></a>桌面美化</h4><p>好好干活,美化个屁.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>manjaro 真好用 arch 再见!</p>\n<p>推荐manjaro-deepin 对中文的支持比较好</p>\n<p>桌面环境真的是个大坑啊   </p>\n<p>现在觉得折腾确实挺有趣的, 但以后有机会还是配一个mbp吧, linux的桌面环境是真的烦人..aur和完善的桌面环境感觉还是后者比较重要.</p>\n<p>争取能做出来一个安装+部署配置的脚本</p>\n</blockquote>\n<h1 id=\"Arch-踩坑笔记\"><a href=\"#Arch-踩坑笔记\" class=\"headerlink\" title=\"Arch 踩坑笔记\"></a>Arch 踩坑笔记</h1><blockquote>\n<p>记录一下从0开始玩linux的经历</p>\n<p>其实之前已经有了一点ubuntu的使用经验 但是很浅</p>\n<p>Arch 作为’最难’安装的linux系统  通过它可以更好的了解linux</p>\n<p>这里是VMware安装的Arch虚拟机<br><a href=\"https://blog.csdn.net/u011054333/article/details/50631599\" target=\"_blank\" rel=\"noopener\">配置和美化Arch Linux</a></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装:\"></a>安装:</h2><p>这里参考</p>\n<blockquote>\n<p> <strong>注意引导方式建议使用rEFInd 代替教程里采用的grub</strong></p>\n<p><a href=\"https://www.viseator.com/2017/05/17/arch_install/\" target=\"_blank\" rel=\"noopener\">这是最全面的安装指南</a></p>\n</blockquote>\n<p>如果进入不了<code>[root@archiso ]</code> 是物理机安装时 u盘的卷标不是`ARCH_20XXYY</p>\n<h3 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置:\"></a>基础设置:</h3><h4 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h4><pre><code># useradd -m -G wheel &lt;username&gt; （请自行替换username为你的用户名）\n# passwd &lt;username&gt; （请自行替换username为你的用户名）\n</code></pre><h4 id=\"开机自动联网\"><a href=\"#开机自动联网\" class=\"headerlink\" title=\"开机自动联网\"></a>开机自动联网</h4><pre><code class=\"shell\"># systemctl enable dhcpcd\n</code></pre>\n<h4 id=\"网络工具\"><a href=\"#网络工具\" class=\"headerlink\" title=\"网络工具\"></a>网络工具</h4><pre><code class=\"shell\"># pacman -Syy net-tools\n</code></pre>\n<h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><p>装完archlinux，因为时区的问题，时间总是比实际快了8个小时，找了各种办法，最终使用了openNTPD的方法</p>\n<p>设置时区：<code>sudo ln sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p>\n<p>安装openNTPD：<code>sudo pacman -S openntpd</code></p>\n<p>重启openNTPD：<code>systemctl restart openntpd</code></p>\n<p>设置开机启动：<code>systemctl enable openntpd</code></p>\n<h4 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h4><p>安装ssh</p>\n<pre><code># pacman -Syy openssh\n</code></pre><p>启动服务</p>\n<pre><code># systemctl start sshd\n</code></pre><p>开机启动</p>\n<pre><code># systemctl enable sshd.service\n</code></pre><h4 id=\"启用中国源\"><a href=\"#启用中国源\" class=\"headerlink\" title=\"启用中国源\"></a>启用中国源</h4><pre><code class=\"shell\">sudo pacman-mirrors -c China\n</code></pre>\n<h4 id=\"添加archlinuxcn源\"><a href=\"#添加archlinuxcn源\" class=\"headerlink\" title=\"添加archlinuxcn源\"></a>添加archlinuxcn源</h4><p>archlinuxcn源至您的 /etc/pacman.conf</p>\n<pre><code class=\"toml\">[archlinuxcn]\n#The Chinese Arch Linux communities packages.\nSigLevel = Optional TrustAll\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n</code></pre>\n<h4 id=\"aur助手\"><a href=\"#aur助手\" class=\"headerlink\" title=\"aur助手\"></a>aur助手</h4><p><a href=\"https://github.com/Jguer/yay\" target=\"_blank\" rel=\"noopener\">yay</a> 是下一个最好的 AUR 助手。它使用 Go 语言写成，宗旨是提供最少化用户输入的 <code>pacman</code> 界面、yaourt 式的搜索，而几乎没有任何依赖软件。</p>\n<p>yay 的特性：</p>\n<ul>\n<li><code>yay</code> 提供 AUR 表格补全，并且从 ABS 或 AUR 下载 PKGBUILD</li>\n<li>支持收窄搜索，并且不需要引用 PKGBUILD 源</li>\n<li><code>yay</code> 的二进制文件除了 <code>pacman</code> 以外别无依赖</li>\n<li>提供先进的包依赖解决方案，以及在编译安装之后移除编译时的依赖</li>\n<li>当在 <code>/etc/pacman.conf</code> 文件配置中启用了色彩时支持色彩输出</li>\n<li><code>yay</code> 可被配置成只支持 AUR 或者 repo 里的软件包</li>\n</ul>\n<p>安装 yay：</p>\n<blockquote>\n<p><strong>现在yay已经添加到官方源中</strong></p>\n<p><strong><code>sudo pacman -S yay</code>即可安装</strong></p>\n</blockquote>\n<p>当然你还可以从 <code>git</code> 克隆并编译安装。</p>\n<pre><code>git clone https://aur.archlinux.org/yay.git\ncd yay\nmakepkg -si\n</code></pre><p>使用 yay：</p>\n<p>搜索：</p>\n<pre><code>yay -Ss &lt;package-name&gt;\n</code></pre><p>安装：</p>\n<pre><code>yay -S &lt;package-name&gt;\n</code></pre><h4 id=\"powerline\"><a href=\"#powerline\" class=\"headerlink\" title=\"powerline\"></a>powerline</h4><p>Powerline 是 vim、zsh、bash、tmux、IPython、Awesome、bar、fish、lemonbar、pdb、rc、shell、tcsh、wm、i3 和 Qtil 中的一个状态栏插件。它给程序提供了状态栏，并使程序更好看。它用 Python 写成。</p>\n<h4 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h4><p>electron-ssr : GUI的界面的ssr.很好用</p>\n<h4 id=\"中文字体\"><a href=\"#中文字体\" class=\"headerlink\" title=\"中文字体\"></a>中文字体</h4><p>[参考ArchWiki]</p>\n<p><a href=\"https://wiki.archlinux.org/index.php/Font_Configuration/Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\" target=\"_blank\" rel=\"noopener\">https://wiki.archlinux.org/index.php/Font_Configuration/Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>\n<pre><code>yay -S ttf-ms-fonts ttf-roboto noto-fonts noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts ttf-dejavu\n</code></pre><p>添加配置文件,<code>~/.config/fontconfig/fonts.conf</code> or <code>/etc/fonts/local.conf</code></p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><blockquote>\n<p>linux 强大的命令行操作,使效率倍增,所以配置好命令行,并安装实用命令行软件是必要的</p>\n</blockquote>\n<h4 id=\"zsh-1\"><a href=\"#zsh-1\" class=\"headerlink\" title=\"zsh^1\"></a>zsh<a href=\"[终端环境之Zsh＆oh-my-zsh](https://mtaoist.xyz/2018/03/14/oh-my-zsh/)\">^1</a></h4><pre><code class=\"shell\">sudo pacman -S zsh zsh-completions\n\n# 将zsh设为默认shell\nchsh -s /bin/zsh\n#其他发行版可先用chsh -l 查看zsh安装位置\n</code></pre>\n<h5 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h5><ul>\n<li><p>curl 和 git 应该已被安装(若没有Arch 用sudo pacman -S curl git 安装，其他发行版类似。)</p>\n</li>\n<li><p><a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"noopener\">Oh-my-zsh</a>是一个傻瓜化的zsh配置管理框架，提供了大量实用的功能，主题等。做到开箱即用，现在基本成为了Zsh的标配。</p>\n</li>\n<li><p>安装</p>\n<pre><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\n</code></pre></li>\n<li><p>配置文件位置： ~/.zshrc</p>\n</li>\n<li><p>主题<br><code>oh-my-zsh</code>自带大量<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"noopener\">Themes</a>，默认为<code>robbyrussell</code>。你也可以选择<code>random</code>，即每次打开终端随机选一个主题。</p>\n<blockquote>\n<p>ZSH_THEME=”你喜欢的主题名”<br><img src=\"https://mtaoist.xyz/img/zsh_theme.png\" alt=\"themes\"></p>\n</blockquote>\n</li>\n<li><p>常用插件</p>\n<ul>\n<li><p>git: 提供大量git的Aliases，<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n</li>\n<li><p>archlinux： 提供一些pacman包管理器的Aliases，<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#archlinux\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n</li>\n<li><p>z：经常使用cd 切换路径，积累一定数据后可用z快速跳转到指定位置</p>\n</li>\n<li><p>sudo：按两次[Esc]自动在前面加sudo</p>\n</li>\n<li><p>pip： 补全pip 命令</p>\n</li>\n<li><p>zsh-autosuggestions: 根据历史记录进行智能提示(按 ctrl+E 是正确姿势)。非oh-my-zsh自带，用git下载安装</p>\n<pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n</code></pre></li>\n<li><p>zsh-syntax-highlighting：命令高亮，正确显示绿色，错误为红色。非oh-my-zsh自带，用git下载安装</p>\n<pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n</code></pre><blockquote>\n<p>plugins=( 你想启用的插件，空格分隔 )<br><img src=\"https://mtaoist.xyz/img/zsh_plugins.png\" alt=\"plugins\"></p>\n</blockquote>\n</li>\n<li><p>重新加载配置文件，立刻生效。</p>\n<blockquote>\n<p>source ~/.zshrc</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>其他插件请参见官方<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n</li>\n<li><p>少即是多，启用大量插件会严重拖慢zsh启动速度</p>\n</li>\n</ul>\n<hr>\n<p>我这里采用的是<code>agnoster</code>主题<br>为在使用tmux时不重复显示<code>whoami@whereami</code>做两处修改</p>\n<ul>\n<li>在<code>/etc/profile</code>中添加环境变量<pre><code>DEFAULT_USER=$USER\n</code></pre></li>\n<li>在<code>agnoster</code>主题文件91行中做如下修改<pre><code class=\"git\">- if [[ &quot;$USER&quot; != &quot;$DEFAULT_USER&quot; || -n &quot;$SSH_CLIENT&quot;]]; then\n+ if [[ &quot;$USER&quot; != &quot;$DEFAULT_USER&quot; || (( -n &quot;$SSH_CLIENT&quot; &amp;&amp; -z &quot;$TMUX&quot; )) ]]; then\n</code></pre>\n这样在本地初始打开一个terminal时不会显示,ssh远程连接是时显示<br>进入tmux时不会显示</li>\n</ul>\n<p>原因是<br><a href=\"https://blog.csdn.net/kingolie/article/details/53066679\" target=\"_blank\" rel=\"noopener\">Archlinux下安装和配置zsh</a></p>\n<h4 id=\"tmux\"><a href=\"#tmux\" class=\"headerlink\" title=\"tmux\"></a>tmux</h4><p>安装tmux</p>\n<pre><code class=\"shell\">sudo pacman -S tmux\n</code></pre>\n<p>在这里配置tmux<br><a href=\"https://github.com/gpakosz/.tmux\" target=\"_blank\" rel=\"noopener\">https://github.com/gpakosz/.tmux</a> 这个简单好看,且对true color支持很好,但对<br><a href=\"https://github.com/samoshkin/tmux-config\" target=\"_blank\" rel=\"noopener\">https://github.com/samoshkin/tmux-config</a>  &lt;–推荐这个配置,这个配置针对键位的优化很好,</p>\n<p><a href=\"http://lotabout.me/2018/true-color-for-tmux-and-vim/\" target=\"_blank\" rel=\"noopener\">为 vim + tmux 开启真彩色(true color)</a></p>\n<p><a href=\"https://blog.csdn.net/u014717036/article/details/60139776\" target=\"_blank\" rel=\"noopener\">tmux进阶之tmuxinator</a></p>\n<blockquote>\n<p>  FAQ:</p>\n<ol>\n<li><p>tmux 嵌套使用的话，如何将 tmux 命令发送到嵌套内的会话窗口？<a href=\"https://blog.csdn.net/henryhu712/article/details/83824487\" target=\"_blank\" rel=\"noopener\">转载自</a></p>\n<p>  很常见的例子是，在本地用 tmux 登陆远程服务器，服务器上又使用了 tmux。问题是，在这种情况下，tmux 指令被外层会话窗口捕获（本地 tmux），根本无法控制服务器上运行的 tmux。例如，想退出服务器上的会话，ctrl + b, d, 结果退出的是本地 tmux 连接, sh*t。</p>\n<p>  介绍一个简单方法：按着 ctrl，点击两次 b 键，这样发出的 tmux 指令就是发送到内层窗口会话！如此简单！</p>\n</li>\n</ol>\n<hr>\n</blockquote>\n<h4 id=\"neovim\"><a href=\"#neovim\" class=\"headerlink\" title=\"neovim\"></a>neovim</h4><blockquote>\n<p>neovim属于vim的加强版  功能更加强大</p>\n</blockquote>\n<p>注意的是启动neovim的命令式<code>nvim</code>而不是<code>neovim</code></p>\n<p>同时安装 <a href=\"https://gitee.com/hustlion-dev/nerd-fonts#option-3-install-script\" target=\"_blank\" rel=\"noopener\">nerd-fonts</a> </p>\n<blockquote>\n<p>如果安装spacevim 则不需要手动安装nerd-fonts</p>\n</blockquote>\n<h5 id=\"spacevim\"><a href=\"#spacevim\" class=\"headerlink\" title=\"spacevim\"></a>spacevim</h5><p>一个定制化的vim配置,支持<code>vim,neovim</code> </p>\n<p><a href=\"https://spacevim.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<blockquote>\n<p>初学的时候可以使用这个省事儿些,但是后面学习使用vim最好采用自己的配置,按需添加插件配置.</p>\n</blockquote>\n<h4 id=\"Xshell下256-真色支持\"><a href=\"#Xshell下256-真色支持\" class=\"headerlink\" title=\"*Xshell下256/真色支持\"></a>*Xshell下256/真色支持</h4><p>检查当前是否为256/真色<a href=\"https://gaomf.cn/2017/01/16/Terminal_Color/\" target=\"_blank\" rel=\"noopener\">参考本篇文章</a></p>\n<p>我这里的xshell只能支持256色</p>\n<p>这时xshell中只有在tmux下spacevim才能显示256色,不支持真色</p>\n<p>在.zshrc文件头添加</p>\n<pre><code class=\"shell\">sh /${.zshrc的目录}/.change_term.sh\n</code></pre>\n<p>.change_term.sh文件内容如下</p>\n<pre><code class=\"shell\">echo &quot;before: $TERM&quot;\nif [ &quot;$TERM&quot; = &quot;linux&quot; ]\nthen\n  echo &quot;export TERM=xterm-256color&quot;\n  export TERM=xterm-256color\nelif [ &quot;$TERM&quot; = &quot;xterm&quot; ]\nthen\n  echo &quot;export TERM=tmux-direct&quot;\n  export TERM=tmux-direct\nelif [ &quot;$TERM&quot; = &quot;xterm-256color&quot; ]\nthen\n  echo &quot;export TERM=xterm-direct&quot;\n  export TERM=xterm-direct\nelse\n  echo &quot;export TERM=tmux-256color&quot;\n  export TERM=tmux-256color\nfi\necho &quot;now: $TERM&quot;\n# 如果是ssh自动启用tmux\nif [ -n &quot;$SSH_CLIENT&quot; ]\nthen\n  tmux\nfi\n\nclear \n</code></pre>\n<p>glances: 代替htop的资源监控工具</p>\n<p>ranger: ranger是一个以<a href=\"https://baike.baidu.com/item/GPL\" target=\"_blank\" rel=\"noopener\">GPL</a>许可证发放源码，默认使用VIM风格键盘绑定、<a href=\"https://baike.baidu.com/item/curses/1630775\" target=\"_blank\" rel=\"noopener\">curses</a>图形库，基于字符终端的<a href=\"https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/8716754\" target=\"_blank\" rel=\"noopener\">文件管理器</a>，是自由免费软件。</p>\n<p>tig: git的命令行管理软件</p>\n<p>dockly: docker的命令行管理软件</p>\n<p>wtfutil: 基于 Terminal 的个人 dashboard 实用程序，专为显示不常用的但非常重要的日常数据而设计</p>\n<h3 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h3><h4 id=\"编辑器-amp-IDE\"><a href=\"#编辑器-amp-IDE\" class=\"headerlink\" title=\"编辑器&amp;IDE\"></a>编辑器&amp;IDE</h4><p>JetBrains ToolBox: JB全家桶,管理Clion,IDEA,PyCharm项目</p>\n<p>code::blocks</p>\n<p>vscode: </p>\n<p>Typora: markdown编辑器</p>\n<h4 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h4><p>Yakuake: 悬挂式命令行,很方便</p>\n<h4 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h4><p>GitKraken: git的图形化管理软件</p>\n<p>: (文件对比工具)</p>\n<h4 id=\"影音\"><a href=\"#影音\" class=\"headerlink\" title=\"影音\"></a>影音</h4><p>网易云音乐</p>\n<h4 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h4><p>google-chrome</p>\n<h4 id=\"通讯工具\"><a href=\"#通讯工具\" class=\"headerlink\" title=\"通讯工具\"></a>通讯工具</h4><p>deepin.com.qq.office： tim</p>\n<p>deepin-wechat： 微信</p>\n<blockquote>\n<p>wine程序字体dpi太小导致视觉观感很难受</p>\n<p>调整DPI字体</p>\n<p>1，先退出deepin-tim或deepin-qq，否则会提示错误。</p>\n<p>2，运行<strong>env WINEPREFIX=”$HOME/.deepinwine/Deepin-TIM” winecfg</strong>（如果是修改QQ界面字体大小，就把Deepin-TIM改成Deepin-QQ），然后将屏幕分辨率拖放到合适的大小（一般120就可以了）。</p>\n</blockquote>\n<p>gitter:</p>\n<p>telegram:</p>\n<h4 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h4><p>docker</p>\n<p>virtualbox</p>\n<h4 id=\"helper\"><a href=\"#helper\" class=\"headerlink\" title=\"helper\"></a>helper</h4><p>albert: linux下的启动器 </p>\n<h3 id=\"桌面环境\"><a href=\"#桌面环境\" class=\"headerlink\" title=\"桌面环境\"></a>桌面环境</h3><blockquote>\n<p><a href=\"https://blog.csdn.net/kingolie/article/details/76723448\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p>如果安装manjaro 就不需要手动安装这些了</p>\n</blockquote>\n<h4 id=\"1、安装显卡驱动\"><a href=\"#1、安装显卡驱动\" class=\"headerlink\" title=\"1、安装显卡驱动\"></a><strong>1、安装显卡驱动</strong></h4><pre><code class=\"zsh\"># lspci | grep VGA    # 确定显卡型号\n# pacman -S &lt;驱动包&gt;\n#\n# # 官方仓库提供的驱动包：\n# # +----------------------+--------------------+--------------+\n# # |                      |        开源        |     私有     |\n# # +----------------------+--------------------+--------------+\n# # |         通用         |   xf86-video-vesa  |              |\n# # +----------------------+--------------------+--------------+\n# # |         Intel        |  xf86-video-intel  |              |\n# # +--------+-------------+--------------------+--------------+\n# # |        | GeForce 9+  |                    |    nvidia    |\n# # +        +-------------+                    +--------------+\n# # | nVidia | GeForce 8/9 | xf86-video-nouveau | nvidia-340xx |\n# # +        +-------------+                    +--------------+\n# # |        | GeForce 6/7 |                    | nvidia-304xx |\n# # +--------+-------------+--------------------+--------------+\n# # |        AMD/ATI       |   xf86-video-ati   |              |\n# # +----------------------+--------------------+--------------+12345678910111213141516171819\n</code></pre>\n<h4 id=\"2、安装桌面环境\"><a href=\"#2、安装桌面环境\" class=\"headerlink\" title=\"2、安装桌面环境\"></a><strong>2、安装桌面环境</strong></h4><p>所有桌面环境都需要依赖xorg。所以先要安装xorg组。</p>\n<pre><code class=\"shell\">pacman -S xorg\n</code></pre>\n<p>输入命令之后首先会询问要安装xorg组下的哪些包，选择全部。然后对于libgl包有个四个不同的实现，选择mesa-libgl。<br>然后再安装xorg-xinit和xterm：</p>\n<pre><code class=\"shell\">pacman -S xorg-xinit xterm\n</code></pre>\n<p>安装完成之后就可以使用startx命令启动xorg的简易界面了。进入成功的话会显示出几个简陋的窗口。然后按Ctrl+D就可以退出了。</p>\n<h4 id=\"3、安装xfce4桌面\"><a href=\"#3、安装xfce4桌面\" class=\"headerlink\" title=\"3、安装xfce4桌面\"></a><strong>3、安装xfce4桌面</strong></h4><p>安装xfce4桌面和附带的软件包：</p>\n<pre><code class=\"shell\">pacman -S xfce4 xfce4-goodies\n</code></pre>\n<h4 id=\"4、安装LightDM登录管理器-显示管理器\"><a href=\"#4、安装LightDM登录管理器-显示管理器\" class=\"headerlink\" title=\"4、安装LightDM登录管理器(显示管理器)\"></a><strong>4、安装LightDM登录管理器(显示管理器)</strong></h4><p>详细安装和配置看arch-wiki-lighdm<br>我没有通过startx的方式启动桌面环境，而是使用了登录管理器lightdm<br>安装：</p>\n<pre><code class=\"zsh\">pacman -S lightdm lightdm-gtk-greeter\n</code></pre>\n<p>其配置文件为：<br>/etc/lightdm/lightdm.conf<br>安装好之后测试启动：</p>\n<pre><code class=\"shell\">systemctl start lightdm.service1\n</code></pre>\n<p>如果正常就会看到熟悉的登录界面了，不过不要登录，现在只是测试lightdm是否可以正常启动<br>点击画面上的关机小图标，弹出关机对话，选择注销!<br>注销之后就回到之前的tty命令行模式了，可以看到相关的启动信息<br>一切正常，所以设置lightdm为开机自动启动，这样以后开机就不会出现tty命令行界面了，而是直接进入登录界面：</p>\n<pre><code class=\"shell\">systemctl enable lightdm.service\n</code></pre>\n<p>之后你可以重启进入xfce4图形界面，然后在图形界面中使用终端来继续以下配置步骤，也可以不重启，直接继续</p>\n<p>进入xfce4图形界面的命令为<code>startxfce4</code></p>\n<h4 id=\"桌面美化\"><a href=\"#桌面美化\" class=\"headerlink\" title=\"桌面美化\"></a>桌面美化</h4><p>好好干活,美化个屁.</p>\n"},{"title":"必须要会的Git基本使用及常用命令操作","date":"2017-04-25T05:15:08.000Z","_content":"\n之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。\n最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。\n<!-- more -->\n一开始都是别人建好远程库，克隆下来就行了。\n下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。\n当然我们还是为了方便项目管理。\n \n#####安装\ngit工具下载地址，可以选择适合自己的操作系统：https://git-scm.com/downloads\n安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin\n,将目录拷贝添加到PATH变量后。\n__注意：与前面的值要用“;”号隔开__\n具体步骤：\n> 右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin\n\n安装完成后使用 ``git --version``命令查看一下git版本，测试是否安装、配置成功。\n#####克隆远程库\n使用cmd（安装过git直接可以右键文件夹使用``git bash here``）定位到要放置仓库的目录\n``git clone [远程仓库地址]``\n远程仓库就是托管到第三方平台上面的库。\n常用的有github，这个私有是收费的，要用免费的只能是公共的。\n目前国内用的比较多的[coding](https://coding.net/) ，和开源中国的[码云](http://git.oschina.net/)。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。\n码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。\n\n在这里要说一下克隆的时候有的坑，__要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员__。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。\n\n前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。\n\n#####创建代码库\n包括远程库（第三方平台）、本地库（存放代码信息）。\n- 创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。\n创建完成后建议初始化一下仓库，\n可以在远程上根据提示，创建使用README.md文件初始化项目。\n也可以使用git命令：\n```\ngit init\necho \"# HelloWorld\" >> README.md\ngit add README.md\ngit commit -m \"first commit\"\n```\n建议使用前者，直接在第三方上创建。\n- 创建本地仓库：有两种方法\n1、使用git命令\n``git init``\n2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）\n点击``VCS-import into version control-create git repository``\n会弹出选择仓库的路径，直接选当前项目就行，然后确定。\n创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。\n而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。\n__（关于颜色后面我会具体说，各种颜色代表的状态）__\n- 关联本地和远程库\n关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。\n使用命令：\n``git remote add origin [远程仓库地址]``\n如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。\n关联成功则无提示，接着输入命令\n``git push origin master``\n如果失败，很大可能是远程仓库已存在文件。可以执行\n``git push -f origin master``强制提交。\n提交过程是能看到进度的。\n提交完成后可以去平台上查看有没有代码就知道是否成功。\n\n\n\n__注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下__\n\n#####仓库基本使用\n提交过程：\n``右键项目-git-add，弹框，选择是``；\n这时候只是把代码添加到本地仓库，\n``再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push``\n然后会显示进度。\n在多人协作开发一个项目的时候，提交之前一定要先pull一下（``VCS - pull``）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。\n处理好这些再进行提交操作。\n#####分支管理\n分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。\n在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。\n但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。\n互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。\n\n__常用命令__\n创建并切换到新建分支：\n``git checkout -b master2``\n切换分支：\n``git checkout master2``\n删除分支：\n``git branch -d fmaster2``\n将分支推送到远程仓库：\n``git push origin <branch>``\n\n#####关于颜色\n白色（正常色）：未改动或者没有仓库时的颜色。上\n红色：未添加仓库的，在创建仓库时会出现。\n绿色：已添加到本地仓库，没有进行commit push提交远程的。\n蓝色：修改已经提交到本地仓库的代码。\n\n\n#####常见问题\n\n>有一种情况是提交/强制提交的时候出现\n\n``\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'https://github.com/wapchief/chat-room-JFrame.git'\n``\n说明是本地代码库为空\n解决办法：\n1、在项目中，如android studio，打开项目，右键->Git->+Add，然后重新右键->Git->commit Directory->commit and push->commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作\n2、在本地仓库创建一个文件，推送到仓库\n``touch README\ngit add README \ngit commit -m 'first commit'\ngit push origin master``\n如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。\n\n> 补充一个在提交过程中出现无法解决问题的办法\n\n如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除``.git``文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行\n```\ngit init  #初始化本地仓库\ngit remote add origin [远程库地址]  #关联远程库\ngit add . #提交本地代码到本地仓库的暂存区\ngit commit -m '[提交说明]' #提交本地代码到本地仓库，并附上提交说明\ngit push -f origin master #强制推送到远程库\n```\n___\n关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。\nGit是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。","source":"_posts/StudyOfGit.md","raw":"---\ntitle: 必须要会的Git基本使用及常用命令操作\ndate: 2017-4-25 13:15:08\ncategories: \ntags: [git] #文章标签，可空，多标签请用格式，注意:后面有个空格\n\n---\n\n之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。\n最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。\n<!-- more -->\n一开始都是别人建好远程库，克隆下来就行了。\n下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。\n当然我们还是为了方便项目管理。\n \n#####安装\ngit工具下载地址，可以选择适合自己的操作系统：https://git-scm.com/downloads\n安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin\n,将目录拷贝添加到PATH变量后。\n__注意：与前面的值要用“;”号隔开__\n具体步骤：\n> 右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin\n\n安装完成后使用 ``git --version``命令查看一下git版本，测试是否安装、配置成功。\n#####克隆远程库\n使用cmd（安装过git直接可以右键文件夹使用``git bash here``）定位到要放置仓库的目录\n``git clone [远程仓库地址]``\n远程仓库就是托管到第三方平台上面的库。\n常用的有github，这个私有是收费的，要用免费的只能是公共的。\n目前国内用的比较多的[coding](https://coding.net/) ，和开源中国的[码云](http://git.oschina.net/)。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。\n码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。\n\n在这里要说一下克隆的时候有的坑，__要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员__。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。\n\n前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。\n\n#####创建代码库\n包括远程库（第三方平台）、本地库（存放代码信息）。\n- 创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。\n创建完成后建议初始化一下仓库，\n可以在远程上根据提示，创建使用README.md文件初始化项目。\n也可以使用git命令：\n```\ngit init\necho \"# HelloWorld\" >> README.md\ngit add README.md\ngit commit -m \"first commit\"\n```\n建议使用前者，直接在第三方上创建。\n- 创建本地仓库：有两种方法\n1、使用git命令\n``git init``\n2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）\n点击``VCS-import into version control-create git repository``\n会弹出选择仓库的路径，直接选当前项目就行，然后确定。\n创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。\n而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。\n__（关于颜色后面我会具体说，各种颜色代表的状态）__\n- 关联本地和远程库\n关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。\n使用命令：\n``git remote add origin [远程仓库地址]``\n如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。\n关联成功则无提示，接着输入命令\n``git push origin master``\n如果失败，很大可能是远程仓库已存在文件。可以执行\n``git push -f origin master``强制提交。\n提交过程是能看到进度的。\n提交完成后可以去平台上查看有没有代码就知道是否成功。\n\n\n\n__注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下__\n\n#####仓库基本使用\n提交过程：\n``右键项目-git-add，弹框，选择是``；\n这时候只是把代码添加到本地仓库，\n``再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push``\n然后会显示进度。\n在多人协作开发一个项目的时候，提交之前一定要先pull一下（``VCS - pull``）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。\n处理好这些再进行提交操作。\n#####分支管理\n分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。\n在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。\n但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。\n互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。\n\n__常用命令__\n创建并切换到新建分支：\n``git checkout -b master2``\n切换分支：\n``git checkout master2``\n删除分支：\n``git branch -d fmaster2``\n将分支推送到远程仓库：\n``git push origin <branch>``\n\n#####关于颜色\n白色（正常色）：未改动或者没有仓库时的颜色。上\n红色：未添加仓库的，在创建仓库时会出现。\n绿色：已添加到本地仓库，没有进行commit push提交远程的。\n蓝色：修改已经提交到本地仓库的代码。\n\n\n#####常见问题\n\n>有一种情况是提交/强制提交的时候出现\n\n``\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'https://github.com/wapchief/chat-room-JFrame.git'\n``\n说明是本地代码库为空\n解决办法：\n1、在项目中，如android studio，打开项目，右键->Git->+Add，然后重新右键->Git->commit Directory->commit and push->commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作\n2、在本地仓库创建一个文件，推送到仓库\n``touch README\ngit add README \ngit commit -m 'first commit'\ngit push origin master``\n如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。\n\n> 补充一个在提交过程中出现无法解决问题的办法\n\n如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除``.git``文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行\n```\ngit init  #初始化本地仓库\ngit remote add origin [远程库地址]  #关联远程库\ngit add . #提交本地代码到本地仓库的暂存区\ngit commit -m '[提交说明]' #提交本地代码到本地仓库，并附上提交说明\ngit push -f origin master #强制推送到远程库\n```\n___\n关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。\nGit是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。","slug":"StudyOfGit","published":1,"updated":"2019-04-17T11:16:35.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j2z00jasafkbls0ah2x","content":"<p>之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。<br>最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。<br><a id=\"more\"></a><br>一开始都是别人建好远程库，克隆下来就行了。<br>下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。<br>当然我们还是为了方便项目管理。</p>\n<p>#####安装<br>git工具下载地址，可以选择适合自己的操作系统：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a><br>安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin<br>,将目录拷贝添加到PATH变量后。<br><strong>注意：与前面的值要用“;”号隔开</strong><br>具体步骤：</p>\n<blockquote>\n<p>右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin</p>\n</blockquote>\n<p>安装完成后使用 <code>git --version</code>命令查看一下git版本，测试是否安装、配置成功。</p>\n<p>#####克隆远程库<br>使用cmd（安装过git直接可以右键文件夹使用<code>git bash here</code>）定位到要放置仓库的目录<br><code>git clone [远程仓库地址]</code><br>远程仓库就是托管到第三方平台上面的库。<br>常用的有github，这个私有是收费的，要用免费的只能是公共的。<br>目前国内用的比较多的<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding</a> ，和开源中国的<a href=\"http://git.oschina.net/\" target=\"_blank\" rel=\"noopener\">码云</a>。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。<br>码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。</p>\n<p>在这里要说一下克隆的时候有的坑，<strong>要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员</strong>。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。</p>\n<p>前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。</p>\n<p>#####创建代码库<br>包括远程库（第三方平台）、本地库（存放代码信息）。</p>\n<ul>\n<li>创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。<br>创建完成后建议初始化一下仓库，<br>可以在远程上根据提示，创建使用README.md文件初始化项目。<br>也可以使用git命令：<pre><code>git init\necho &quot;# HelloWorld&quot; &gt;&gt; README.md\ngit add README.md\ngit commit -m &quot;first commit&quot;\n</code></pre>建议使用前者，直接在第三方上创建。</li>\n<li>创建本地仓库：有两种方法<br>1、使用git命令<br><code>git init</code><br>2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）<br>点击<code>VCS-import into version control-create git repository</code><br>会弹出选择仓库的路径，直接选当前项目就行，然后确定。<br>创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。<br>而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。<br><strong>（关于颜色后面我会具体说，各种颜色代表的状态）</strong></li>\n<li>关联本地和远程库<br>关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。<br>使用命令：<br><code>git remote add origin [远程仓库地址]</code><br>如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。<br>关联成功则无提示，接着输入命令<br><code>git push origin master</code><br>如果失败，很大可能是远程仓库已存在文件。可以执行<br><code>git push -f origin master</code>强制提交。<br>提交过程是能看到进度的。<br>提交完成后可以去平台上查看有没有代码就知道是否成功。</li>\n</ul>\n<p><strong>注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下</strong></p>\n<p>#####仓库基本使用<br>提交过程：<br><code>右键项目-git-add，弹框，选择是</code>；<br>这时候只是把代码添加到本地仓库，<br><code>再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push</code><br>然后会显示进度。<br>在多人协作开发一个项目的时候，提交之前一定要先pull一下（<code>VCS - pull</code>）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。<br>处理好这些再进行提交操作。</p>\n<p>#####分支管理<br>分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。<br>在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。<br>但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。<br>互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。</p>\n<p><strong>常用命令</strong><br>创建并切换到新建分支：<br><code>git checkout -b master2</code><br>切换分支：<br><code>git checkout master2</code><br>删除分支：<br><code>git branch -d fmaster2</code><br>将分支推送到远程仓库：<br><code>git push origin &lt;branch&gt;</code></p>\n<p>#####关于颜色<br>白色（正常色）：未改动或者没有仓库时的颜色。上<br>红色：未添加仓库的，在创建仓库时会出现。<br>绿色：已添加到本地仓库，没有进行commit push提交远程的。<br>蓝色：修改已经提交到本地仓库的代码。</p>\n<p>#####常见问题</p>\n<blockquote>\n<p>有一种情况是提交/强制提交的时候出现</p>\n</blockquote>\n<p><code>error: src refspec master does not match any.\nerror: failed to push some refs to &#39;https://github.com/wapchief/chat-room-JFrame.git&#39;</code><br>说明是本地代码库为空<br>解决办法：<br>1、在项目中，如android studio，打开项目，右键-&gt;Git-&gt;+Add，然后重新右键-&gt;Git-&gt;commit Directory-&gt;commit and push-&gt;commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作<br>2、在本地仓库创建一个文件，推送到仓库<br><code>touch README\ngit add README \ngit commit -m &#39;first commit&#39;\ngit push origin master</code><br>如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。</p>\n<blockquote>\n<p>补充一个在提交过程中出现无法解决问题的办法</p>\n</blockquote>\n<p>如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除<code>.git</code>文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行</p>\n<pre><code>git init  #初始化本地仓库\ngit remote add origin [远程库地址]  #关联远程库\ngit add . #提交本地代码到本地仓库的暂存区\ngit commit -m &#39;[提交说明]&#39; #提交本地代码到本地仓库，并附上提交说明\ngit push -f origin master #强制推送到远程库\n</code></pre><hr>\n<p>关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。<br>Git是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。</p>\n","site":{"data":{}},"excerpt":"<p>之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。<br>最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。<br>","more":"<br>一开始都是别人建好远程库，克隆下来就行了。<br>下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。<br>当然我们还是为了方便项目管理。</p>\n<p>#####安装<br>git工具下载地址，可以选择适合自己的操作系统：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a><br>安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin<br>,将目录拷贝添加到PATH变量后。<br><strong>注意：与前面的值要用“;”号隔开</strong><br>具体步骤：</p>\n<blockquote>\n<p>右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin</p>\n</blockquote>\n<p>安装完成后使用 <code>git --version</code>命令查看一下git版本，测试是否安装、配置成功。</p>\n<p>#####克隆远程库<br>使用cmd（安装过git直接可以右键文件夹使用<code>git bash here</code>）定位到要放置仓库的目录<br><code>git clone [远程仓库地址]</code><br>远程仓库就是托管到第三方平台上面的库。<br>常用的有github，这个私有是收费的，要用免费的只能是公共的。<br>目前国内用的比较多的<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding</a> ，和开源中国的<a href=\"http://git.oschina.net/\" target=\"_blank\" rel=\"noopener\">码云</a>。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。<br>码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。</p>\n<p>在这里要说一下克隆的时候有的坑，<strong>要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员</strong>。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。</p>\n<p>前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。</p>\n<p>#####创建代码库<br>包括远程库（第三方平台）、本地库（存放代码信息）。</p>\n<ul>\n<li>创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。<br>创建完成后建议初始化一下仓库，<br>可以在远程上根据提示，创建使用README.md文件初始化项目。<br>也可以使用git命令：<pre><code>git init\necho &quot;# HelloWorld&quot; &gt;&gt; README.md\ngit add README.md\ngit commit -m &quot;first commit&quot;\n</code></pre>建议使用前者，直接在第三方上创建。</li>\n<li>创建本地仓库：有两种方法<br>1、使用git命令<br><code>git init</code><br>2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）<br>点击<code>VCS-import into version control-create git repository</code><br>会弹出选择仓库的路径，直接选当前项目就行，然后确定。<br>创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。<br>而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。<br><strong>（关于颜色后面我会具体说，各种颜色代表的状态）</strong></li>\n<li>关联本地和远程库<br>关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。<br>使用命令：<br><code>git remote add origin [远程仓库地址]</code><br>如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。<br>关联成功则无提示，接着输入命令<br><code>git push origin master</code><br>如果失败，很大可能是远程仓库已存在文件。可以执行<br><code>git push -f origin master</code>强制提交。<br>提交过程是能看到进度的。<br>提交完成后可以去平台上查看有没有代码就知道是否成功。</li>\n</ul>\n<p><strong>注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下</strong></p>\n<p>#####仓库基本使用<br>提交过程：<br><code>右键项目-git-add，弹框，选择是</code>；<br>这时候只是把代码添加到本地仓库，<br><code>再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push</code><br>然后会显示进度。<br>在多人协作开发一个项目的时候，提交之前一定要先pull一下（<code>VCS - pull</code>）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。<br>处理好这些再进行提交操作。</p>\n<p>#####分支管理<br>分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。<br>在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。<br>但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。<br>互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。</p>\n<p><strong>常用命令</strong><br>创建并切换到新建分支：<br><code>git checkout -b master2</code><br>切换分支：<br><code>git checkout master2</code><br>删除分支：<br><code>git branch -d fmaster2</code><br>将分支推送到远程仓库：<br><code>git push origin &lt;branch&gt;</code></p>\n<p>#####关于颜色<br>白色（正常色）：未改动或者没有仓库时的颜色。上<br>红色：未添加仓库的，在创建仓库时会出现。<br>绿色：已添加到本地仓库，没有进行commit push提交远程的。<br>蓝色：修改已经提交到本地仓库的代码。</p>\n<p>#####常见问题</p>\n<blockquote>\n<p>有一种情况是提交/强制提交的时候出现</p>\n</blockquote>\n<p><code>error: src refspec master does not match any.\nerror: failed to push some refs to &#39;https://github.com/wapchief/chat-room-JFrame.git&#39;</code><br>说明是本地代码库为空<br>解决办法：<br>1、在项目中，如android studio，打开项目，右键-&gt;Git-&gt;+Add，然后重新右键-&gt;Git-&gt;commit Directory-&gt;commit and push-&gt;commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作<br>2、在本地仓库创建一个文件，推送到仓库<br><code>touch README\ngit add README \ngit commit -m &#39;first commit&#39;\ngit push origin master</code><br>如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。</p>\n<blockquote>\n<p>补充一个在提交过程中出现无法解决问题的办法</p>\n</blockquote>\n<p>如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除<code>.git</code>文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行</p>\n<pre><code>git init  #初始化本地仓库\ngit remote add origin [远程库地址]  #关联远程库\ngit add . #提交本地代码到本地仓库的暂存区\ngit commit -m &#39;[提交说明]&#39; #提交本地代码到本地仓库，并附上提交说明\ngit push -f origin master #强制推送到远程库\n</code></pre><hr>\n<p>关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。<br>Git是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。</p>"},{"title":"Hello World","date":"2018-01-25T13:00:08.000Z","description":null,"toc":true,"_content":"\n# Hello World\n\ntabris的个人博客终于搭建成功啦,百度不收录的博客权当自己的学习笔记+矫情的地方.\n\nACM退役啦,不知道学些什么:\n机器学习感觉智商和数学水平够不上.\nC++也不好找工作.\nJava还不想学.\n前端更是不想学.\n\n学学大数据\n投后台开发岗和大数据岗\n\n失业了就回家种地\n\n所以先学些必备的技能.\n\n- git\n- IDE 使用.\n- so on\n\n\n> let's begin. \n>        --tabris\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-1-25 21:00:08\ncategories:  \ntags: [随笔] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n---\n\n# Hello World\n\ntabris的个人博客终于搭建成功啦,百度不收录的博客权当自己的学习笔记+矫情的地方.\n\nACM退役啦,不知道学些什么:\n机器学习感觉智商和数学水平够不上.\nC++也不好找工作.\nJava还不想学.\n前端更是不想学.\n\n学学大数据\n投后台开发岗和大数据岗\n\n失业了就回家种地\n\n所以先学些必备的技能.\n\n- git\n- IDE 使用.\n- so on\n\n\n> let's begin. \n>        --tabris\n","slug":"hello-world","published":1,"updated":"2019-04-17T11:16:35.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j3000jdsafkyg0gwvug","content":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><p>tabris的个人博客终于搭建成功啦,百度不收录的博客权当自己的学习笔记+矫情的地方.</p>\n<p>ACM退役啦,不知道学些什么:<br>机器学习感觉智商和数学水平够不上.<br>C++也不好找工作.<br>Java还不想学.<br>前端更是不想学.</p>\n<p>学学大数据<br>投后台开发岗和大数据岗</p>\n<p>失业了就回家种地</p>\n<p>所以先学些必备的技能.</p>\n<ul>\n<li>git</li>\n<li>IDE 使用.</li>\n<li>so on</li>\n</ul>\n<blockquote>\n<p>let’s begin.<br>       –tabris</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><p>tabris的个人博客终于搭建成功啦,百度不收录的博客权当自己的学习笔记+矫情的地方.</p>\n<p>ACM退役啦,不知道学些什么:<br>机器学习感觉智商和数学水平够不上.<br>C++也不好找工作.<br>Java还不想学.<br>前端更是不想学.</p>\n<p>学学大数据<br>投后台开发岗和大数据岗</p>\n<p>失业了就回家种地</p>\n<p>所以先学些必备的技能.</p>\n<ul>\n<li>git</li>\n<li>IDE 使用.</li>\n<li>so on</li>\n</ul>\n<blockquote>\n<p>let’s begin.<br>       –tabris</p>\n</blockquote>\n"},{"title":"vim使用心得","date":"2019-03-11T07:33:11.000Z","description":"tabris的vim使用心得","toc":true,"_content":"\n\n\n# vim简介\n\nVim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n\n所有的 Unix Like 系统都会内建 vi 文本编辑器，其他的文本编辑器则不一定会存在。\n\n但是目前我们使用比较多的是 vim 编辑器。\n\nvim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。\n\nvim主要有以下几个优点.\n\n- 可以不使用鼠标，完全用键盘操作。\n- 系统资源占用小，打开大文件毫无压力。\n- 键盘命令变成肌肉记忆以后，操作速度极快。\n\n同时现今很多开源软件(ranger,lazygit)采用的快捷键都与vim类似.学习vim变得很有必要.\n\n但我这里采用的是`neovim`\n\n[NeoVim](https://neovim.io/) 旨在成为Vim的升级版，有不少对它的介绍，我就不赘述了。NeoVim官网强调了它的四大特点:\n\n- Powerful plugins（强大的插件）\n- Better out-of-the-box（更好的开箱即用）\n- First-class embedding（高度支持嵌入模式）\n- Drop-in replacement for Vim（直接替换Vim）。\n\n## vim基本配置\n\n> 了解的还不是很详细, 暂时以我自己的配置介绍\n\n```vim\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" base config\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nset number\n\nset termguicolors                                  \" true color\ncolorscheme NeoSolarized                           \" scheme\nset background=dark\n\nset encoding=utf-8\n\n\" 自动折行\nset linebreak\nset nowrap\n\"垂直滚动时，光标距离顶部/底部的位置（单位：行）。\nset scrolloff=5\n\n\"set textwidth=80\n\" tabs and spaces handling\nset expandtab\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\n\" 侦测文件类型\nfiletype on\n\n\" 载入文件类型插件\nfiletype plugin on\n\n\" 为特定文件类型载入相关缩进文件\nfiletype indent on\n\n\" 设置空白字符的视觉提示\nset list listchars=extends:❯,precedes:❮,tab:▸\\ ,trail:˽,space:·\n\n\" 高亮当前行列\nset cursorcolumn\nset cursorline\n\n\" 搜索时忽略大小写。\nset ignorecase\n\" 如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感。比如，搜索Test时，将不匹配test；搜索test时，将匹配Test。\nset smartcase\n\n\" 打开英语单词的拼写检查。\nset spell spelllang=en_us\n\n\" 自动切换工作目录。这主要用在一个 Vim 会话之中打开多个文件的情况，默认的工作目录是打开的第一个文件的目录。该配置可以将工作目录自动切换到，正在编辑的文件的目录。\nset autochdir\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" keyboard map\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" sudo保存\nca w!! w !sudo tee \"%\" \n\ntnoremap <ESC>    <C-\\><C-n>\n\n\"去行首空格\n\":%s/^\\s\\+\n\"去行末空格\n\":%s/\\s\\+$\n\n```\n\n\n\n## vim插件管理器\n\n> 参考 https://www.jianshu.com/p/0c83e6aed270\n>\n> **每安装一个插件最好都要去github官网看下,顺便看看文档, 会让你安装的插件用起来更顺手.**\n\n### 安装\n\n现在流行的有这几种插件管理器,`VBunle`,`NeoBunle`,`vim-plug`, 我这里采用的是`vim-plug`.\n\nneovim下安装命令\n\n```shell\ncurl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\nvim下安装命令\n\n```shell\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\n### 用法\n\n#### 安装插件\n\n要安装插件，你必须如下所示首先在 Vim 配置文件中声明它们。一般 Vim 的配置文件是 `~/.vimrc`，Neovim 的配置文件是 `~/.config/nvim/init.vim`。请记住，当你在配置文件中声明插件时，列表应该以 `call plug#begin(PLUGIN_DIRECTORY)` 开始，并以 `plug#end()` 结束。\n\n例如，我们安装 “lightline.vim” 插件。为此，请在 `~/.vimrc` 的顶部添加以下行。\n\n```typescript\ncall plug#begin('~/.vim/plugged')\nPlug 'itchyny/lightline.vim'\ncall plug#end()\n```\n\n在 vim 配置文件中添加上面的行后，通过输入以下命令重新加载：\n `:source ~/.vimrc`\n 或者，只需重新加载 Vim 编辑器。\n\n 现在，打开 vim 编辑器：\n `$ vim`\n 使用以下命令检查状态：\n `:PlugStatus`\n 然后输入下面的命令，然后按回车键安装之前在配置文件中声明的插件。\n `:PlugInstall`\n\n#### 更新插件\n\n要更新插件，请运行：\n\n```\n:PlugUpdate\n```\n\n更新插件后，按下 `d` 查看更改。或者，你可以之后输入 `:PlugDiff`。\n\n#### 审查插件\n\n有时，更新的插件可能有新的 bug 或无法正常工作。要解决这个问题，你可以简单地回滚有问题的插件。输入 `:PlugDiff` 命令，然后按回车键查看上次 `:PlugUpdate`的更改，并在每个段落上按 `X` 将每个插件回滚到更新前的前一个状态。\n\n#### 删除插件\n\n删除一个插件删除或注释掉你以前在你的 vim 配置文件中添加的 `plug` 命令。然后，运行 `:source ~/.vimrc` 或重启 Vim 编辑器。最后，运行以下命令卸载插件：\n `:PlugClean`\n\n该命令将删除 vim 配置文件中所有未声明的插件。\n\n#### 升级 Vim-plug\n\n要升级vim-plug本身，请输入：\n `:PlugUpgrade`\n\n如你所见，使用 Vim-plug 管理插件并不难。它简化了插件管理。现在去找出你最喜欢的插件并使用 Vim-plug 来安装它们。\n\n# 安装插件\n\n> 插件这个东西,少即是多,运行速度会更快\n\n## 工具篇\n\n### 安装[vim中文手册](https://github.com/yianwillis/vimcdoc)\n\n[yianwillis/vimcdoc](https://github.com/yianwillis/vimcdoc)\n\n`Plug 'yianwillis/vimcdoc'`\n\n### 编码优化插件\n\n#### 代码补全\n\nvim要有python支持,如果没有需要输入`pip install neovim`命令安装neovim的python支持模块.\n\n`Plug 'Valloric/YouCompleteMe'`\n\n**上面的插件对C++的支持是很强大的但是在麻烦.后来改用`deoplete`了**\n\n```\nPlug 'shougo/unite.vim'                            \" deoplete依赖\nPlug 'Shougo/deoplete.nvim'                        \" 代码补全\nPlug 'jiangmiao/auto-pairs'                        \" 括号自动补全\nPlug 'tpope/vim-surround'\nPlug 'scrooloose/syntastic'                        \" 静态代码分析\nPlug 'neomake/neomake'                             \" 语法检查\nPlug 'mg979/vim-visual-multi'                      \" 多光标 \n```\n\n### GitHelp\n\n```\nPlug 'tpope/vim-fugitive'                          \" git plugin\nPlug 'airblade/vim-gitgutter'                      \"\n```\n\n### 文件树\n\n> ```\n> Plug 'shougo/vimfiler.vim'                         \" file explorer 这个项目已经不维护了\n> ```\n\n现在采用`shougo/defx.nvim`这个插件\n\n```typescript\nif has('nvim')\n  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }\nelse\n  Plug 'Shougo/defx.nvim'\n  Plug 'roxma/nvim-yarp'\n  Plug 'roxma/vim-hug-neovim-rpc'\nendif\n\" 这是defx的两个支持插件\nPlug 'kristijanhusak/defx-git'\nPlug 'kristijanhusak/defx-icons'\n```\n\ndefx 没有提供默认的键盘映射,所以需要自己进行设置\n\n```typescript\n\" 这是我的配置. 参考文档种的配置做的修改.  还需完善\nautocmd FileType defx call s:defx_my_settings()\nfunction! s:defx_my_settings() abort\n  setl nonumber\n  setl norelativenumber\n  setl listchars=\n\n  \" Define mappings\n  nnoremap <silent><buffer><expr> <CR>\n  \\ defx#do_action('open')\n  nnoremap <silent><buffer><expr> c\n  \\ defx#do_action('copy')\n  nnoremap <silent><buffer><expr> m\n  \\ defx#do_action('move')\n  nnoremap <silent><buffer><expr> p\n  \\ defx#do_action('paste')\n  nnoremap <silent><buffer><expr> l\n  \\ defx#do_action('open')\n  nnoremap <silent><buffer><expr> E\n  \\ defx#do_action('open', 'vsplit')\n  nnoremap <silent><buffer><expr> P\n  \\ defx#do_action('open', 'pedit')\n\"  nnoremap <silent><buffer><expr> l\n  \\ defx#do_action('open_or_close_tree')\n  nnoremap <silent><buffer><expr> K\n  \\ defx#do_action('new_directory')\n  nnoremap <silent><buffer><expr> N\n  \\ defx#do_action('new_file')\n  nnoremap <silent><buffer><expr> M\n  \\ defx#do_action('new_multiple_files')\n  nnoremap <silent><buffer><expr> C\n  \\ defx#do_action('toggle_columns',\n  \\                'mark:filename:type:size:time')\n  nnoremap <silent><buffer><expr> S\n  \\ defx#do_action('toggle_sort', 'time')\n  nnoremap <silent><buffer><expr> d\n  \\ defx#do_action('remove')\n  nnoremap <silent><buffer><expr> r\n  \\ defx#do_action('rename')\n  nnoremap <silent><buffer><expr> !\n  \\ defx#do_action('execute_command')\n  nnoremap <silent><buffer><expr> x\n  \\ defx#do_action('execute_system')\n  nnoremap <silent><buffer><expr> yy\n  \\ defx#do_action('yank_path')\n  nnoremap <silent><buffer><expr> .\n  \\ defx#do_action('toggle_ignored_files')\n  nnoremap <silent><buffer><expr> ;\n  \\ defx#do_action('repeat')\n  nnoremap <silent><buffer><expr> h\n  \\ defx#is_opened_tree() ? defx#do_action('close_tree') :defx#do_action('cd', ['..'])\n  nnoremap <silent><buffer><expr> ~\n  \\ defx#do_action('cd')\n  nnoremap <silent><buffer><expr> q\n  \\ defx#do_action('quit')\n  nnoremap <silent><buffer><expr> <Space>\n  \\ defx#do_action('toggle_select') . 'j'\n  nnoremap <silent><buffer><expr> *\n  \\ defx#do_action('toggle_select_all')\n  nnoremap <silent><buffer><expr> j\n  \\ line('.') == line('$') ? 'gg' : 'j'\n  nnoremap <silent><buffer><expr> k\n  \\ line('.') == 1 ? 'G' : 'k'\n  nnoremap <silent><buffer><expr> <C-l>\n  \\ defx#do_action('redraw')\n  nnoremap <silent><buffer><expr> <C-g>\n  \\ defx#do_action('print')\n  nnoremap <silent><buffer><expr> cd\n  \\ defx#do_action('change_vim_cwd')\nendfunction\n```\n\n\n\n### 语法树\n\n```typescript\nPlug 'majutsushi/tagbar'                           \"浏览tag    \n```\n\n## **美化篇**\n\n### 安装开始界面插件\n\n```\nPlug 'mhinz/vim-startify'                              \"start page\n```\n\n### 安装主题\n\n`Plug 'icymind/NeoSolarized'                 \"主题    `\n\n### 安装状态栏插件\n\n状态栏能显示当前的状态，还是有不少用处的，好看的状态栏就是为了美观，毕竟谁也不喜欢对着个难看的东西吧。\n 　　这里使用的是 [airline ](https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fvim-airline%2Fvim-airline)：\n\n```\nPlug 'vim-airline/vim-airline'                     \"状态栏工具    \nPlug 'vim-airline/vim-airline-themes'              \"状态栏主题    \n```\n\n```typescript\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" Airline config\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nlet g:airline_powerline_fonts = 0\nlet g:airline_theme = 'bubblegum'\nlet g:airline#extensions#whitespace#enabled = 0\n\n\" to use fancy symbols for airline, uncomment the following lines and use a\n\" patched font (more info on the README.rst)\nif !exists('g:airline_symbols')\n   let g:airline_symbols = {}\nendif\nlet g:airline_left_sep = '⮀'\nlet g:airline_left_alt_sep = '⮁'\nlet g:airline_right_sep = '⮂'\nlet g:airline_right_alt_sep = '⮃'\nlet g:airline_symbols.branch = '⭠'\nlet g:airline_symbols.readonly = '⭤'\nlet g:airline_symbols.linenr = '⭡'\n\nlet g:airline#extensions#tabline#enabled = 1\nlet g:airline#extensions#tabline#show_tabs = 1\nlet g:airline#extensions#tabline#left_sep = '⮀'\nlet g:airline#extensions#tabline#left_alt_sep = '⮁'\nlet g:airline#extensions#tabline#right_sep = '⮂'\nlet g:airline#extensions#tabline#right_alt_sep = '⮃'\n```\n\n-----\n\n这是我自己的neovim配置\n\nhttps://github.com/tabris233/config/blob/master/neovim/init.vim\n\n","source":"_posts/vim.md","raw":"---\ntitle: vim使用心得\ndate: 2019-03-11 15:33:11\ncategories:  \ntags: [editor] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: tabris的vim使用心得\ntoc: true\n---\n\n\n\n# vim简介\n\nVim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n\n所有的 Unix Like 系统都会内建 vi 文本编辑器，其他的文本编辑器则不一定会存在。\n\n但是目前我们使用比较多的是 vim 编辑器。\n\nvim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。\n\nvim主要有以下几个优点.\n\n- 可以不使用鼠标，完全用键盘操作。\n- 系统资源占用小，打开大文件毫无压力。\n- 键盘命令变成肌肉记忆以后，操作速度极快。\n\n同时现今很多开源软件(ranger,lazygit)采用的快捷键都与vim类似.学习vim变得很有必要.\n\n但我这里采用的是`neovim`\n\n[NeoVim](https://neovim.io/) 旨在成为Vim的升级版，有不少对它的介绍，我就不赘述了。NeoVim官网强调了它的四大特点:\n\n- Powerful plugins（强大的插件）\n- Better out-of-the-box（更好的开箱即用）\n- First-class embedding（高度支持嵌入模式）\n- Drop-in replacement for Vim（直接替换Vim）。\n\n## vim基本配置\n\n> 了解的还不是很详细, 暂时以我自己的配置介绍\n\n```vim\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" base config\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nset number\n\nset termguicolors                                  \" true color\ncolorscheme NeoSolarized                           \" scheme\nset background=dark\n\nset encoding=utf-8\n\n\" 自动折行\nset linebreak\nset nowrap\n\"垂直滚动时，光标距离顶部/底部的位置（单位：行）。\nset scrolloff=5\n\n\"set textwidth=80\n\" tabs and spaces handling\nset expandtab\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\n\" 侦测文件类型\nfiletype on\n\n\" 载入文件类型插件\nfiletype plugin on\n\n\" 为特定文件类型载入相关缩进文件\nfiletype indent on\n\n\" 设置空白字符的视觉提示\nset list listchars=extends:❯,precedes:❮,tab:▸\\ ,trail:˽,space:·\n\n\" 高亮当前行列\nset cursorcolumn\nset cursorline\n\n\" 搜索时忽略大小写。\nset ignorecase\n\" 如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感。比如，搜索Test时，将不匹配test；搜索test时，将匹配Test。\nset smartcase\n\n\" 打开英语单词的拼写检查。\nset spell spelllang=en_us\n\n\" 自动切换工作目录。这主要用在一个 Vim 会话之中打开多个文件的情况，默认的工作目录是打开的第一个文件的目录。该配置可以将工作目录自动切换到，正在编辑的文件的目录。\nset autochdir\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" keyboard map\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" sudo保存\nca w!! w !sudo tee \"%\" \n\ntnoremap <ESC>    <C-\\><C-n>\n\n\"去行首空格\n\":%s/^\\s\\+\n\"去行末空格\n\":%s/\\s\\+$\n\n```\n\n\n\n## vim插件管理器\n\n> 参考 https://www.jianshu.com/p/0c83e6aed270\n>\n> **每安装一个插件最好都要去github官网看下,顺便看看文档, 会让你安装的插件用起来更顺手.**\n\n### 安装\n\n现在流行的有这几种插件管理器,`VBunle`,`NeoBunle`,`vim-plug`, 我这里采用的是`vim-plug`.\n\nneovim下安装命令\n\n```shell\ncurl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\nvim下安装命令\n\n```shell\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\n### 用法\n\n#### 安装插件\n\n要安装插件，你必须如下所示首先在 Vim 配置文件中声明它们。一般 Vim 的配置文件是 `~/.vimrc`，Neovim 的配置文件是 `~/.config/nvim/init.vim`。请记住，当你在配置文件中声明插件时，列表应该以 `call plug#begin(PLUGIN_DIRECTORY)` 开始，并以 `plug#end()` 结束。\n\n例如，我们安装 “lightline.vim” 插件。为此，请在 `~/.vimrc` 的顶部添加以下行。\n\n```typescript\ncall plug#begin('~/.vim/plugged')\nPlug 'itchyny/lightline.vim'\ncall plug#end()\n```\n\n在 vim 配置文件中添加上面的行后，通过输入以下命令重新加载：\n `:source ~/.vimrc`\n 或者，只需重新加载 Vim 编辑器。\n\n 现在，打开 vim 编辑器：\n `$ vim`\n 使用以下命令检查状态：\n `:PlugStatus`\n 然后输入下面的命令，然后按回车键安装之前在配置文件中声明的插件。\n `:PlugInstall`\n\n#### 更新插件\n\n要更新插件，请运行：\n\n```\n:PlugUpdate\n```\n\n更新插件后，按下 `d` 查看更改。或者，你可以之后输入 `:PlugDiff`。\n\n#### 审查插件\n\n有时，更新的插件可能有新的 bug 或无法正常工作。要解决这个问题，你可以简单地回滚有问题的插件。输入 `:PlugDiff` 命令，然后按回车键查看上次 `:PlugUpdate`的更改，并在每个段落上按 `X` 将每个插件回滚到更新前的前一个状态。\n\n#### 删除插件\n\n删除一个插件删除或注释掉你以前在你的 vim 配置文件中添加的 `plug` 命令。然后，运行 `:source ~/.vimrc` 或重启 Vim 编辑器。最后，运行以下命令卸载插件：\n `:PlugClean`\n\n该命令将删除 vim 配置文件中所有未声明的插件。\n\n#### 升级 Vim-plug\n\n要升级vim-plug本身，请输入：\n `:PlugUpgrade`\n\n如你所见，使用 Vim-plug 管理插件并不难。它简化了插件管理。现在去找出你最喜欢的插件并使用 Vim-plug 来安装它们。\n\n# 安装插件\n\n> 插件这个东西,少即是多,运行速度会更快\n\n## 工具篇\n\n### 安装[vim中文手册](https://github.com/yianwillis/vimcdoc)\n\n[yianwillis/vimcdoc](https://github.com/yianwillis/vimcdoc)\n\n`Plug 'yianwillis/vimcdoc'`\n\n### 编码优化插件\n\n#### 代码补全\n\nvim要有python支持,如果没有需要输入`pip install neovim`命令安装neovim的python支持模块.\n\n`Plug 'Valloric/YouCompleteMe'`\n\n**上面的插件对C++的支持是很强大的但是在麻烦.后来改用`deoplete`了**\n\n```\nPlug 'shougo/unite.vim'                            \" deoplete依赖\nPlug 'Shougo/deoplete.nvim'                        \" 代码补全\nPlug 'jiangmiao/auto-pairs'                        \" 括号自动补全\nPlug 'tpope/vim-surround'\nPlug 'scrooloose/syntastic'                        \" 静态代码分析\nPlug 'neomake/neomake'                             \" 语法检查\nPlug 'mg979/vim-visual-multi'                      \" 多光标 \n```\n\n### GitHelp\n\n```\nPlug 'tpope/vim-fugitive'                          \" git plugin\nPlug 'airblade/vim-gitgutter'                      \"\n```\n\n### 文件树\n\n> ```\n> Plug 'shougo/vimfiler.vim'                         \" file explorer 这个项目已经不维护了\n> ```\n\n现在采用`shougo/defx.nvim`这个插件\n\n```typescript\nif has('nvim')\n  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }\nelse\n  Plug 'Shougo/defx.nvim'\n  Plug 'roxma/nvim-yarp'\n  Plug 'roxma/vim-hug-neovim-rpc'\nendif\n\" 这是defx的两个支持插件\nPlug 'kristijanhusak/defx-git'\nPlug 'kristijanhusak/defx-icons'\n```\n\ndefx 没有提供默认的键盘映射,所以需要自己进行设置\n\n```typescript\n\" 这是我的配置. 参考文档种的配置做的修改.  还需完善\nautocmd FileType defx call s:defx_my_settings()\nfunction! s:defx_my_settings() abort\n  setl nonumber\n  setl norelativenumber\n  setl listchars=\n\n  \" Define mappings\n  nnoremap <silent><buffer><expr> <CR>\n  \\ defx#do_action('open')\n  nnoremap <silent><buffer><expr> c\n  \\ defx#do_action('copy')\n  nnoremap <silent><buffer><expr> m\n  \\ defx#do_action('move')\n  nnoremap <silent><buffer><expr> p\n  \\ defx#do_action('paste')\n  nnoremap <silent><buffer><expr> l\n  \\ defx#do_action('open')\n  nnoremap <silent><buffer><expr> E\n  \\ defx#do_action('open', 'vsplit')\n  nnoremap <silent><buffer><expr> P\n  \\ defx#do_action('open', 'pedit')\n\"  nnoremap <silent><buffer><expr> l\n  \\ defx#do_action('open_or_close_tree')\n  nnoremap <silent><buffer><expr> K\n  \\ defx#do_action('new_directory')\n  nnoremap <silent><buffer><expr> N\n  \\ defx#do_action('new_file')\n  nnoremap <silent><buffer><expr> M\n  \\ defx#do_action('new_multiple_files')\n  nnoremap <silent><buffer><expr> C\n  \\ defx#do_action('toggle_columns',\n  \\                'mark:filename:type:size:time')\n  nnoremap <silent><buffer><expr> S\n  \\ defx#do_action('toggle_sort', 'time')\n  nnoremap <silent><buffer><expr> d\n  \\ defx#do_action('remove')\n  nnoremap <silent><buffer><expr> r\n  \\ defx#do_action('rename')\n  nnoremap <silent><buffer><expr> !\n  \\ defx#do_action('execute_command')\n  nnoremap <silent><buffer><expr> x\n  \\ defx#do_action('execute_system')\n  nnoremap <silent><buffer><expr> yy\n  \\ defx#do_action('yank_path')\n  nnoremap <silent><buffer><expr> .\n  \\ defx#do_action('toggle_ignored_files')\n  nnoremap <silent><buffer><expr> ;\n  \\ defx#do_action('repeat')\n  nnoremap <silent><buffer><expr> h\n  \\ defx#is_opened_tree() ? defx#do_action('close_tree') :defx#do_action('cd', ['..'])\n  nnoremap <silent><buffer><expr> ~\n  \\ defx#do_action('cd')\n  nnoremap <silent><buffer><expr> q\n  \\ defx#do_action('quit')\n  nnoremap <silent><buffer><expr> <Space>\n  \\ defx#do_action('toggle_select') . 'j'\n  nnoremap <silent><buffer><expr> *\n  \\ defx#do_action('toggle_select_all')\n  nnoremap <silent><buffer><expr> j\n  \\ line('.') == line('$') ? 'gg' : 'j'\n  nnoremap <silent><buffer><expr> k\n  \\ line('.') == 1 ? 'G' : 'k'\n  nnoremap <silent><buffer><expr> <C-l>\n  \\ defx#do_action('redraw')\n  nnoremap <silent><buffer><expr> <C-g>\n  \\ defx#do_action('print')\n  nnoremap <silent><buffer><expr> cd\n  \\ defx#do_action('change_vim_cwd')\nendfunction\n```\n\n\n\n### 语法树\n\n```typescript\nPlug 'majutsushi/tagbar'                           \"浏览tag    \n```\n\n## **美化篇**\n\n### 安装开始界面插件\n\n```\nPlug 'mhinz/vim-startify'                              \"start page\n```\n\n### 安装主题\n\n`Plug 'icymind/NeoSolarized'                 \"主题    `\n\n### 安装状态栏插件\n\n状态栏能显示当前的状态，还是有不少用处的，好看的状态栏就是为了美观，毕竟谁也不喜欢对着个难看的东西吧。\n 　　这里使用的是 [airline ](https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fvim-airline%2Fvim-airline)：\n\n```\nPlug 'vim-airline/vim-airline'                     \"状态栏工具    \nPlug 'vim-airline/vim-airline-themes'              \"状态栏主题    \n```\n\n```typescript\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" Airline config\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nlet g:airline_powerline_fonts = 0\nlet g:airline_theme = 'bubblegum'\nlet g:airline#extensions#whitespace#enabled = 0\n\n\" to use fancy symbols for airline, uncomment the following lines and use a\n\" patched font (more info on the README.rst)\nif !exists('g:airline_symbols')\n   let g:airline_symbols = {}\nendif\nlet g:airline_left_sep = '⮀'\nlet g:airline_left_alt_sep = '⮁'\nlet g:airline_right_sep = '⮂'\nlet g:airline_right_alt_sep = '⮃'\nlet g:airline_symbols.branch = '⭠'\nlet g:airline_symbols.readonly = '⭤'\nlet g:airline_symbols.linenr = '⭡'\n\nlet g:airline#extensions#tabline#enabled = 1\nlet g:airline#extensions#tabline#show_tabs = 1\nlet g:airline#extensions#tabline#left_sep = '⮀'\nlet g:airline#extensions#tabline#left_alt_sep = '⮁'\nlet g:airline#extensions#tabline#right_sep = '⮂'\nlet g:airline#extensions#tabline#right_alt_sep = '⮃'\n```\n\n-----\n\n这是我自己的neovim配置\n\nhttps://github.com/tabris233/config/blob/master/neovim/init.vim\n\n","slug":"vim","published":1,"updated":"2019-04-17T11:16:35.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j3300jgsafkyzeyutnt","content":"<h1 id=\"vim简介\"><a href=\"#vim简介\" class=\"headerlink\" title=\"vim简介\"></a>vim简介</h1><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>\n<p>所有的 Unix Like 系统都会内建 vi 文本编辑器，其他的文本编辑器则不一定会存在。</p>\n<p>但是目前我们使用比较多的是 vim 编辑器。</p>\n<p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>\n<p>vim主要有以下几个优点.</p>\n<ul>\n<li>可以不使用鼠标，完全用键盘操作。</li>\n<li>系统资源占用小，打开大文件毫无压力。</li>\n<li>键盘命令变成肌肉记忆以后，操作速度极快。</li>\n</ul>\n<p>同时现今很多开源软件(ranger,lazygit)采用的快捷键都与vim类似.学习vim变得很有必要.</p>\n<p>但我这里采用的是<code>neovim</code></p>\n<p><a href=\"https://neovim.io/\" target=\"_blank\" rel=\"noopener\">NeoVim</a> 旨在成为Vim的升级版，有不少对它的介绍，我就不赘述了。NeoVim官网强调了它的四大特点:</p>\n<ul>\n<li>Powerful plugins（强大的插件）</li>\n<li>Better out-of-the-box（更好的开箱即用）</li>\n<li>First-class embedding（高度支持嵌入模式）</li>\n<li>Drop-in replacement for Vim（直接替换Vim）。</li>\n</ul>\n<h2 id=\"vim基本配置\"><a href=\"#vim基本配置\" class=\"headerlink\" title=\"vim基本配置\"></a>vim基本配置</h2><blockquote>\n<p>了解的还不是很详细, 暂时以我自己的配置介绍</p>\n</blockquote>\n<pre><code class=\"vim\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; base config\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nset number\n\nset termguicolors                                  &quot; true color\ncolorscheme NeoSolarized                           &quot; scheme\nset background=dark\n\nset encoding=utf-8\n\n&quot; 自动折行\nset linebreak\nset nowrap\n&quot;垂直滚动时，光标距离顶部/底部的位置（单位：行）。\nset scrolloff=5\n\n&quot;set textwidth=80\n&quot; tabs and spaces handling\nset expandtab\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\n&quot; 侦测文件类型\nfiletype on\n\n&quot; 载入文件类型插件\nfiletype plugin on\n\n&quot; 为特定文件类型载入相关缩进文件\nfiletype indent on\n\n&quot; 设置空白字符的视觉提示\nset list listchars=extends:❯,precedes:❮,tab:▸\\ ,trail:˽,space:·\n\n&quot; 高亮当前行列\nset cursorcolumn\nset cursorline\n\n&quot; 搜索时忽略大小写。\nset ignorecase\n&quot; 如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感。比如，搜索Test时，将不匹配test；搜索test时，将匹配Test。\nset smartcase\n\n&quot; 打开英语单词的拼写检查。\nset spell spelllang=en_us\n\n&quot; 自动切换工作目录。这主要用在一个 Vim 会话之中打开多个文件的情况，默认的工作目录是打开的第一个文件的目录。该配置可以将工作目录自动切换到，正在编辑的文件的目录。\nset autochdir\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; keyboard map\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; sudo保存\nca w!! w !sudo tee &quot;%&quot; \n\ntnoremap &lt;ESC&gt;    &lt;C-\\&gt;&lt;C-n&gt;\n\n&quot;去行首空格\n&quot;:%s/^\\s\\+\n&quot;去行末空格\n&quot;:%s/\\s\\+$\n\n</code></pre>\n<h2 id=\"vim插件管理器\"><a href=\"#vim插件管理器\" class=\"headerlink\" title=\"vim插件管理器\"></a>vim插件管理器</h2><blockquote>\n<p>参考 <a href=\"https://www.jianshu.com/p/0c83e6aed270\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0c83e6aed270</a></p>\n<p><strong>每安装一个插件最好都要去github官网看下,顺便看看文档, 会让你安装的插件用起来更顺手.</strong></p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>现在流行的有这几种插件管理器,<code>VBunle</code>,<code>NeoBunle</code>,<code>vim-plug</code>, 我这里采用的是<code>vim-plug</code>.</p>\n<p>neovim下安装命令</p>\n<pre><code class=\"shell\">curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n</code></pre>\n<p>vim下安装命令</p>\n<pre><code class=\"shell\">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n</code></pre>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><h4 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h4><p>要安装插件，你必须如下所示首先在 Vim 配置文件中声明它们。一般 Vim 的配置文件是 <code>~/.vimrc</code>，Neovim 的配置文件是 <code>~/.config/nvim/init.vim</code>。请记住，当你在配置文件中声明插件时，列表应该以 <code>call plug#begin(PLUGIN_DIRECTORY)</code> 开始，并以 <code>plug#end()</code> 结束。</p>\n<p>例如，我们安装 “lightline.vim” 插件。为此，请在 <code>~/.vimrc</code> 的顶部添加以下行。</p>\n<pre><code class=\"typescript\">call plug#begin(&#39;~/.vim/plugged&#39;)\nPlug &#39;itchyny/lightline.vim&#39;\ncall plug#end()\n</code></pre>\n<p>在 vim 配置文件中添加上面的行后，通过输入以下命令重新加载：<br> <code>:source ~/.vimrc</code><br> 或者，只需重新加载 Vim 编辑器。</p>\n<p> 现在，打开 vim 编辑器：<br> <code>$ vim</code><br> 使用以下命令检查状态：<br> <code>:PlugStatus</code><br> 然后输入下面的命令，然后按回车键安装之前在配置文件中声明的插件。<br> <code>:PlugInstall</code></p>\n<h4 id=\"更新插件\"><a href=\"#更新插件\" class=\"headerlink\" title=\"更新插件\"></a>更新插件</h4><p>要更新插件，请运行：</p>\n<pre><code>:PlugUpdate\n</code></pre><p>更新插件后，按下 <code>d</code> 查看更改。或者，你可以之后输入 <code>:PlugDiff</code>。</p>\n<h4 id=\"审查插件\"><a href=\"#审查插件\" class=\"headerlink\" title=\"审查插件\"></a>审查插件</h4><p>有时，更新的插件可能有新的 bug 或无法正常工作。要解决这个问题，你可以简单地回滚有问题的插件。输入 <code>:PlugDiff</code> 命令，然后按回车键查看上次 <code>:PlugUpdate</code>的更改，并在每个段落上按 <code>X</code> 将每个插件回滚到更新前的前一个状态。</p>\n<h4 id=\"删除插件\"><a href=\"#删除插件\" class=\"headerlink\" title=\"删除插件\"></a>删除插件</h4><p>删除一个插件删除或注释掉你以前在你的 vim 配置文件中添加的 <code>plug</code> 命令。然后，运行 <code>:source ~/.vimrc</code> 或重启 Vim 编辑器。最后，运行以下命令卸载插件：<br> <code>:PlugClean</code></p>\n<p>该命令将删除 vim 配置文件中所有未声明的插件。</p>\n<h4 id=\"升级-Vim-plug\"><a href=\"#升级-Vim-plug\" class=\"headerlink\" title=\"升级 Vim-plug\"></a>升级 Vim-plug</h4><p>要升级vim-plug本身，请输入：<br> <code>:PlugUpgrade</code></p>\n<p>如你所见，使用 Vim-plug 管理插件并不难。它简化了插件管理。现在去找出你最喜欢的插件并使用 Vim-plug 来安装它们。</p>\n<h1 id=\"安装插件-1\"><a href=\"#安装插件-1\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><blockquote>\n<p>插件这个东西,少即是多,运行速度会更快</p>\n</blockquote>\n<h2 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h2><h3 id=\"安装vim中文手册\"><a href=\"#安装vim中文手册\" class=\"headerlink\" title=\"安装vim中文手册\"></a>安装<a href=\"https://github.com/yianwillis/vimcdoc\" target=\"_blank\" rel=\"noopener\">vim中文手册</a></h3><p><a href=\"https://github.com/yianwillis/vimcdoc\" target=\"_blank\" rel=\"noopener\">yianwillis/vimcdoc</a></p>\n<p><code>Plug &#39;yianwillis/vimcdoc&#39;</code></p>\n<h3 id=\"编码优化插件\"><a href=\"#编码优化插件\" class=\"headerlink\" title=\"编码优化插件\"></a>编码优化插件</h3><h4 id=\"代码补全\"><a href=\"#代码补全\" class=\"headerlink\" title=\"代码补全\"></a>代码补全</h4><p>vim要有python支持,如果没有需要输入<code>pip install neovim</code>命令安装neovim的python支持模块.</p>\n<p><code>Plug &#39;Valloric/YouCompleteMe&#39;</code></p>\n<p><strong>上面的插件对C++的支持是很强大的但是在麻烦.后来改用<code>deoplete</code>了</strong></p>\n<pre><code>Plug &#39;shougo/unite.vim&#39;                            &quot; deoplete依赖\nPlug &#39;Shougo/deoplete.nvim&#39;                        &quot; 代码补全\nPlug &#39;jiangmiao/auto-pairs&#39;                        &quot; 括号自动补全\nPlug &#39;tpope/vim-surround&#39;\nPlug &#39;scrooloose/syntastic&#39;                        &quot; 静态代码分析\nPlug &#39;neomake/neomake&#39;                             &quot; 语法检查\nPlug &#39;mg979/vim-visual-multi&#39;                      &quot; 多光标 \n</code></pre><h3 id=\"GitHelp\"><a href=\"#GitHelp\" class=\"headerlink\" title=\"GitHelp\"></a>GitHelp</h3><pre><code>Plug &#39;tpope/vim-fugitive&#39;                          &quot; git plugin\nPlug &#39;airblade/vim-gitgutter&#39;                      &quot;\n</code></pre><h3 id=\"文件树\"><a href=\"#文件树\" class=\"headerlink\" title=\"文件树\"></a>文件树</h3><blockquote>\n<pre><code>Plug &#39;shougo/vimfiler.vim&#39;                         &quot; file explorer 这个项目已经不维护了\n</code></pre></blockquote>\n<p>现在采用<code>shougo/defx.nvim</code>这个插件</p>\n<pre><code class=\"typescript\">if has(&#39;nvim&#39;)\n  Plug &#39;Shougo/defx.nvim&#39;, { &#39;do&#39;: &#39;:UpdateRemotePlugins&#39; }\nelse\n  Plug &#39;Shougo/defx.nvim&#39;\n  Plug &#39;roxma/nvim-yarp&#39;\n  Plug &#39;roxma/vim-hug-neovim-rpc&#39;\nendif\n&quot; 这是defx的两个支持插件\nPlug &#39;kristijanhusak/defx-git&#39;\nPlug &#39;kristijanhusak/defx-icons&#39;\n</code></pre>\n<p>defx 没有提供默认的键盘映射,所以需要自己进行设置</p>\n<pre><code class=\"typescript\">&quot; 这是我的配置. 参考文档种的配置做的修改.  还需完善\nautocmd FileType defx call s:defx_my_settings()\nfunction! s:defx_my_settings() abort\n  setl nonumber\n  setl norelativenumber\n  setl listchars=\n\n  &quot; Define mappings\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;CR&gt;\n  \\ defx#do_action(&#39;open&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; c\n  \\ defx#do_action(&#39;copy&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; m\n  \\ defx#do_action(&#39;move&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; p\n  \\ defx#do_action(&#39;paste&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; l\n  \\ defx#do_action(&#39;open&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; E\n  \\ defx#do_action(&#39;open&#39;, &#39;vsplit&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; P\n  \\ defx#do_action(&#39;open&#39;, &#39;pedit&#39;)\n&quot;  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; l\n  \\ defx#do_action(&#39;open_or_close_tree&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; K\n  \\ defx#do_action(&#39;new_directory&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; N\n  \\ defx#do_action(&#39;new_file&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; M\n  \\ defx#do_action(&#39;new_multiple_files&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; C\n  \\ defx#do_action(&#39;toggle_columns&#39;,\n  \\                &#39;mark:filename:type:size:time&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; S\n  \\ defx#do_action(&#39;toggle_sort&#39;, &#39;time&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; d\n  \\ defx#do_action(&#39;remove&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; r\n  \\ defx#do_action(&#39;rename&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; !\n  \\ defx#do_action(&#39;execute_command&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; x\n  \\ defx#do_action(&#39;execute_system&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; yy\n  \\ defx#do_action(&#39;yank_path&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; .\n  \\ defx#do_action(&#39;toggle_ignored_files&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; ;\n  \\ defx#do_action(&#39;repeat&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; h\n  \\ defx#is_opened_tree() ? defx#do_action(&#39;close_tree&#39;) :defx#do_action(&#39;cd&#39;, [&#39;..&#39;])\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; ~\n  \\ defx#do_action(&#39;cd&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; q\n  \\ defx#do_action(&#39;quit&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;Space&gt;\n  \\ defx#do_action(&#39;toggle_select&#39;) . &#39;j&#39;\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; *\n  \\ defx#do_action(&#39;toggle_select_all&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; j\n  \\ line(&#39;.&#39;) == line(&#39;$&#39;) ? &#39;gg&#39; : &#39;j&#39;\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; k\n  \\ line(&#39;.&#39;) == 1 ? &#39;G&#39; : &#39;k&#39;\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;C-l&gt;\n  \\ defx#do_action(&#39;redraw&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;C-g&gt;\n  \\ defx#do_action(&#39;print&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; cd\n  \\ defx#do_action(&#39;change_vim_cwd&#39;)\nendfunction\n</code></pre>\n<h3 id=\"语法树\"><a href=\"#语法树\" class=\"headerlink\" title=\"语法树\"></a>语法树</h3><pre><code class=\"typescript\">Plug &#39;majutsushi/tagbar&#39;                           &quot;浏览tag    \n</code></pre>\n<h2 id=\"美化篇\"><a href=\"#美化篇\" class=\"headerlink\" title=\"美化篇\"></a><strong>美化篇</strong></h2><h3 id=\"安装开始界面插件\"><a href=\"#安装开始界面插件\" class=\"headerlink\" title=\"安装开始界面插件\"></a>安装开始界面插件</h3><pre><code>Plug &#39;mhinz/vim-startify&#39;                              &quot;start page\n</code></pre><h3 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h3><p><code>Plug &#39;icymind/NeoSolarized&#39;                 &quot;主题</code></p>\n<h3 id=\"安装状态栏插件\"><a href=\"#安装状态栏插件\" class=\"headerlink\" title=\"安装状态栏插件\"></a>安装状态栏插件</h3><p>状态栏能显示当前的状态，还是有不少用处的，好看的状态栏就是为了美观，毕竟谁也不喜欢对着个难看的东西吧。<br> 　　这里使用的是 <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fvim-airline%2Fvim-airline\" target=\"_blank\" rel=\"noopener\">airline </a>：</p>\n<pre><code>Plug &#39;vim-airline/vim-airline&#39;                     &quot;状态栏工具    \nPlug &#39;vim-airline/vim-airline-themes&#39;              &quot;状态栏主题    \n</code></pre><pre><code class=\"typescript\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Airline config\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nlet g:airline_powerline_fonts = 0\nlet g:airline_theme = &#39;bubblegum&#39;\nlet g:airline#extensions#whitespace#enabled = 0\n\n&quot; to use fancy symbols for airline, uncomment the following lines and use a\n&quot; patched font (more info on the README.rst)\nif !exists(&#39;g:airline_symbols&#39;)\n   let g:airline_symbols = {}\nendif\nlet g:airline_left_sep = &#39;⮀&#39;\nlet g:airline_left_alt_sep = &#39;⮁&#39;\nlet g:airline_right_sep = &#39;⮂&#39;\nlet g:airline_right_alt_sep = &#39;⮃&#39;\nlet g:airline_symbols.branch = &#39;⭠&#39;\nlet g:airline_symbols.readonly = &#39;⭤&#39;\nlet g:airline_symbols.linenr = &#39;⭡&#39;\n\nlet g:airline#extensions#tabline#enabled = 1\nlet g:airline#extensions#tabline#show_tabs = 1\nlet g:airline#extensions#tabline#left_sep = &#39;⮀&#39;\nlet g:airline#extensions#tabline#left_alt_sep = &#39;⮁&#39;\nlet g:airline#extensions#tabline#right_sep = &#39;⮂&#39;\nlet g:airline#extensions#tabline#right_alt_sep = &#39;⮃&#39;\n</code></pre>\n<hr>\n<p>这是我自己的neovim配置</p>\n<p><a href=\"https://github.com/tabris233/config/blob/master/neovim/init.vim\" target=\"_blank\" rel=\"noopener\">https://github.com/tabris233/config/blob/master/neovim/init.vim</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vim简介\"><a href=\"#vim简介\" class=\"headerlink\" title=\"vim简介\"></a>vim简介</h1><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>\n<p>所有的 Unix Like 系统都会内建 vi 文本编辑器，其他的文本编辑器则不一定会存在。</p>\n<p>但是目前我们使用比较多的是 vim 编辑器。</p>\n<p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>\n<p>vim主要有以下几个优点.</p>\n<ul>\n<li>可以不使用鼠标，完全用键盘操作。</li>\n<li>系统资源占用小，打开大文件毫无压力。</li>\n<li>键盘命令变成肌肉记忆以后，操作速度极快。</li>\n</ul>\n<p>同时现今很多开源软件(ranger,lazygit)采用的快捷键都与vim类似.学习vim变得很有必要.</p>\n<p>但我这里采用的是<code>neovim</code></p>\n<p><a href=\"https://neovim.io/\" target=\"_blank\" rel=\"noopener\">NeoVim</a> 旨在成为Vim的升级版，有不少对它的介绍，我就不赘述了。NeoVim官网强调了它的四大特点:</p>\n<ul>\n<li>Powerful plugins（强大的插件）</li>\n<li>Better out-of-the-box（更好的开箱即用）</li>\n<li>First-class embedding（高度支持嵌入模式）</li>\n<li>Drop-in replacement for Vim（直接替换Vim）。</li>\n</ul>\n<h2 id=\"vim基本配置\"><a href=\"#vim基本配置\" class=\"headerlink\" title=\"vim基本配置\"></a>vim基本配置</h2><blockquote>\n<p>了解的还不是很详细, 暂时以我自己的配置介绍</p>\n</blockquote>\n<pre><code class=\"vim\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; base config\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nset number\n\nset termguicolors                                  &quot; true color\ncolorscheme NeoSolarized                           &quot; scheme\nset background=dark\n\nset encoding=utf-8\n\n&quot; 自动折行\nset linebreak\nset nowrap\n&quot;垂直滚动时，光标距离顶部/底部的位置（单位：行）。\nset scrolloff=5\n\n&quot;set textwidth=80\n&quot; tabs and spaces handling\nset expandtab\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\n&quot; 侦测文件类型\nfiletype on\n\n&quot; 载入文件类型插件\nfiletype plugin on\n\n&quot; 为特定文件类型载入相关缩进文件\nfiletype indent on\n\n&quot; 设置空白字符的视觉提示\nset list listchars=extends:❯,precedes:❮,tab:▸\\ ,trail:˽,space:·\n\n&quot; 高亮当前行列\nset cursorcolumn\nset cursorline\n\n&quot; 搜索时忽略大小写。\nset ignorecase\n&quot; 如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感。比如，搜索Test时，将不匹配test；搜索test时，将匹配Test。\nset smartcase\n\n&quot; 打开英语单词的拼写检查。\nset spell spelllang=en_us\n\n&quot; 自动切换工作目录。这主要用在一个 Vim 会话之中打开多个文件的情况，默认的工作目录是打开的第一个文件的目录。该配置可以将工作目录自动切换到，正在编辑的文件的目录。\nset autochdir\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; keyboard map\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; sudo保存\nca w!! w !sudo tee &quot;%&quot; \n\ntnoremap &lt;ESC&gt;    &lt;C-\\&gt;&lt;C-n&gt;\n\n&quot;去行首空格\n&quot;:%s/^\\s\\+\n&quot;去行末空格\n&quot;:%s/\\s\\+$\n\n</code></pre>\n<h2 id=\"vim插件管理器\"><a href=\"#vim插件管理器\" class=\"headerlink\" title=\"vim插件管理器\"></a>vim插件管理器</h2><blockquote>\n<p>参考 <a href=\"https://www.jianshu.com/p/0c83e6aed270\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0c83e6aed270</a></p>\n<p><strong>每安装一个插件最好都要去github官网看下,顺便看看文档, 会让你安装的插件用起来更顺手.</strong></p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>现在流行的有这几种插件管理器,<code>VBunle</code>,<code>NeoBunle</code>,<code>vim-plug</code>, 我这里采用的是<code>vim-plug</code>.</p>\n<p>neovim下安装命令</p>\n<pre><code class=\"shell\">curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n</code></pre>\n<p>vim下安装命令</p>\n<pre><code class=\"shell\">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ \nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n</code></pre>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><h4 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h4><p>要安装插件，你必须如下所示首先在 Vim 配置文件中声明它们。一般 Vim 的配置文件是 <code>~/.vimrc</code>，Neovim 的配置文件是 <code>~/.config/nvim/init.vim</code>。请记住，当你在配置文件中声明插件时，列表应该以 <code>call plug#begin(PLUGIN_DIRECTORY)</code> 开始，并以 <code>plug#end()</code> 结束。</p>\n<p>例如，我们安装 “lightline.vim” 插件。为此，请在 <code>~/.vimrc</code> 的顶部添加以下行。</p>\n<pre><code class=\"typescript\">call plug#begin(&#39;~/.vim/plugged&#39;)\nPlug &#39;itchyny/lightline.vim&#39;\ncall plug#end()\n</code></pre>\n<p>在 vim 配置文件中添加上面的行后，通过输入以下命令重新加载：<br> <code>:source ~/.vimrc</code><br> 或者，只需重新加载 Vim 编辑器。</p>\n<p> 现在，打开 vim 编辑器：<br> <code>$ vim</code><br> 使用以下命令检查状态：<br> <code>:PlugStatus</code><br> 然后输入下面的命令，然后按回车键安装之前在配置文件中声明的插件。<br> <code>:PlugInstall</code></p>\n<h4 id=\"更新插件\"><a href=\"#更新插件\" class=\"headerlink\" title=\"更新插件\"></a>更新插件</h4><p>要更新插件，请运行：</p>\n<pre><code>:PlugUpdate\n</code></pre><p>更新插件后，按下 <code>d</code> 查看更改。或者，你可以之后输入 <code>:PlugDiff</code>。</p>\n<h4 id=\"审查插件\"><a href=\"#审查插件\" class=\"headerlink\" title=\"审查插件\"></a>审查插件</h4><p>有时，更新的插件可能有新的 bug 或无法正常工作。要解决这个问题，你可以简单地回滚有问题的插件。输入 <code>:PlugDiff</code> 命令，然后按回车键查看上次 <code>:PlugUpdate</code>的更改，并在每个段落上按 <code>X</code> 将每个插件回滚到更新前的前一个状态。</p>\n<h4 id=\"删除插件\"><a href=\"#删除插件\" class=\"headerlink\" title=\"删除插件\"></a>删除插件</h4><p>删除一个插件删除或注释掉你以前在你的 vim 配置文件中添加的 <code>plug</code> 命令。然后，运行 <code>:source ~/.vimrc</code> 或重启 Vim 编辑器。最后，运行以下命令卸载插件：<br> <code>:PlugClean</code></p>\n<p>该命令将删除 vim 配置文件中所有未声明的插件。</p>\n<h4 id=\"升级-Vim-plug\"><a href=\"#升级-Vim-plug\" class=\"headerlink\" title=\"升级 Vim-plug\"></a>升级 Vim-plug</h4><p>要升级vim-plug本身，请输入：<br> <code>:PlugUpgrade</code></p>\n<p>如你所见，使用 Vim-plug 管理插件并不难。它简化了插件管理。现在去找出你最喜欢的插件并使用 Vim-plug 来安装它们。</p>\n<h1 id=\"安装插件-1\"><a href=\"#安装插件-1\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><blockquote>\n<p>插件这个东西,少即是多,运行速度会更快</p>\n</blockquote>\n<h2 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h2><h3 id=\"安装vim中文手册\"><a href=\"#安装vim中文手册\" class=\"headerlink\" title=\"安装vim中文手册\"></a>安装<a href=\"https://github.com/yianwillis/vimcdoc\" target=\"_blank\" rel=\"noopener\">vim中文手册</a></h3><p><a href=\"https://github.com/yianwillis/vimcdoc\" target=\"_blank\" rel=\"noopener\">yianwillis/vimcdoc</a></p>\n<p><code>Plug &#39;yianwillis/vimcdoc&#39;</code></p>\n<h3 id=\"编码优化插件\"><a href=\"#编码优化插件\" class=\"headerlink\" title=\"编码优化插件\"></a>编码优化插件</h3><h4 id=\"代码补全\"><a href=\"#代码补全\" class=\"headerlink\" title=\"代码补全\"></a>代码补全</h4><p>vim要有python支持,如果没有需要输入<code>pip install neovim</code>命令安装neovim的python支持模块.</p>\n<p><code>Plug &#39;Valloric/YouCompleteMe&#39;</code></p>\n<p><strong>上面的插件对C++的支持是很强大的但是在麻烦.后来改用<code>deoplete</code>了</strong></p>\n<pre><code>Plug &#39;shougo/unite.vim&#39;                            &quot; deoplete依赖\nPlug &#39;Shougo/deoplete.nvim&#39;                        &quot; 代码补全\nPlug &#39;jiangmiao/auto-pairs&#39;                        &quot; 括号自动补全\nPlug &#39;tpope/vim-surround&#39;\nPlug &#39;scrooloose/syntastic&#39;                        &quot; 静态代码分析\nPlug &#39;neomake/neomake&#39;                             &quot; 语法检查\nPlug &#39;mg979/vim-visual-multi&#39;                      &quot; 多光标 \n</code></pre><h3 id=\"GitHelp\"><a href=\"#GitHelp\" class=\"headerlink\" title=\"GitHelp\"></a>GitHelp</h3><pre><code>Plug &#39;tpope/vim-fugitive&#39;                          &quot; git plugin\nPlug &#39;airblade/vim-gitgutter&#39;                      &quot;\n</code></pre><h3 id=\"文件树\"><a href=\"#文件树\" class=\"headerlink\" title=\"文件树\"></a>文件树</h3><blockquote>\n<pre><code>Plug &#39;shougo/vimfiler.vim&#39;                         &quot; file explorer 这个项目已经不维护了\n</code></pre></blockquote>\n<p>现在采用<code>shougo/defx.nvim</code>这个插件</p>\n<pre><code class=\"typescript\">if has(&#39;nvim&#39;)\n  Plug &#39;Shougo/defx.nvim&#39;, { &#39;do&#39;: &#39;:UpdateRemotePlugins&#39; }\nelse\n  Plug &#39;Shougo/defx.nvim&#39;\n  Plug &#39;roxma/nvim-yarp&#39;\n  Plug &#39;roxma/vim-hug-neovim-rpc&#39;\nendif\n&quot; 这是defx的两个支持插件\nPlug &#39;kristijanhusak/defx-git&#39;\nPlug &#39;kristijanhusak/defx-icons&#39;\n</code></pre>\n<p>defx 没有提供默认的键盘映射,所以需要自己进行设置</p>\n<pre><code class=\"typescript\">&quot; 这是我的配置. 参考文档种的配置做的修改.  还需完善\nautocmd FileType defx call s:defx_my_settings()\nfunction! s:defx_my_settings() abort\n  setl nonumber\n  setl norelativenumber\n  setl listchars=\n\n  &quot; Define mappings\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;CR&gt;\n  \\ defx#do_action(&#39;open&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; c\n  \\ defx#do_action(&#39;copy&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; m\n  \\ defx#do_action(&#39;move&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; p\n  \\ defx#do_action(&#39;paste&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; l\n  \\ defx#do_action(&#39;open&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; E\n  \\ defx#do_action(&#39;open&#39;, &#39;vsplit&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; P\n  \\ defx#do_action(&#39;open&#39;, &#39;pedit&#39;)\n&quot;  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; l\n  \\ defx#do_action(&#39;open_or_close_tree&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; K\n  \\ defx#do_action(&#39;new_directory&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; N\n  \\ defx#do_action(&#39;new_file&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; M\n  \\ defx#do_action(&#39;new_multiple_files&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; C\n  \\ defx#do_action(&#39;toggle_columns&#39;,\n  \\                &#39;mark:filename:type:size:time&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; S\n  \\ defx#do_action(&#39;toggle_sort&#39;, &#39;time&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; d\n  \\ defx#do_action(&#39;remove&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; r\n  \\ defx#do_action(&#39;rename&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; !\n  \\ defx#do_action(&#39;execute_command&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; x\n  \\ defx#do_action(&#39;execute_system&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; yy\n  \\ defx#do_action(&#39;yank_path&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; .\n  \\ defx#do_action(&#39;toggle_ignored_files&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; ;\n  \\ defx#do_action(&#39;repeat&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; h\n  \\ defx#is_opened_tree() ? defx#do_action(&#39;close_tree&#39;) :defx#do_action(&#39;cd&#39;, [&#39;..&#39;])\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; ~\n  \\ defx#do_action(&#39;cd&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; q\n  \\ defx#do_action(&#39;quit&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;Space&gt;\n  \\ defx#do_action(&#39;toggle_select&#39;) . &#39;j&#39;\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; *\n  \\ defx#do_action(&#39;toggle_select_all&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; j\n  \\ line(&#39;.&#39;) == line(&#39;$&#39;) ? &#39;gg&#39; : &#39;j&#39;\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; k\n  \\ line(&#39;.&#39;) == 1 ? &#39;G&#39; : &#39;k&#39;\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;C-l&gt;\n  \\ defx#do_action(&#39;redraw&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; &lt;C-g&gt;\n  \\ defx#do_action(&#39;print&#39;)\n  nnoremap &lt;silent&gt;&lt;buffer&gt;&lt;expr&gt; cd\n  \\ defx#do_action(&#39;change_vim_cwd&#39;)\nendfunction\n</code></pre>\n<h3 id=\"语法树\"><a href=\"#语法树\" class=\"headerlink\" title=\"语法树\"></a>语法树</h3><pre><code class=\"typescript\">Plug &#39;majutsushi/tagbar&#39;                           &quot;浏览tag    \n</code></pre>\n<h2 id=\"美化篇\"><a href=\"#美化篇\" class=\"headerlink\" title=\"美化篇\"></a><strong>美化篇</strong></h2><h3 id=\"安装开始界面插件\"><a href=\"#安装开始界面插件\" class=\"headerlink\" title=\"安装开始界面插件\"></a>安装开始界面插件</h3><pre><code>Plug &#39;mhinz/vim-startify&#39;                              &quot;start page\n</code></pre><h3 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h3><p><code>Plug &#39;icymind/NeoSolarized&#39;                 &quot;主题</code></p>\n<h3 id=\"安装状态栏插件\"><a href=\"#安装状态栏插件\" class=\"headerlink\" title=\"安装状态栏插件\"></a>安装状态栏插件</h3><p>状态栏能显示当前的状态，还是有不少用处的，好看的状态栏就是为了美观，毕竟谁也不喜欢对着个难看的东西吧。<br> 　　这里使用的是 <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fvim-airline%2Fvim-airline\" target=\"_blank\" rel=\"noopener\">airline </a>：</p>\n<pre><code>Plug &#39;vim-airline/vim-airline&#39;                     &quot;状态栏工具    \nPlug &#39;vim-airline/vim-airline-themes&#39;              &quot;状态栏主题    \n</code></pre><pre><code class=\"typescript\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Airline config\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nlet g:airline_powerline_fonts = 0\nlet g:airline_theme = &#39;bubblegum&#39;\nlet g:airline#extensions#whitespace#enabled = 0\n\n&quot; to use fancy symbols for airline, uncomment the following lines and use a\n&quot; patched font (more info on the README.rst)\nif !exists(&#39;g:airline_symbols&#39;)\n   let g:airline_symbols = {}\nendif\nlet g:airline_left_sep = &#39;⮀&#39;\nlet g:airline_left_alt_sep = &#39;⮁&#39;\nlet g:airline_right_sep = &#39;⮂&#39;\nlet g:airline_right_alt_sep = &#39;⮃&#39;\nlet g:airline_symbols.branch = &#39;⭠&#39;\nlet g:airline_symbols.readonly = &#39;⭤&#39;\nlet g:airline_symbols.linenr = &#39;⭡&#39;\n\nlet g:airline#extensions#tabline#enabled = 1\nlet g:airline#extensions#tabline#show_tabs = 1\nlet g:airline#extensions#tabline#left_sep = &#39;⮀&#39;\nlet g:airline#extensions#tabline#left_alt_sep = &#39;⮁&#39;\nlet g:airline#extensions#tabline#right_sep = &#39;⮂&#39;\nlet g:airline#extensions#tabline#right_alt_sep = &#39;⮃&#39;\n</code></pre>\n<hr>\n<p>这是我自己的neovim配置</p>\n<p><a href=\"https://github.com/tabris233/config/blob/master/neovim/init.vim\" target=\"_blank\" rel=\"noopener\">https://github.com/tabris233/config/blob/master/neovim/init.vim</a></p>\n"},{"title":"面试学习.","date":"2018-01-29T04:44:08.000Z","description":null,"toc":true,"_content":"\n> 记录下我针对面试的学习\n\n## 算法/编程题\n\n### a\n\n####  [√][荷兰国旗问题](http://acm.nyist.edu.cn/JudgeOnline/problem.php?pid=268)\n\n 噗 , 被高大上的名字给吓到了,其实就是简单的C语言入门题.\n\n####  实现一个LRU算法\n####  [√]双栈实现一个队列\n[实现代码](https://github.com/tabris233/slove-problems/blob/master/2018-1/29/QUEUE-two%20stack.cpp)\n\n####  [√]编程题\n问题: 两个数组 A 表示一串螺丝 B 表示一串螺帽 螺丝和螺帽能够配对，但是A中螺丝之间不能比较大小，B中螺帽之间也不能比较大小，螺丝和螺帽可以比较大小，返回所有螺丝和螺帽的对应关系，要求复杂度小于O(n^2)\n\n解: 类似快速排序,一个和另一个比较就可以了.\n[code](https://github.com/tabris233/slove-problems/blob/master/2018-1/30/%E8%9E%BA%E4%B8%9D%E5%92%8C%E8%9E%BA%E5%B8%BD.cpp)\n####  今日头条笔试真题\nhttps://www.nowcoder.com/test/8537140/summary\n\n## 基础知识\n\n### 算法与数据结构\n\n\n\n### 操作系统\n\n#### 一个进程\n一个进程是**PCB结构与程序与数据的组合**\n\n#### [-]产生死锁的必要条件\n- 互斥条件: 即某个资源在一段时间内只能由一个进程占有,不能同事被两个或两个以上的进程占有.这种独占资源如CD-ROM驱动器,打印机等等,必须在占有该资源的进程主动释放它之后,其他进程才能占有该资源.这是有资源本身的属性所决定的.如独木桥就是一种独占资源,两方的人不能同时过桥.\n\n- 不可抢占条件: 进程所获得的资源在未使用完毕之前,资源申请者不能强行地从资源占有者中夺取资源.而只能由该资源的占有者进程自行释放.如过独木桥的人自己不能强迫对方后退,也不能非法地将对方退下桥,必须是桥上的人自己过桥后空出桥面(即主动释放占有资源),对方的人才能过桥.\n\n- 占有且申请条件: 进程至少已经占有一个资源,但又申请新的资源; 由于该资源已经被另外进程占有,此时该进程阻塞; 但是,它在等待新资源之时,扔继续占用已占有的资源.还以过独木桥为例,甲乙两人在桥上相遇. 甲走过一段桥面(即占有了一些资源),还需要走其余的桥面(申请新的资源),但那部分桥面被已占有(已走过一段桥面).甲过不去,前进不能,又不后退;乙也处于同样的状况.\n\n- 循环等待条件: 存在一个进程等待序列{P1,P2, ... ,Pn}, 其中P1等待P2所占有的某一资源, P2等待P3所占有的某一源, ...... ,而Pn等待P1所占有的某一资源形成一个进程循环等待环.就像前面的过独木桥问题,甲等待乙占有的桥面,而乙有等待甲占有的桥面, 从而彼此循环等待.\n\n#### [-]死锁预防\n- 打破互斥条件: 即允许进程同事访问某些资源.但是,有的资源不允许被同时访问的,像打印机等等.这是由资源本身的属性所决定的. 所以,这种办法并无实用价值\n\n- 打破不可抢占条件: 即允许进程强行从占有者哪里夺取某些资源. 就是说, 当一个进程已占有了某些资源,他又申请新的资源,但不能立即被满足,它必须释放所占有的全部资源, 以后再重新申请. 他所释放的资源可以分配给其他进程.这就相当于该进程占有的资源被隐蔽性地强占了. 这种预防死锁的方法实现起来困难,会降低系统性能.\n\n- 打破占有且申请条件: 可以实行资源预先分配策略. 即进程在运行前一次地向系统申请它所需要的全部资源. 如果某个进程所需的全部资源得不到满足,则不分配任何资源,此进程在不运行.只有当系统能够满足当前进程的全部资源需求时,才一次性地将所申请的资源全部分配给该进程. 由于运行的进程已占有它所需要的全部资源所以不会发生占有资源有申请资源的现象, 因此不会发生死锁. 但是,这种策略也有如下缺点:\n    - 在许多情况下,一个进程在执行之前不可能知道它所需要的全部资源. 这是由于进程在执行时是动态的,不可预测的.\n    - 资源利用率低.无论所分资源何时用到,一个进程只有在占有所需要的全部资源后才能执行.即使有些资源最后才被该进程用到一次,但该进程生存期间一直占有他们,造成长期占着不用的状况.这显然是一种极大的资源浪费.\n    - 降低了进程的并发性.因为资源有限,又加上存在浪费,能分配到所需全部资源的进程个数就必然少了.\n- 打破循环等待条件:**实行资源有序分配策略**.采用这种策略,即把资源事先分类编号,按号分配,使进程在申请,占用资源是不会形成环路.所有进程对资源的请求必须严格按字元序号递增的顺序提出.进程占用了小号资源,才能申请大耗资源,就不会产生环路, 从而预防了死锁.这种策略与前面的策略相比, 资源的利用率和系统的吞吐量都有了很大的提高,但是也存在一下缺点:\n    - 限制了进程对资源的请求,同事给系统中所有资源合理编号也是件困难时,并增加了系统的开销.\n    - 为了遵循按编号申请的次序,在不使用的资源也需要提前申请,从而增加了进程对资源的占用时间.\n\n#### 死锁避免\n- 银行家算法\n系统给当前进程分配资源时,先检查是否安全.\n在满足当前的进程X资源申请后,是否还能有足够的资源去满足下一个距最大资源需求最近的进程(如某进程最大需要5个单位资源,已拥有1个,还需4个),若可以满足,则继续检查下一个距最大资源需求最近的进程,若均能满足所有进程,则表示为安全,可以允许给当前进程X分配其所需的资源申请,否则让该进程X进入等待.\n- 哲学家进餐问题\n\n#### [-]进程和线程的区别\n\n>定义\n>**进程**是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.\n>**线程**是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.\n>关系\n>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.\n>相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。\n>区别\n>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。\n>>简而言之,一个程序至少有一个进程,一个进程至少有一个线程.\n>线程的划分尺度小于进程，使得多线程程序的并发性高。\n>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。\n>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。\n>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。\n>优缺点\n>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。\n\n#### []进程间通信\n\n####### 为什么需要进程间通信？？\n\n进程是一个独立的资源分配单元，不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源（例如打开的文件描述符）。\n\n\n\n但是，进程不是孤立的，不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。\n\n进程间通信的目的：\n\n- 数据传输：一个进程需要将它的数据发送给另一个进程。\n- 通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。\n- 资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。\n- 进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。\nLinux 操作系统支持的主要进程间通信的通信机制：\n\n![进程间通信-1](../images/StudyOfInterview/jcjtx.jpg '进程间通信')\n\n###### [进程间通信(IPC)介绍](https://www.cnblogs.com/CheeseZH/p/5264465.html)\n\n#### []进程调度\n\n#### []进程的内存分布\n\n|||\n|-|-|\n|代码段|全局常量（const）、字符串常量、函数以及编译时可决定的某些东西|\n|数据段|存储初始化的全局变量 和 初始化的静态变量(全局和局部)|\n|BSS段|存储未初始化的全局变量 和 未初始化的静态变量(全局和局部)|\n|堆|动态分配的区域（malloc、new等）|\n|栈|l临时声明的局部变量(初始化以及未初始化的,但不包含静态变量),局部常量(const)|\n|命令行参数和环境变量|顾名思义|\n\n![](https://images2015.cnblogs.com/blog/978007/201702/978007-20170208113706760-1208301174.png)\n\n\n#### 进程调度\n\n- 先来先服务 （FCFS，first come first served） \n在所有调度算法中，最简单的是非抢占式的FCFS算法。 \n算法原理：进程按照它们请求CPU的顺序使用CPU.就像你买东西去排队，谁第一个排，谁就先被执行，在它执行的过程中，不会中断它。当其他人也想进入内存被执行，就要排队等着，如果在执行过程中出现一些事，他现在不想排队了，下一个排队的就补上。此时如果他又想排队了，只能站到队尾去。 \n算法优点：易于理解且实现简单，只需要一个队列(FIFO)，且相当公平 \n算法缺点：比较有利于长进程，而不利于短进程，有利于CPU 繁忙的进程，而不利于I/O 繁忙的进程\n\n- 最短作业优先（SJF, Shortest Job First） \n短作业优先（SJF, Shortest Job First）又称为“短进程优先”SPN(Shortest Process Next)；这是对FCFS算法的改进，其目标是减少平均周转时间。 \n算法原理：对预计执行时间短的进程优先分派处理机。通常后来的短进程不抢先正在执行的进程。 \n算法优点：相比FCFS 算法，该算法可改善平均周转时间和平均带权周转时间，缩短进程的等待时间，提高系统的吞吐量。 \n算法缺点：对长进程非常不利，可能长时间得不到执行，且未能依据进程的紧迫程度来划分执行的优先级，以及难以准确估计进程的执行时间，从而影响调度性能。\n\n- 最高响应比优先法(HRRN，Highest Response Ratio Next) \n最高响应比优先法(HRRN，Highest Response Ratio Next)是对FCFS方式和SJF方式的一种综合平衡。FCFS方式只考虑每个作业的等待时间而未考虑执行时间的长短，而SJF方式只考虑执行时间而未考虑等待时间的长短。因此，这两种调度算法在某些极端情况下会带来某些不便。HRN调度策略同时考虑每个作业的等待时间长短和估计需要的执行时间长短，从中选出响应比最高的作业投入执行。这样，即使是长作业，随着它等待时间的增加，W / T也就随着增加，也就有机会获得调度执行。这种算法是介于FCFS和SJF之间的一种折中算法。 \n算法原理：响应比R定义如下： R =(W+T)/T = 1+W/T \n其中T为该作业估计需要的执行时间，W为作业在后备状态队列中的等待时间。每当要进行作业调度时，系统计算每个作业的响应比，选择其中R最大者投入执行。 \n算法优点：由于长作业也有机会投入运行，在同一时间内处理的作业数显然要少于SJF法，从而采用HRRN方式时其吞吐量将小于采用SJF 法时的吞吐量。 \n算法缺点：由于每次调度前要计算响应比，系统开销也要相应增加。\n\n- 时间片轮转算法（RR，Round-Robin） \n 该算法采用剥夺策略。时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称RR调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。 \n算法原理：让就绪进程以FCFS 的方式按时间片轮流使用CPU 的调度方式，即将系统中所有的就绪进程按照FCFS 原则，排成一个队列，每次调度时将CPU 分派给队首进程，让其执行一个时间片，时间片的长度从几个ms 到几百ms。在一个时间片结束时，发生时钟中断，调度程序据此暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前的队首进程，进程可以未使用完一个时间片，就出让CPU（如阻塞）。 \n 算法优点：时间片轮转调度算法的特点是简单易行、平均响应时间短。 \n算法缺点：不利于处理紧急作业。在时间片轮转算法中，时间片的大小对系统性能的影响很大，因此时间片的大小应选择恰当 \n 怎样确定时间片的大小：\n  - 时间片大小的确定 \n    1.系统对响应时间的要求 \n    2.就绪队列中进程的数目 \n    3.系统的处理力\n\n- 多级反馈队列(Multilevel Feedback Queue) \n多级反馈队列调度算法是一种CPU处理机调度算法，UNIX操作系统采取的便是这种调度算法。 \n多级反馈队列调度算法描述： \n　　1、进程在进入待调度的队列等待时，首先进入优先级最高的Q1等待。 \n　　2、首先调度优先级高的队列中的进程。若高优先级中队列中已没有调度的进程，则调度次优先级队列中的进程。例如：Q1,Q2,Q3三个队列，只有在Q1中没有进程等待时才去调度Q2，同理，只有Q1,Q2都为空时才会去调度Q3。 \n　　3、对于同一个队列中的各个进程，按照时间片轮转法调度。比如Q1队列的时间片为N，那么Q1中的作业在经历了N个时间片后若还没有完成，则进入Q2队列等待，若Q2的时间片用完后作业还不能完成，一直进入下一级队列，直至完成。 \n　　4、在低优先级的队列中的进程在运行时，又有新到达的作业，那么在运行完这个时间片后，CPU马上分配给新到达的作业（抢占式）。 \n　　在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间时，便能够较好的满足各种类型用户的需要。\n\n### 计算机网络\n\n#### []TCP和UDP区别\n||TCP|UDP|\n|-|-|---|\n|传输|提供面向连接的、可靠地数据流传输|提供的是非面向连接的、不可靠的数据流传输|\n|传输单位|TCP报文段|用户数据报|\n|安全性|TCP注重数据安全性|UDP数据传输快，因为不需要链接等待，少了许多操作，但是起安全性却一般|\n||||\n|协议|FTP:定义了文件传输协议,使用21端口;|DNS: 用于域名解析服务,将域名地址转换成IP地址.DNS用的是53号端口.|\n|协议|Telnet: 一种用于远程登录的端口,使用23端口,用户可以以自己的身份远程连接到计算机上,可提供基于DOS模式下的通信服务|SNMP: 简单网络管理协议,使用161端口,是用来管理网络十倍的.由于网络设备很多,无连接的服务就体现出其优势.|\n|协议|SMTP: 邮件传送协议,用于发送邮件.服务端开放的是25号端口|TFTP(Trival File Transfer Protocal): 简单文件传输协议,该协议在熟知端口69上使用UDP服务|\n|协议|POP3: 它是和SMTP对应,POP3用于接收邮件.POP3协议所用的是110端口||\n|协议|HTTP: 是从Web服务器传输超文本到本地浏览器的传送协议||\n\n[详细介绍,戳<<<--](http://blog.csdn.net/li_ning_/article/details/52117463)\n\n>TCP与UDP区别总结：\n>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接\n>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付\n>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）\n>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信\n>TCP首部开销20字节;UDP的首部开销小，只有8个字节\n>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道\n\n#### [-]TCP三次握手/四次挥手\n\n[详细介绍,戳<<<---](http://blog.csdn.net/qzcsu/article/details/72861891)\n[更亲民的介绍,戳<<<---](https://www.cnblogs.com/myvin/p/4862167.html)\n\n建立连接的过程是利用客户服务器模式,假设主机A为客户端,主机B为服务端\n- TCP的三次握手过程：主机Ａ向Ｂ发送链接请求; -> 主机B对收到的主机A的报文段进行确认; -> 主机A再次对主机B的确认进行确认\n- 采用三次握手是为了防止失效的链接请求报文段突然有传送到主机B,因而产生错误.失效的链接请求报文段是指: 主机A出的连接请求没有收到主机B的确认,于是经过一段时间后,主机A又重新向主机B发送连接请求,且建立成功,顺序完成数据传输. 考虑这样一个特殊情况,主机A第一次发送的连接请求并没有丢失,而是因为网络节点导致延迟到达主机B,主机B以为是主机又发起的新连接,于是主机B同意连接,并向主机A发回确认,但是此时主机A根本不会理会,主机B就一直在等待主机A发送数据，导致主机Ｂ的资源浪费．\n- 采用两次握手不行, 原因就是上面说的实效的连接请求的特殊情况.\n\n#### TCP里的一些机制\n\n#### OSI,TCP/IP,五层协议的体系结构,以及各层协议\n\nOSI分层(7层): 物理层,数据链路层,网络层,传输层,会话层,表示层,应用层.\nTCP/IP分层(4层): 网络接口层,网际层,运输层,应用层.\n五层协议(5层): 物理层,数据链路层,网络层,运输层,应用层.\n\n每一层的协议如下:\n物理层: RJ45,CLOCK,IEEE802.3(中继器,集线器)\n数据链路: POP,FR,HDLC,VLAN,MAX(网桥,交换机)\n网络层: IP,UCMP,ARP,RARP,OSPF,IPX,RIP,IGRP(路由器)\n传输层: TCP,UDP,SPX\n会话层: NFS,SQL,NETBIOS,RPC\n表示层: JPEG,MPEG,ASII\n应用层: FTP,DNS,Telnet,SMTP,HTTP,WWW,NFS\n\n每一层的作用如下\n\n物理层: 通过媒介传输比特,确定机械及电器规范(比特Bit)\n数据链路: 将比特组装成帧和点到点的传递(帧Frame)\n网络层: 负责数据包从源到宿的传递和网际互联(包PackeT)\n传输层: 提供端到端的可靠报文传递和错误回复(段Segment)\n会话层: 简历,管理和中智慧化(会话协议数据单元SPDU)\n表示层: 对数据进行翻译,加密和压缩(表示协议数据单元PPDU)\n应用层: 允许方位OSI环境的手段(应用协议数据单元APDU)\n\n#### IP地址的分类\nA类地址: 以0开头, 第一个字节范围1~127(1.0.0.0~127.255.255.255);\nB类地址: 以10开头, 第一个字节范围128~191(128.0.0.0~191.255.255.255);\nC类地址: 以110开头, 第一个字节范围192~223(192.0.0.0~223.255.255.255);\nD类地址: 以1110开头, 第一个字节范围224~239(224.0.0.0~239.255.255.255);\nE类地址: 保留\n\n一种A,B,C是基本类,D,E类作为多播和保留使用.\n以下是留用的内部私有地址:\nA类 10.0.0.0  -- 10.255.255.255\nB类 182.16.00 -- 192.31.255.255\nC类 192.168.0.0 -- 192.168.255.255\n\nIP地址与子网掩码相与(&)得到网络号\nip 192.168.2.110\n&\nsubmask:255.255.255.0\n.---------------------------------\n网络号 192.168.2.0\n\n注: 主机号,全是0的网络号(例如192.168.2.0),主机号全为1的为广播地址(192.168.2.255)\n\n#### ARP是地址解析协议,简单语言解释一下工作原理.\n\n- 首先,每个主机都会在自己的ARP缓冲区中建立一个ARP列表,以表示IP地址和MAC地址之间的对应关系.\n- 当源主机要发送数据时,首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址,如果有,则直接发送数据,如果没有,就向本网段的所有主机发送ARP数据包,该数据包包括的内容有: 源主机的IP地址,源主机的MAC地址,目的主机的IP地址.\n- 当本网络中的所有主机收到该ARP数据包时,首先检查数据包中的IP地址是否是自己的IP地址,如果不是,则忽略该数据包,,如果是,则首先从数据包中去除源主机的IP和MAC地址写入到ARP列表中,如果已经存在,则覆盖,然后将自己的MAC地址写入ARP响应包中,告诉源主机自己是它想要找的MAC地址\n- 源主机收到ARP响应后.将目的主机的IP和MAC地址写入ARP列表,并利用此信息发送数据. 如果源主机一直没有收到ARP相应数据包,表示ARP查询失败.\n\n广播发送ARP请求,单播发送ARP相应. \n\n#### RARP协议\nRARP是逆地址解析协议,作用是完成硬件地址到IP地址的映射,主要用于无盘工作站,因为给无盘工作站配置的IP地址不能保存. \n工作流畅: 在网络中配置一台RARP服务器,里面保存者IP地址和MAC地址的映射关系,当无盘工作站启动后,就封装一个RARP数据包,里面有其MAC地址,然后广播到网络上去,当服务器收到请求包后,就查找对应的MAC地址的IP地址装入响应报文中发回给请求者. 因为需要广播请求报文,因此RARP只能用于具有广播能力的网络.\n\n#### 各种协议的介绍\n\n- **ICMP协议**: 因特网控制报文协议.它是TCP/IP协议族的一个自协议,用于在IP主机/路由器之间传递控制消息.\n- **TFTP协议**: 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议,提供不复杂,开销不大的文件传输服务.\n- **HTTP协议**: 超文本传输协议,是一个属于应用层的面向对象的协议,由于其简捷,快速的方式,适用于分布式超媒体信息系统\n- **NAT协议**: 网络地址转换属介入广域网(WAN)技术,是一种将私有(保留)地址转化为合法IP地址的转换技术.\n- **DHCP协议**: 动态主机配置协议,给用户或者内部网络管理员作为对所有计算机作中央管理的手段.\n\n#### 在浏览器中输入www.baidu.com后执行的全部过程\n\n- 1. 客户端浏览器通过DNS解析到www.baidu.com的IP地址为220.181.27.48, 通过这个IP地址找到客户端到服务器的路径. 客户端浏览器发起一个HTTP回话到220.181.27.48, 然后通过TCP进行封装数据包, 输入到网络层.\n- 2. 在客户端的传输层,把HTTP回话请求分成报文段,添加源和目的端口, 如服务器使用80端口监听客户端的请求, 客户端有系统随机选择一个端口如5000, 与服务器进行交换,服务器吧相应的请求返回给客户端的5000端口. 然后使用IP层的IP地址查找目的端.\n- 3. 客户端的网络层不用关心应用层或者传输层的东西, 主要做到的是通过查找路由表确定如何到达服务器,期间可能经过多个路由器,这些都是有路由器来完成的工作, 我不做过多的描述, 无非就是通过查找路由表决定通过哪个路径到达服务器.\n- 4. 客户端的链路层, 包通过链路层发送到路由器, 通过邻居协议查找给定IP地址的MAC地址,然后发送ARP请求查找到目的地址, 如果得到回应后就可以使用ARP的请求应答交换的IP数据包,现在就可以传输了,然后发送IP数据包到达服务器的地址.\n\n#### DNS域名系统,简单描述其工作原理\n\n当DNS客户机需要在程序中使用名称时, 它会查询DNS服务器来解析该名称. 客户机发送的每条查询信息包括三条信息: 包括: 指定的DNS域名,DNS域名的指定类型. 基于UDP服务,端口53. 该应用一般不直接为用户使用, 而是为其他应用服务,如 HTTP,SMTO等在其中需要完成主机名到地址的转换.\n\n#### 了解交换机,路由器,网关的概念, 并知道各自的用途\n\n- **交换机**\n在计算机网络系统中,交换机是针对共享工作模式的弱点而推出的.交换机拥有一条高带宽的背部总线和内部交换矩阵.交换机的所有的端口都挂接在这条背部总线上,当控制电路收到数据包以后,处理端口会查找内存中的地址对照表以确定目的端口.目的MAC若不存在,交换机才广播到所有的端口, 接手端口回应后交换机会'学习'新的地址,并把它添加入内部地址表中.\n交换机工作于OSI参考模型的第二层,即数据链路层. 交换机内部的CPU会在每个端口成功连接时,通过ARP协议学习它的MAC地址,保存成一张ARP表. 在今后的通讯中, 发往该MAC地址的数据包将仅送往其对应的端口,而不是所有端口. 因此,交换机可用于划分数据链路层广播,即冲突域; 但它不能划分网络层广播, 即广播域.\n交换机被广泛应用于二层网络交换,俗称'二层交换机'.\n交换机的种类有: 二层交换机,三层交换机,四层交换机,七层交换机分别工作在OSI七层模型中的第二层,第三层,第四层和第七层,并因此而得名.\n\n- 路由器\n路由器(Router)是一种计算机网络设备,提供了路由与传送两种重要机制,可以决定数据包从来源端到目的端所经过的路由路径(host到host之间的传输路径),这个过程称为**路由**; 将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行),这成为**传动**. 路由工作在OSI模型的第三层 -> 即网络层,例如网际协议.\n路由器的一个作用是连通不同的网络另一个作用是选择信息传送的线路. 路由器与交换机的差别, 路由器是属于OSI第三层的产品,交换机是OSI第二层的产品(这里至二层交换机)\n\n- 网关\n网关(Gateway), 网关顾名思义就是连接两个网络的设备,区别与路由器(由于历史的原因,许多有关TCP/IP的文献曾经把网络层使用的路由器成为网关,在今天很多局域网采用的都是路由器来接入网络,因此现在通常指的网关就是路由器的IP),经常在家庭中或者小型企业网络中使用,用于连接局域网和Internet. 网关也经常把一种协议转成另一种协议的设备,比如语音网关.\n在传统TCP/IP术语中,网络设备只分成两种,一种为网关(Gateway),另一种称为主机(host). 网关能在网络间传递数据包,但主机不能传送数据包.在主机(又称终端系统,end system)中,数据包需经过TCP/IP四层协议处理,但是在网关(又称中介系统,intermediate system)只需要到达网际层(Internet layer),决定路径之后就可以传送. 在当时,网关(Gateway)和路由(Router)还没有区别.\n在现代网络术语中,网关(Gateway)和路由(Router)的定义不同,网关(Gateway)能在不同协议间移动数据,而路由器(Router)是在不同网络间移动数据,相当于传统所说的IP网关(IP Gateway).\n网关是连接两个网络的设备,对于语音网关来说,它可以连接PSTN网络和以太网,这就相当于VOIP,把不同电话的模拟信号通过网关而转换成数字信号,而且加入协议再去传输. 在到了接收端的时候再通过网关还原成模拟的电话信号,最后才能在电话机上听到.\n对于以太网中的网关只能转发三层以上数据包,这一点和路由是一样的.而不同的是网关中并没有路由表,他只能按照预先设定的不同网段来进行转发.网关最重要的一层就是端口映射,子网内用户在外网看来只是外网的IP地址对应着不同的端口,这样看来就会保护子网内的用户.\n\n### C/C++\n\n#### BSS段的功能\n\n#### char *p1 = \"123\" 与char p2[]=\"123\",其中p1,p2区别\n\n答: 常量是存储在内存中的,\n*p1 是指针 指向\"123\"中的\"1\"的地址\np2[] 是数组 本质是在堆栈中定义的一段内存\n\n#### sizeof(struct{char c;int a;}) = ?\n\n答: 4\n\n内存对其,整体占得内存一定是**最大数据元素的整数倍**.\n这里最大的是int(4字节)整体就是(4*n字节)\n大概是这个样子\n|int|char|\n△△△△|△---|\n\n#### 多线程编程经验\n\n#### C++网络编程\n\n#### C++11新增了什么,了解的有哪些.\n\n#### [√]const关键字作用.\n[好文](https://www.cnblogs.com/chogen/p/4574118.html)\n####  [-]多态/虚函数\n\n[介绍](https://www.cnblogs.com/qiaoconglovelife/p/5128523.html)\n\n### Java\n\n####  [√]HashMap\n\n[介绍链接](https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191907&idx=1&sn=876860c5a9a6710ead5dd8de37403ffc&chksm=8c990c39bbee852f71c9dfc587fd70d10b0eab1cca17123c0a68bf1e16d46d71717712b91509&scene=38#wechat_redirect)\n\n#### Synchronze 和 Lock的区别和用法\n\nSynchronze(隐式锁) | Lock(显示锁)\n-|-\n在需要同步的对象中加入此控制,synchronize可以加在方法上,也可以加在特定代码块中,括号中表示需要所得对象|需要显示指定起始位置和终止位置.一般使用ReentrantLock类作为锁,多个线程中必须要使用一个ReentrantLock类作为对象才能保证锁的生效.且在加锁和解锁处需要通过lock()和unlock()显示指出.所以一般会在finally块中写unlock()以防死锁\n托管给JVM执行的|java写的控制锁代码\n采用的的CPU的悲观锁机制,即线程获得的是独占锁.独占锁意味着其他线程只能依靠阻塞来等待线程释放锁|乐观锁方式,每次不加锁而是假设没有冲突而去完成某项操作,如果因为冲突失败就重试,直到成功为止.乐观锁实现的机制就是CAS操作(Compare and Swap)\n\nPs: 在Java1.5中, syncchronize是性能低效的,因为这是一个重量级操作,需要调用操作接口,导致有可能加锁消耗的系统时间比加锁以外的操作还多. 相比之下使用Java提供的Lock对象,性能更高一些.但是到了Java1.6,发生了变化. synchronize在语义上很清晰,可以进行很多优化,有适应自旋,锁消除,锁粗化,轻量级锁,偏向锁等等. 导致在Java1.6上synchronize的性能并不比Lock差.\n\n#### 乐观锁,悲观锁\n\n- **乐观锁（ Optimistic Locking ）** 相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。\n- **悲观锁（Pessimistic Lock）**，正如其名，具有强烈的独占和排他特性。它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。\n\n### Linux \n\n#### 进程的内存分布\n\n名称|内容\n-|-\n代码段|可执行代码\n数据段|已初始化全局变量,已初始化全局静态变量,局部静态变量,常量数据\nBSS段|未初始化全局变量,未初始化全局静态变量\n栈|局部变量,函数参数\n堆|动态内存分配\n\n\n\n#### 那个命令可以常看内存使用情况\n答: \ntop\nfree [-h]\n<!-- ps aux --sort -rss -->\n#### touch有什么用\n\n答: 两个作用\n- 一,用于吧已存在文件的时间标签更新为系统当前的时间(默认方式),它们的数据将原封不动地保留下来;\n- 二,用来创建新的空文件\n\n#### 僵尸进程,孤儿进程,守护进程\n\n[详细介绍](https://blog.csdn.net/gogokongyin/article/details/51340432)\n\n- **僵尸进程:** 在fork()/execve()过程中,假设子进程结束时父进程仍存在,而父进程fork()之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束,又没有显示忽略该信号,则子进程成为僵尸进程.\n\n- **孤儿进程:** 一个父进程退出,而它的一个或多个子进程还在运行,那么那些子进程将成为孤儿进程. 孤儿进程将被init进程(进程号为1)所收养,并由init进程对他们完成状态收集工作. \n\n- **守护进程:** Linux系统中的守护进程是一种运行在后台的进程. 而守护进程,也就是通常说的Daemon进程. 它通常独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件. Linux大多数服务器进程就是用这种守护进程实现的, 例如Web服务.守护进程常常在系统引导装入时启动, 在系统关闭时终止. 守护进程最大的特点是运行在后台,与终端无连接, 除非特殊情况下, 用户不能操作守护进程.\n\n### python\n\n### 大数据\n\n#### MongoDB vs Redis\n\nMongoDB和Redis都是NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。\n\n MongoDB建议集群部署，更多的考虑到集群方案，Redis更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式。\n\n \n\n比较指标\t|MongoDB(v2.4.9)\t|Redis(v2.4.17)\t|比较说明\n-|-|-|-\n实现语言\t|c++\t|c/c++\t|-\n协议\t|BSON,自定义二进制\t|类telnet\t|-\n性能\t|依赖内存,TPS{(transaction per second)代表每秒执行的事务数量}较高\t|依赖内存,TPS非常高\t|Redis优于MongoDB\n可操作性\t|丰富的数据表达,索引;最类似于关系型数据库,支持丰富的查询语句\t|数据丰富,较少的IO\t|MongoDB优于Redis\n内存及存储\t|适合大数据量存储,依赖系统虚拟内存,采用镜像文件存储;内存占用率比较高,官方建议独立部署在64位系统\t|Redis2.0后支持虚拟内存特性(VM) 突破物理内存限制;数据可以设置时效性,类似于memcache\t|不同的应用场景,各有千秋\n可用性|\t支持master-slave,replicatset(内部采用paxos选举算法,自动故障恢复),auto sharding机制,对客户端屏蔽了故障转移和切片机制\t|依赖客户端来实现分布式读写;主从复制时,每次从节点重新连接主节点都要依赖整个快照,无增量复制;不支持auto sharding,需要依赖程序设定一致性hash机制\t|MongoDB优于Redis；单点问题上,MongoDB应用简单,相对用户透明,Redis比较复杂,需要客户端主动解决.(MongoDB一般使用replicasets和sharding相结合,replicasets侧重高可用性以及高可靠,sharding侧重性能,水平扩展)\n可靠性|\t从1.8版本后,采用binlog方式(类似Mysql) 支持持久化\t|依赖快照进行持久化;AOF增强可靠性;增强性的同时,影响访问性能\t|-\n一致性|\t不支持事务,靠客户端保证\t|支持事务,比较脆,仅能保证事务中的操作按顺序执行\t|Redis优于MongoDB\n数据分析|\t内置数据分析功能(mapreduce)\t|不支持\t|MongoDB优于Redis\n应用场景|\t海量数据的访问效率提升\t|较小数据量的性能和运算\t|MongoDB优于Redis\n\n\n### 数据库\n\n#### 数据库事务的四大特性(ACID)\n\n- **原子性(Atomicity)**\n事务是数据库的逻辑工作单位,它对数据库的修改要么全部执行,要么全部不执行.\n- **一致性(Consistemcy)**\n事务前后,数据库的状态都满足所有的完整性约束\n- **隔离性(lsolation)**\n并发执行的事务是隔离的,一个不影响一个.如果有两个事务,运行在相同的时间内,执行相同的功能,事务的隔离性将确保每一事务在系统中认为只有该事物在使用系统. 这种属性有时称为串行化,为了防止事务操作间的混淆,必须串行化或序列化请求,使得在同一时间仅有y一个请求用于统一数据.通过设置数据库的**隔离级别**,可以达到不同的隔离效果.\n- 持久性(Durability)\n在事务完成后,该事务所对数据库所作的更改便持久的保存在数据库之中,并不会被回滚.\n\n#### 并发事务引起的问题\n\n- **更新丢失**\n两个事务都同时更新一行数据，但是第二个事务却中途失败退出，导致对数据的两个修改都失效了。这是因为系统没有执行任何的锁操作，因此并发事务并没有被隔离开来。\n\n- **脏读**\n脏读又称无效数据读出。一个事务读取另外一个事务还没有提交的数据叫脏读。\n例如：事务T1修改了一行数据，但是还没有提交，这时候事务T2读取了被事务T1修改后的数据，之后事务T1因为某种原因Rollback了，那么事务T2读取的数据就是脏的。\n\n## 设计题/系统题\n\n### .\n\n#### []设计一个ID分配器\n\n#### .\n\n\n## 技术无关\n\n### .\n\n#### 能抗住压力么 \n\n答:作为应届生,本就应该吃苦耐劳学技术,人都是逼出来的,有压力才有动力,这点压力不算什么.\n\n#### 有女朋友么\n答: 没有,一心向学,不找女朋友浪费时间.(TM是找不到好不2333)\n\n#### 你有什么问题吗\n\n1. 这个岗位做的主要业务是什么\n2. 岗位的技术栈\n3. 招这个岗位的校招或者实习生更看重哪方面的能力\n","source":"_posts/StudyOfInterview.md","raw":"---\ntitle: 面试学习.\ndate: 2018-1-29 12:44:08\ncategories:  \ntags: [面试,C++,大数据,操作系统,计算机网络] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n---\n\n> 记录下我针对面试的学习\n\n## 算法/编程题\n\n### a\n\n####  [√][荷兰国旗问题](http://acm.nyist.edu.cn/JudgeOnline/problem.php?pid=268)\n\n 噗 , 被高大上的名字给吓到了,其实就是简单的C语言入门题.\n\n####  实现一个LRU算法\n####  [√]双栈实现一个队列\n[实现代码](https://github.com/tabris233/slove-problems/blob/master/2018-1/29/QUEUE-two%20stack.cpp)\n\n####  [√]编程题\n问题: 两个数组 A 表示一串螺丝 B 表示一串螺帽 螺丝和螺帽能够配对，但是A中螺丝之间不能比较大小，B中螺帽之间也不能比较大小，螺丝和螺帽可以比较大小，返回所有螺丝和螺帽的对应关系，要求复杂度小于O(n^2)\n\n解: 类似快速排序,一个和另一个比较就可以了.\n[code](https://github.com/tabris233/slove-problems/blob/master/2018-1/30/%E8%9E%BA%E4%B8%9D%E5%92%8C%E8%9E%BA%E5%B8%BD.cpp)\n####  今日头条笔试真题\nhttps://www.nowcoder.com/test/8537140/summary\n\n## 基础知识\n\n### 算法与数据结构\n\n\n\n### 操作系统\n\n#### 一个进程\n一个进程是**PCB结构与程序与数据的组合**\n\n#### [-]产生死锁的必要条件\n- 互斥条件: 即某个资源在一段时间内只能由一个进程占有,不能同事被两个或两个以上的进程占有.这种独占资源如CD-ROM驱动器,打印机等等,必须在占有该资源的进程主动释放它之后,其他进程才能占有该资源.这是有资源本身的属性所决定的.如独木桥就是一种独占资源,两方的人不能同时过桥.\n\n- 不可抢占条件: 进程所获得的资源在未使用完毕之前,资源申请者不能强行地从资源占有者中夺取资源.而只能由该资源的占有者进程自行释放.如过独木桥的人自己不能强迫对方后退,也不能非法地将对方退下桥,必须是桥上的人自己过桥后空出桥面(即主动释放占有资源),对方的人才能过桥.\n\n- 占有且申请条件: 进程至少已经占有一个资源,但又申请新的资源; 由于该资源已经被另外进程占有,此时该进程阻塞; 但是,它在等待新资源之时,扔继续占用已占有的资源.还以过独木桥为例,甲乙两人在桥上相遇. 甲走过一段桥面(即占有了一些资源),还需要走其余的桥面(申请新的资源),但那部分桥面被已占有(已走过一段桥面).甲过不去,前进不能,又不后退;乙也处于同样的状况.\n\n- 循环等待条件: 存在一个进程等待序列{P1,P2, ... ,Pn}, 其中P1等待P2所占有的某一资源, P2等待P3所占有的某一源, ...... ,而Pn等待P1所占有的某一资源形成一个进程循环等待环.就像前面的过独木桥问题,甲等待乙占有的桥面,而乙有等待甲占有的桥面, 从而彼此循环等待.\n\n#### [-]死锁预防\n- 打破互斥条件: 即允许进程同事访问某些资源.但是,有的资源不允许被同时访问的,像打印机等等.这是由资源本身的属性所决定的. 所以,这种办法并无实用价值\n\n- 打破不可抢占条件: 即允许进程强行从占有者哪里夺取某些资源. 就是说, 当一个进程已占有了某些资源,他又申请新的资源,但不能立即被满足,它必须释放所占有的全部资源, 以后再重新申请. 他所释放的资源可以分配给其他进程.这就相当于该进程占有的资源被隐蔽性地强占了. 这种预防死锁的方法实现起来困难,会降低系统性能.\n\n- 打破占有且申请条件: 可以实行资源预先分配策略. 即进程在运行前一次地向系统申请它所需要的全部资源. 如果某个进程所需的全部资源得不到满足,则不分配任何资源,此进程在不运行.只有当系统能够满足当前进程的全部资源需求时,才一次性地将所申请的资源全部分配给该进程. 由于运行的进程已占有它所需要的全部资源所以不会发生占有资源有申请资源的现象, 因此不会发生死锁. 但是,这种策略也有如下缺点:\n    - 在许多情况下,一个进程在执行之前不可能知道它所需要的全部资源. 这是由于进程在执行时是动态的,不可预测的.\n    - 资源利用率低.无论所分资源何时用到,一个进程只有在占有所需要的全部资源后才能执行.即使有些资源最后才被该进程用到一次,但该进程生存期间一直占有他们,造成长期占着不用的状况.这显然是一种极大的资源浪费.\n    - 降低了进程的并发性.因为资源有限,又加上存在浪费,能分配到所需全部资源的进程个数就必然少了.\n- 打破循环等待条件:**实行资源有序分配策略**.采用这种策略,即把资源事先分类编号,按号分配,使进程在申请,占用资源是不会形成环路.所有进程对资源的请求必须严格按字元序号递增的顺序提出.进程占用了小号资源,才能申请大耗资源,就不会产生环路, 从而预防了死锁.这种策略与前面的策略相比, 资源的利用率和系统的吞吐量都有了很大的提高,但是也存在一下缺点:\n    - 限制了进程对资源的请求,同事给系统中所有资源合理编号也是件困难时,并增加了系统的开销.\n    - 为了遵循按编号申请的次序,在不使用的资源也需要提前申请,从而增加了进程对资源的占用时间.\n\n#### 死锁避免\n- 银行家算法\n系统给当前进程分配资源时,先检查是否安全.\n在满足当前的进程X资源申请后,是否还能有足够的资源去满足下一个距最大资源需求最近的进程(如某进程最大需要5个单位资源,已拥有1个,还需4个),若可以满足,则继续检查下一个距最大资源需求最近的进程,若均能满足所有进程,则表示为安全,可以允许给当前进程X分配其所需的资源申请,否则让该进程X进入等待.\n- 哲学家进餐问题\n\n#### [-]进程和线程的区别\n\n>定义\n>**进程**是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.\n>**线程**是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.\n>关系\n>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.\n>相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。\n>区别\n>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。\n>>简而言之,一个程序至少有一个进程,一个进程至少有一个线程.\n>线程的划分尺度小于进程，使得多线程程序的并发性高。\n>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。\n>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。\n>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。\n>优缺点\n>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。\n\n#### []进程间通信\n\n####### 为什么需要进程间通信？？\n\n进程是一个独立的资源分配单元，不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源（例如打开的文件描述符）。\n\n\n\n但是，进程不是孤立的，不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。\n\n进程间通信的目的：\n\n- 数据传输：一个进程需要将它的数据发送给另一个进程。\n- 通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。\n- 资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。\n- 进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。\nLinux 操作系统支持的主要进程间通信的通信机制：\n\n![进程间通信-1](../images/StudyOfInterview/jcjtx.jpg '进程间通信')\n\n###### [进程间通信(IPC)介绍](https://www.cnblogs.com/CheeseZH/p/5264465.html)\n\n#### []进程调度\n\n#### []进程的内存分布\n\n|||\n|-|-|\n|代码段|全局常量（const）、字符串常量、函数以及编译时可决定的某些东西|\n|数据段|存储初始化的全局变量 和 初始化的静态变量(全局和局部)|\n|BSS段|存储未初始化的全局变量 和 未初始化的静态变量(全局和局部)|\n|堆|动态分配的区域（malloc、new等）|\n|栈|l临时声明的局部变量(初始化以及未初始化的,但不包含静态变量),局部常量(const)|\n|命令行参数和环境变量|顾名思义|\n\n![](https://images2015.cnblogs.com/blog/978007/201702/978007-20170208113706760-1208301174.png)\n\n\n#### 进程调度\n\n- 先来先服务 （FCFS，first come first served） \n在所有调度算法中，最简单的是非抢占式的FCFS算法。 \n算法原理：进程按照它们请求CPU的顺序使用CPU.就像你买东西去排队，谁第一个排，谁就先被执行，在它执行的过程中，不会中断它。当其他人也想进入内存被执行，就要排队等着，如果在执行过程中出现一些事，他现在不想排队了，下一个排队的就补上。此时如果他又想排队了，只能站到队尾去。 \n算法优点：易于理解且实现简单，只需要一个队列(FIFO)，且相当公平 \n算法缺点：比较有利于长进程，而不利于短进程，有利于CPU 繁忙的进程，而不利于I/O 繁忙的进程\n\n- 最短作业优先（SJF, Shortest Job First） \n短作业优先（SJF, Shortest Job First）又称为“短进程优先”SPN(Shortest Process Next)；这是对FCFS算法的改进，其目标是减少平均周转时间。 \n算法原理：对预计执行时间短的进程优先分派处理机。通常后来的短进程不抢先正在执行的进程。 \n算法优点：相比FCFS 算法，该算法可改善平均周转时间和平均带权周转时间，缩短进程的等待时间，提高系统的吞吐量。 \n算法缺点：对长进程非常不利，可能长时间得不到执行，且未能依据进程的紧迫程度来划分执行的优先级，以及难以准确估计进程的执行时间，从而影响调度性能。\n\n- 最高响应比优先法(HRRN，Highest Response Ratio Next) \n最高响应比优先法(HRRN，Highest Response Ratio Next)是对FCFS方式和SJF方式的一种综合平衡。FCFS方式只考虑每个作业的等待时间而未考虑执行时间的长短，而SJF方式只考虑执行时间而未考虑等待时间的长短。因此，这两种调度算法在某些极端情况下会带来某些不便。HRN调度策略同时考虑每个作业的等待时间长短和估计需要的执行时间长短，从中选出响应比最高的作业投入执行。这样，即使是长作业，随着它等待时间的增加，W / T也就随着增加，也就有机会获得调度执行。这种算法是介于FCFS和SJF之间的一种折中算法。 \n算法原理：响应比R定义如下： R =(W+T)/T = 1+W/T \n其中T为该作业估计需要的执行时间，W为作业在后备状态队列中的等待时间。每当要进行作业调度时，系统计算每个作业的响应比，选择其中R最大者投入执行。 \n算法优点：由于长作业也有机会投入运行，在同一时间内处理的作业数显然要少于SJF法，从而采用HRRN方式时其吞吐量将小于采用SJF 法时的吞吐量。 \n算法缺点：由于每次调度前要计算响应比，系统开销也要相应增加。\n\n- 时间片轮转算法（RR，Round-Robin） \n 该算法采用剥夺策略。时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称RR调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。 \n算法原理：让就绪进程以FCFS 的方式按时间片轮流使用CPU 的调度方式，即将系统中所有的就绪进程按照FCFS 原则，排成一个队列，每次调度时将CPU 分派给队首进程，让其执行一个时间片，时间片的长度从几个ms 到几百ms。在一个时间片结束时，发生时钟中断，调度程序据此暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前的队首进程，进程可以未使用完一个时间片，就出让CPU（如阻塞）。 \n 算法优点：时间片轮转调度算法的特点是简单易行、平均响应时间短。 \n算法缺点：不利于处理紧急作业。在时间片轮转算法中，时间片的大小对系统性能的影响很大，因此时间片的大小应选择恰当 \n 怎样确定时间片的大小：\n  - 时间片大小的确定 \n    1.系统对响应时间的要求 \n    2.就绪队列中进程的数目 \n    3.系统的处理力\n\n- 多级反馈队列(Multilevel Feedback Queue) \n多级反馈队列调度算法是一种CPU处理机调度算法，UNIX操作系统采取的便是这种调度算法。 \n多级反馈队列调度算法描述： \n　　1、进程在进入待调度的队列等待时，首先进入优先级最高的Q1等待。 \n　　2、首先调度优先级高的队列中的进程。若高优先级中队列中已没有调度的进程，则调度次优先级队列中的进程。例如：Q1,Q2,Q3三个队列，只有在Q1中没有进程等待时才去调度Q2，同理，只有Q1,Q2都为空时才会去调度Q3。 \n　　3、对于同一个队列中的各个进程，按照时间片轮转法调度。比如Q1队列的时间片为N，那么Q1中的作业在经历了N个时间片后若还没有完成，则进入Q2队列等待，若Q2的时间片用完后作业还不能完成，一直进入下一级队列，直至完成。 \n　　4、在低优先级的队列中的进程在运行时，又有新到达的作业，那么在运行完这个时间片后，CPU马上分配给新到达的作业（抢占式）。 \n　　在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间时，便能够较好的满足各种类型用户的需要。\n\n### 计算机网络\n\n#### []TCP和UDP区别\n||TCP|UDP|\n|-|-|---|\n|传输|提供面向连接的、可靠地数据流传输|提供的是非面向连接的、不可靠的数据流传输|\n|传输单位|TCP报文段|用户数据报|\n|安全性|TCP注重数据安全性|UDP数据传输快，因为不需要链接等待，少了许多操作，但是起安全性却一般|\n||||\n|协议|FTP:定义了文件传输协议,使用21端口;|DNS: 用于域名解析服务,将域名地址转换成IP地址.DNS用的是53号端口.|\n|协议|Telnet: 一种用于远程登录的端口,使用23端口,用户可以以自己的身份远程连接到计算机上,可提供基于DOS模式下的通信服务|SNMP: 简单网络管理协议,使用161端口,是用来管理网络十倍的.由于网络设备很多,无连接的服务就体现出其优势.|\n|协议|SMTP: 邮件传送协议,用于发送邮件.服务端开放的是25号端口|TFTP(Trival File Transfer Protocal): 简单文件传输协议,该协议在熟知端口69上使用UDP服务|\n|协议|POP3: 它是和SMTP对应,POP3用于接收邮件.POP3协议所用的是110端口||\n|协议|HTTP: 是从Web服务器传输超文本到本地浏览器的传送协议||\n\n[详细介绍,戳<<<--](http://blog.csdn.net/li_ning_/article/details/52117463)\n\n>TCP与UDP区别总结：\n>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接\n>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付\n>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）\n>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信\n>TCP首部开销20字节;UDP的首部开销小，只有8个字节\n>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道\n\n#### [-]TCP三次握手/四次挥手\n\n[详细介绍,戳<<<---](http://blog.csdn.net/qzcsu/article/details/72861891)\n[更亲民的介绍,戳<<<---](https://www.cnblogs.com/myvin/p/4862167.html)\n\n建立连接的过程是利用客户服务器模式,假设主机A为客户端,主机B为服务端\n- TCP的三次握手过程：主机Ａ向Ｂ发送链接请求; -> 主机B对收到的主机A的报文段进行确认; -> 主机A再次对主机B的确认进行确认\n- 采用三次握手是为了防止失效的链接请求报文段突然有传送到主机B,因而产生错误.失效的链接请求报文段是指: 主机A出的连接请求没有收到主机B的确认,于是经过一段时间后,主机A又重新向主机B发送连接请求,且建立成功,顺序完成数据传输. 考虑这样一个特殊情况,主机A第一次发送的连接请求并没有丢失,而是因为网络节点导致延迟到达主机B,主机B以为是主机又发起的新连接,于是主机B同意连接,并向主机A发回确认,但是此时主机A根本不会理会,主机B就一直在等待主机A发送数据，导致主机Ｂ的资源浪费．\n- 采用两次握手不行, 原因就是上面说的实效的连接请求的特殊情况.\n\n#### TCP里的一些机制\n\n#### OSI,TCP/IP,五层协议的体系结构,以及各层协议\n\nOSI分层(7层): 物理层,数据链路层,网络层,传输层,会话层,表示层,应用层.\nTCP/IP分层(4层): 网络接口层,网际层,运输层,应用层.\n五层协议(5层): 物理层,数据链路层,网络层,运输层,应用层.\n\n每一层的协议如下:\n物理层: RJ45,CLOCK,IEEE802.3(中继器,集线器)\n数据链路: POP,FR,HDLC,VLAN,MAX(网桥,交换机)\n网络层: IP,UCMP,ARP,RARP,OSPF,IPX,RIP,IGRP(路由器)\n传输层: TCP,UDP,SPX\n会话层: NFS,SQL,NETBIOS,RPC\n表示层: JPEG,MPEG,ASII\n应用层: FTP,DNS,Telnet,SMTP,HTTP,WWW,NFS\n\n每一层的作用如下\n\n物理层: 通过媒介传输比特,确定机械及电器规范(比特Bit)\n数据链路: 将比特组装成帧和点到点的传递(帧Frame)\n网络层: 负责数据包从源到宿的传递和网际互联(包PackeT)\n传输层: 提供端到端的可靠报文传递和错误回复(段Segment)\n会话层: 简历,管理和中智慧化(会话协议数据单元SPDU)\n表示层: 对数据进行翻译,加密和压缩(表示协议数据单元PPDU)\n应用层: 允许方位OSI环境的手段(应用协议数据单元APDU)\n\n#### IP地址的分类\nA类地址: 以0开头, 第一个字节范围1~127(1.0.0.0~127.255.255.255);\nB类地址: 以10开头, 第一个字节范围128~191(128.0.0.0~191.255.255.255);\nC类地址: 以110开头, 第一个字节范围192~223(192.0.0.0~223.255.255.255);\nD类地址: 以1110开头, 第一个字节范围224~239(224.0.0.0~239.255.255.255);\nE类地址: 保留\n\n一种A,B,C是基本类,D,E类作为多播和保留使用.\n以下是留用的内部私有地址:\nA类 10.0.0.0  -- 10.255.255.255\nB类 182.16.00 -- 192.31.255.255\nC类 192.168.0.0 -- 192.168.255.255\n\nIP地址与子网掩码相与(&)得到网络号\nip 192.168.2.110\n&\nsubmask:255.255.255.0\n.---------------------------------\n网络号 192.168.2.0\n\n注: 主机号,全是0的网络号(例如192.168.2.0),主机号全为1的为广播地址(192.168.2.255)\n\n#### ARP是地址解析协议,简单语言解释一下工作原理.\n\n- 首先,每个主机都会在自己的ARP缓冲区中建立一个ARP列表,以表示IP地址和MAC地址之间的对应关系.\n- 当源主机要发送数据时,首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址,如果有,则直接发送数据,如果没有,就向本网段的所有主机发送ARP数据包,该数据包包括的内容有: 源主机的IP地址,源主机的MAC地址,目的主机的IP地址.\n- 当本网络中的所有主机收到该ARP数据包时,首先检查数据包中的IP地址是否是自己的IP地址,如果不是,则忽略该数据包,,如果是,则首先从数据包中去除源主机的IP和MAC地址写入到ARP列表中,如果已经存在,则覆盖,然后将自己的MAC地址写入ARP响应包中,告诉源主机自己是它想要找的MAC地址\n- 源主机收到ARP响应后.将目的主机的IP和MAC地址写入ARP列表,并利用此信息发送数据. 如果源主机一直没有收到ARP相应数据包,表示ARP查询失败.\n\n广播发送ARP请求,单播发送ARP相应. \n\n#### RARP协议\nRARP是逆地址解析协议,作用是完成硬件地址到IP地址的映射,主要用于无盘工作站,因为给无盘工作站配置的IP地址不能保存. \n工作流畅: 在网络中配置一台RARP服务器,里面保存者IP地址和MAC地址的映射关系,当无盘工作站启动后,就封装一个RARP数据包,里面有其MAC地址,然后广播到网络上去,当服务器收到请求包后,就查找对应的MAC地址的IP地址装入响应报文中发回给请求者. 因为需要广播请求报文,因此RARP只能用于具有广播能力的网络.\n\n#### 各种协议的介绍\n\n- **ICMP协议**: 因特网控制报文协议.它是TCP/IP协议族的一个自协议,用于在IP主机/路由器之间传递控制消息.\n- **TFTP协议**: 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议,提供不复杂,开销不大的文件传输服务.\n- **HTTP协议**: 超文本传输协议,是一个属于应用层的面向对象的协议,由于其简捷,快速的方式,适用于分布式超媒体信息系统\n- **NAT协议**: 网络地址转换属介入广域网(WAN)技术,是一种将私有(保留)地址转化为合法IP地址的转换技术.\n- **DHCP协议**: 动态主机配置协议,给用户或者内部网络管理员作为对所有计算机作中央管理的手段.\n\n#### 在浏览器中输入www.baidu.com后执行的全部过程\n\n- 1. 客户端浏览器通过DNS解析到www.baidu.com的IP地址为220.181.27.48, 通过这个IP地址找到客户端到服务器的路径. 客户端浏览器发起一个HTTP回话到220.181.27.48, 然后通过TCP进行封装数据包, 输入到网络层.\n- 2. 在客户端的传输层,把HTTP回话请求分成报文段,添加源和目的端口, 如服务器使用80端口监听客户端的请求, 客户端有系统随机选择一个端口如5000, 与服务器进行交换,服务器吧相应的请求返回给客户端的5000端口. 然后使用IP层的IP地址查找目的端.\n- 3. 客户端的网络层不用关心应用层或者传输层的东西, 主要做到的是通过查找路由表确定如何到达服务器,期间可能经过多个路由器,这些都是有路由器来完成的工作, 我不做过多的描述, 无非就是通过查找路由表决定通过哪个路径到达服务器.\n- 4. 客户端的链路层, 包通过链路层发送到路由器, 通过邻居协议查找给定IP地址的MAC地址,然后发送ARP请求查找到目的地址, 如果得到回应后就可以使用ARP的请求应答交换的IP数据包,现在就可以传输了,然后发送IP数据包到达服务器的地址.\n\n#### DNS域名系统,简单描述其工作原理\n\n当DNS客户机需要在程序中使用名称时, 它会查询DNS服务器来解析该名称. 客户机发送的每条查询信息包括三条信息: 包括: 指定的DNS域名,DNS域名的指定类型. 基于UDP服务,端口53. 该应用一般不直接为用户使用, 而是为其他应用服务,如 HTTP,SMTO等在其中需要完成主机名到地址的转换.\n\n#### 了解交换机,路由器,网关的概念, 并知道各自的用途\n\n- **交换机**\n在计算机网络系统中,交换机是针对共享工作模式的弱点而推出的.交换机拥有一条高带宽的背部总线和内部交换矩阵.交换机的所有的端口都挂接在这条背部总线上,当控制电路收到数据包以后,处理端口会查找内存中的地址对照表以确定目的端口.目的MAC若不存在,交换机才广播到所有的端口, 接手端口回应后交换机会'学习'新的地址,并把它添加入内部地址表中.\n交换机工作于OSI参考模型的第二层,即数据链路层. 交换机内部的CPU会在每个端口成功连接时,通过ARP协议学习它的MAC地址,保存成一张ARP表. 在今后的通讯中, 发往该MAC地址的数据包将仅送往其对应的端口,而不是所有端口. 因此,交换机可用于划分数据链路层广播,即冲突域; 但它不能划分网络层广播, 即广播域.\n交换机被广泛应用于二层网络交换,俗称'二层交换机'.\n交换机的种类有: 二层交换机,三层交换机,四层交换机,七层交换机分别工作在OSI七层模型中的第二层,第三层,第四层和第七层,并因此而得名.\n\n- 路由器\n路由器(Router)是一种计算机网络设备,提供了路由与传送两种重要机制,可以决定数据包从来源端到目的端所经过的路由路径(host到host之间的传输路径),这个过程称为**路由**; 将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行),这成为**传动**. 路由工作在OSI模型的第三层 -> 即网络层,例如网际协议.\n路由器的一个作用是连通不同的网络另一个作用是选择信息传送的线路. 路由器与交换机的差别, 路由器是属于OSI第三层的产品,交换机是OSI第二层的产品(这里至二层交换机)\n\n- 网关\n网关(Gateway), 网关顾名思义就是连接两个网络的设备,区别与路由器(由于历史的原因,许多有关TCP/IP的文献曾经把网络层使用的路由器成为网关,在今天很多局域网采用的都是路由器来接入网络,因此现在通常指的网关就是路由器的IP),经常在家庭中或者小型企业网络中使用,用于连接局域网和Internet. 网关也经常把一种协议转成另一种协议的设备,比如语音网关.\n在传统TCP/IP术语中,网络设备只分成两种,一种为网关(Gateway),另一种称为主机(host). 网关能在网络间传递数据包,但主机不能传送数据包.在主机(又称终端系统,end system)中,数据包需经过TCP/IP四层协议处理,但是在网关(又称中介系统,intermediate system)只需要到达网际层(Internet layer),决定路径之后就可以传送. 在当时,网关(Gateway)和路由(Router)还没有区别.\n在现代网络术语中,网关(Gateway)和路由(Router)的定义不同,网关(Gateway)能在不同协议间移动数据,而路由器(Router)是在不同网络间移动数据,相当于传统所说的IP网关(IP Gateway).\n网关是连接两个网络的设备,对于语音网关来说,它可以连接PSTN网络和以太网,这就相当于VOIP,把不同电话的模拟信号通过网关而转换成数字信号,而且加入协议再去传输. 在到了接收端的时候再通过网关还原成模拟的电话信号,最后才能在电话机上听到.\n对于以太网中的网关只能转发三层以上数据包,这一点和路由是一样的.而不同的是网关中并没有路由表,他只能按照预先设定的不同网段来进行转发.网关最重要的一层就是端口映射,子网内用户在外网看来只是外网的IP地址对应着不同的端口,这样看来就会保护子网内的用户.\n\n### C/C++\n\n#### BSS段的功能\n\n#### char *p1 = \"123\" 与char p2[]=\"123\",其中p1,p2区别\n\n答: 常量是存储在内存中的,\n*p1 是指针 指向\"123\"中的\"1\"的地址\np2[] 是数组 本质是在堆栈中定义的一段内存\n\n#### sizeof(struct{char c;int a;}) = ?\n\n答: 4\n\n内存对其,整体占得内存一定是**最大数据元素的整数倍**.\n这里最大的是int(4字节)整体就是(4*n字节)\n大概是这个样子\n|int|char|\n△△△△|△---|\n\n#### 多线程编程经验\n\n#### C++网络编程\n\n#### C++11新增了什么,了解的有哪些.\n\n#### [√]const关键字作用.\n[好文](https://www.cnblogs.com/chogen/p/4574118.html)\n####  [-]多态/虚函数\n\n[介绍](https://www.cnblogs.com/qiaoconglovelife/p/5128523.html)\n\n### Java\n\n####  [√]HashMap\n\n[介绍链接](https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191907&idx=1&sn=876860c5a9a6710ead5dd8de37403ffc&chksm=8c990c39bbee852f71c9dfc587fd70d10b0eab1cca17123c0a68bf1e16d46d71717712b91509&scene=38#wechat_redirect)\n\n#### Synchronze 和 Lock的区别和用法\n\nSynchronze(隐式锁) | Lock(显示锁)\n-|-\n在需要同步的对象中加入此控制,synchronize可以加在方法上,也可以加在特定代码块中,括号中表示需要所得对象|需要显示指定起始位置和终止位置.一般使用ReentrantLock类作为锁,多个线程中必须要使用一个ReentrantLock类作为对象才能保证锁的生效.且在加锁和解锁处需要通过lock()和unlock()显示指出.所以一般会在finally块中写unlock()以防死锁\n托管给JVM执行的|java写的控制锁代码\n采用的的CPU的悲观锁机制,即线程获得的是独占锁.独占锁意味着其他线程只能依靠阻塞来等待线程释放锁|乐观锁方式,每次不加锁而是假设没有冲突而去完成某项操作,如果因为冲突失败就重试,直到成功为止.乐观锁实现的机制就是CAS操作(Compare and Swap)\n\nPs: 在Java1.5中, syncchronize是性能低效的,因为这是一个重量级操作,需要调用操作接口,导致有可能加锁消耗的系统时间比加锁以外的操作还多. 相比之下使用Java提供的Lock对象,性能更高一些.但是到了Java1.6,发生了变化. synchronize在语义上很清晰,可以进行很多优化,有适应自旋,锁消除,锁粗化,轻量级锁,偏向锁等等. 导致在Java1.6上synchronize的性能并不比Lock差.\n\n#### 乐观锁,悲观锁\n\n- **乐观锁（ Optimistic Locking ）** 相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。\n- **悲观锁（Pessimistic Lock）**，正如其名，具有强烈的独占和排他特性。它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。\n\n### Linux \n\n#### 进程的内存分布\n\n名称|内容\n-|-\n代码段|可执行代码\n数据段|已初始化全局变量,已初始化全局静态变量,局部静态变量,常量数据\nBSS段|未初始化全局变量,未初始化全局静态变量\n栈|局部变量,函数参数\n堆|动态内存分配\n\n\n\n#### 那个命令可以常看内存使用情况\n答: \ntop\nfree [-h]\n<!-- ps aux --sort -rss -->\n#### touch有什么用\n\n答: 两个作用\n- 一,用于吧已存在文件的时间标签更新为系统当前的时间(默认方式),它们的数据将原封不动地保留下来;\n- 二,用来创建新的空文件\n\n#### 僵尸进程,孤儿进程,守护进程\n\n[详细介绍](https://blog.csdn.net/gogokongyin/article/details/51340432)\n\n- **僵尸进程:** 在fork()/execve()过程中,假设子进程结束时父进程仍存在,而父进程fork()之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束,又没有显示忽略该信号,则子进程成为僵尸进程.\n\n- **孤儿进程:** 一个父进程退出,而它的一个或多个子进程还在运行,那么那些子进程将成为孤儿进程. 孤儿进程将被init进程(进程号为1)所收养,并由init进程对他们完成状态收集工作. \n\n- **守护进程:** Linux系统中的守护进程是一种运行在后台的进程. 而守护进程,也就是通常说的Daemon进程. 它通常独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件. Linux大多数服务器进程就是用这种守护进程实现的, 例如Web服务.守护进程常常在系统引导装入时启动, 在系统关闭时终止. 守护进程最大的特点是运行在后台,与终端无连接, 除非特殊情况下, 用户不能操作守护进程.\n\n### python\n\n### 大数据\n\n#### MongoDB vs Redis\n\nMongoDB和Redis都是NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。\n\n MongoDB建议集群部署，更多的考虑到集群方案，Redis更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式。\n\n \n\n比较指标\t|MongoDB(v2.4.9)\t|Redis(v2.4.17)\t|比较说明\n-|-|-|-\n实现语言\t|c++\t|c/c++\t|-\n协议\t|BSON,自定义二进制\t|类telnet\t|-\n性能\t|依赖内存,TPS{(transaction per second)代表每秒执行的事务数量}较高\t|依赖内存,TPS非常高\t|Redis优于MongoDB\n可操作性\t|丰富的数据表达,索引;最类似于关系型数据库,支持丰富的查询语句\t|数据丰富,较少的IO\t|MongoDB优于Redis\n内存及存储\t|适合大数据量存储,依赖系统虚拟内存,采用镜像文件存储;内存占用率比较高,官方建议独立部署在64位系统\t|Redis2.0后支持虚拟内存特性(VM) 突破物理内存限制;数据可以设置时效性,类似于memcache\t|不同的应用场景,各有千秋\n可用性|\t支持master-slave,replicatset(内部采用paxos选举算法,自动故障恢复),auto sharding机制,对客户端屏蔽了故障转移和切片机制\t|依赖客户端来实现分布式读写;主从复制时,每次从节点重新连接主节点都要依赖整个快照,无增量复制;不支持auto sharding,需要依赖程序设定一致性hash机制\t|MongoDB优于Redis；单点问题上,MongoDB应用简单,相对用户透明,Redis比较复杂,需要客户端主动解决.(MongoDB一般使用replicasets和sharding相结合,replicasets侧重高可用性以及高可靠,sharding侧重性能,水平扩展)\n可靠性|\t从1.8版本后,采用binlog方式(类似Mysql) 支持持久化\t|依赖快照进行持久化;AOF增强可靠性;增强性的同时,影响访问性能\t|-\n一致性|\t不支持事务,靠客户端保证\t|支持事务,比较脆,仅能保证事务中的操作按顺序执行\t|Redis优于MongoDB\n数据分析|\t内置数据分析功能(mapreduce)\t|不支持\t|MongoDB优于Redis\n应用场景|\t海量数据的访问效率提升\t|较小数据量的性能和运算\t|MongoDB优于Redis\n\n\n### 数据库\n\n#### 数据库事务的四大特性(ACID)\n\n- **原子性(Atomicity)**\n事务是数据库的逻辑工作单位,它对数据库的修改要么全部执行,要么全部不执行.\n- **一致性(Consistemcy)**\n事务前后,数据库的状态都满足所有的完整性约束\n- **隔离性(lsolation)**\n并发执行的事务是隔离的,一个不影响一个.如果有两个事务,运行在相同的时间内,执行相同的功能,事务的隔离性将确保每一事务在系统中认为只有该事物在使用系统. 这种属性有时称为串行化,为了防止事务操作间的混淆,必须串行化或序列化请求,使得在同一时间仅有y一个请求用于统一数据.通过设置数据库的**隔离级别**,可以达到不同的隔离效果.\n- 持久性(Durability)\n在事务完成后,该事务所对数据库所作的更改便持久的保存在数据库之中,并不会被回滚.\n\n#### 并发事务引起的问题\n\n- **更新丢失**\n两个事务都同时更新一行数据，但是第二个事务却中途失败退出，导致对数据的两个修改都失效了。这是因为系统没有执行任何的锁操作，因此并发事务并没有被隔离开来。\n\n- **脏读**\n脏读又称无效数据读出。一个事务读取另外一个事务还没有提交的数据叫脏读。\n例如：事务T1修改了一行数据，但是还没有提交，这时候事务T2读取了被事务T1修改后的数据，之后事务T1因为某种原因Rollback了，那么事务T2读取的数据就是脏的。\n\n## 设计题/系统题\n\n### .\n\n#### []设计一个ID分配器\n\n#### .\n\n\n## 技术无关\n\n### .\n\n#### 能抗住压力么 \n\n答:作为应届生,本就应该吃苦耐劳学技术,人都是逼出来的,有压力才有动力,这点压力不算什么.\n\n#### 有女朋友么\n答: 没有,一心向学,不找女朋友浪费时间.(TM是找不到好不2333)\n\n#### 你有什么问题吗\n\n1. 这个岗位做的主要业务是什么\n2. 岗位的技术栈\n3. 招这个岗位的校招或者实习生更看重哪方面的能力\n","slug":"StudyOfInterview","published":1,"updated":"2019-04-17T11:16:35.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul87j3900jqsafkggyfpys3","content":"<blockquote>\n<p>记录下我针对面试的学习</p>\n</blockquote>\n<h2 id=\"算法-编程题\"><a href=\"#算法-编程题\" class=\"headerlink\" title=\"算法/编程题\"></a>算法/编程题</h2><h3 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h3><h4 id=\"√-荷兰国旗问题\"><a href=\"#√-荷兰国旗问题\" class=\"headerlink\" title=\"[√]荷兰国旗问题\"></a>[√]<a href=\"http://acm.nyist.edu.cn/JudgeOnline/problem.php?pid=268\" target=\"_blank\" rel=\"noopener\">荷兰国旗问题</a></h4><p> 噗 , 被高大上的名字给吓到了,其实就是简单的C语言入门题.</p>\n<h4 id=\"实现一个LRU算法\"><a href=\"#实现一个LRU算法\" class=\"headerlink\" title=\"实现一个LRU算法\"></a>实现一个LRU算法</h4><h4 id=\"√-双栈实现一个队列\"><a href=\"#√-双栈实现一个队列\" class=\"headerlink\" title=\"[√]双栈实现一个队列\"></a>[√]双栈实现一个队列</h4><p><a href=\"https://github.com/tabris233/slove-problems/blob/master/2018-1/29/QUEUE-two%20stack.cpp\" target=\"_blank\" rel=\"noopener\">实现代码</a></p>\n<h4 id=\"√-编程题\"><a href=\"#√-编程题\" class=\"headerlink\" title=\"[√]编程题\"></a>[√]编程题</h4><p>问题: 两个数组 A 表示一串螺丝 B 表示一串螺帽 螺丝和螺帽能够配对，但是A中螺丝之间不能比较大小，B中螺帽之间也不能比较大小，螺丝和螺帽可以比较大小，返回所有螺丝和螺帽的对应关系，要求复杂度小于O(n^2)</p>\n<p>解: 类似快速排序,一个和另一个比较就可以了.<br><a href=\"https://github.com/tabris233/slove-problems/blob/master/2018-1/30/%E8%9E%BA%E4%B8%9D%E5%92%8C%E8%9E%BA%E5%B8%BD.cpp\" target=\"_blank\" rel=\"noopener\">code</a></p>\n<h4 id=\"今日头条笔试真题\"><a href=\"#今日头条笔试真题\" class=\"headerlink\" title=\"今日头条笔试真题\"></a>今日头条笔试真题</h4><p><a href=\"https://www.nowcoder.com/test/8537140/summary\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/test/8537140/summary</a></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"算法与数据结构\"><a href=\"#算法与数据结构\" class=\"headerlink\" title=\"算法与数据结构\"></a>算法与数据结构</h3><h3 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h3><h4 id=\"一个进程\"><a href=\"#一个进程\" class=\"headerlink\" title=\"一个进程\"></a>一个进程</h4><p>一个进程是<strong>PCB结构与程序与数据的组合</strong></p>\n<h4 id=\"产生死锁的必要条件\"><a href=\"#产生死锁的必要条件\" class=\"headerlink\" title=\"[-]产生死锁的必要条件\"></a>[-]产生死锁的必要条件</h4><ul>\n<li><p>互斥条件: 即某个资源在一段时间内只能由一个进程占有,不能同事被两个或两个以上的进程占有.这种独占资源如CD-ROM驱动器,打印机等等,必须在占有该资源的进程主动释放它之后,其他进程才能占有该资源.这是有资源本身的属性所决定的.如独木桥就是一种独占资源,两方的人不能同时过桥.</p>\n</li>\n<li><p>不可抢占条件: 进程所获得的资源在未使用完毕之前,资源申请者不能强行地从资源占有者中夺取资源.而只能由该资源的占有者进程自行释放.如过独木桥的人自己不能强迫对方后退,也不能非法地将对方退下桥,必须是桥上的人自己过桥后空出桥面(即主动释放占有资源),对方的人才能过桥.</p>\n</li>\n<li><p>占有且申请条件: 进程至少已经占有一个资源,但又申请新的资源; 由于该资源已经被另外进程占有,此时该进程阻塞; 但是,它在等待新资源之时,扔继续占用已占有的资源.还以过独木桥为例,甲乙两人在桥上相遇. 甲走过一段桥面(即占有了一些资源),还需要走其余的桥面(申请新的资源),但那部分桥面被已占有(已走过一段桥面).甲过不去,前进不能,又不后退;乙也处于同样的状况.</p>\n</li>\n<li><p>循环等待条件: 存在一个进程等待序列{P1,P2, … ,Pn}, 其中P1等待P2所占有的某一资源, P2等待P3所占有的某一源, …… ,而Pn等待P1所占有的某一资源形成一个进程循环等待环.就像前面的过独木桥问题,甲等待乙占有的桥面,而乙有等待甲占有的桥面, 从而彼此循环等待.</p>\n</li>\n</ul>\n<h4 id=\"死锁预防\"><a href=\"#死锁预防\" class=\"headerlink\" title=\"[-]死锁预防\"></a>[-]死锁预防</h4><ul>\n<li><p>打破互斥条件: 即允许进程同事访问某些资源.但是,有的资源不允许被同时访问的,像打印机等等.这是由资源本身的属性所决定的. 所以,这种办法并无实用价值</p>\n</li>\n<li><p>打破不可抢占条件: 即允许进程强行从占有者哪里夺取某些资源. 就是说, 当一个进程已占有了某些资源,他又申请新的资源,但不能立即被满足,它必须释放所占有的全部资源, 以后再重新申请. 他所释放的资源可以分配给其他进程.这就相当于该进程占有的资源被隐蔽性地强占了. 这种预防死锁的方法实现起来困难,会降低系统性能.</p>\n</li>\n<li><p>打破占有且申请条件: 可以实行资源预先分配策略. 即进程在运行前一次地向系统申请它所需要的全部资源. 如果某个进程所需的全部资源得不到满足,则不分配任何资源,此进程在不运行.只有当系统能够满足当前进程的全部资源需求时,才一次性地将所申请的资源全部分配给该进程. 由于运行的进程已占有它所需要的全部资源所以不会发生占有资源有申请资源的现象, 因此不会发生死锁. 但是,这种策略也有如下缺点:</p>\n<ul>\n<li>在许多情况下,一个进程在执行之前不可能知道它所需要的全部资源. 这是由于进程在执行时是动态的,不可预测的.</li>\n<li>资源利用率低.无论所分资源何时用到,一个进程只有在占有所需要的全部资源后才能执行.即使有些资源最后才被该进程用到一次,但该进程生存期间一直占有他们,造成长期占着不用的状况.这显然是一种极大的资源浪费.</li>\n<li>降低了进程的并发性.因为资源有限,又加上存在浪费,能分配到所需全部资源的进程个数就必然少了.</li>\n</ul>\n</li>\n<li>打破循环等待条件:<strong>实行资源有序分配策略</strong>.采用这种策略,即把资源事先分类编号,按号分配,使进程在申请,占用资源是不会形成环路.所有进程对资源的请求必须严格按字元序号递增的顺序提出.进程占用了小号资源,才能申请大耗资源,就不会产生环路, 从而预防了死锁.这种策略与前面的策略相比, 资源的利用率和系统的吞吐量都有了很大的提高,但是也存在一下缺点:<ul>\n<li>限制了进程对资源的请求,同事给系统中所有资源合理编号也是件困难时,并增加了系统的开销.</li>\n<li>为了遵循按编号申请的次序,在不使用的资源也需要提前申请,从而增加了进程对资源的占用时间.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"死锁避免\"><a href=\"#死锁避免\" class=\"headerlink\" title=\"死锁避免\"></a>死锁避免</h4><ul>\n<li>银行家算法<br>系统给当前进程分配资源时,先检查是否安全.<br>在满足当前的进程X资源申请后,是否还能有足够的资源去满足下一个距最大资源需求最近的进程(如某进程最大需要5个单位资源,已拥有1个,还需4个),若可以满足,则继续检查下一个距最大资源需求最近的进程,若均能满足所有进程,则表示为安全,可以允许给当前进程X分配其所需的资源申请,否则让该进程X进入等待.</li>\n<li>哲学家进餐问题</li>\n</ul>\n<h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"[-]进程和线程的区别\"></a>[-]进程和线程的区别</h4><blockquote>\n<p>定义<br><strong>进程</strong>是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.<br><strong>线程</strong>是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.<br>关系<br>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.<br>相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。<br>区别<br>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p>\n<blockquote>\n<p>简而言之,一个程序至少有一个进程,一个进程至少有一个线程.<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。<br>优缺点<br>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"[]进程间通信\"></a>[]进程间通信</h4><p>####### 为什么需要进程间通信？？</p>\n<p>进程是一个独立的资源分配单元，不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源（例如打开的文件描述符）。</p>\n<p>但是，进程不是孤立的，不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。</p>\n<p>进程间通信的目的：</p>\n<ul>\n<li>数据传输：一个进程需要将它的数据发送给另一个进程。</li>\n<li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。</li>\n<li>资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。</li>\n<li>进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。<br>Linux 操作系统支持的主要进程间通信的通信机制：</li>\n</ul>\n<p><img src=\"../images/StudyOfInterview/jcjtx.jpg\" alt=\"进程间通信-1\" title=\"进程间通信\"></p>\n<h6 id=\"进程间通信-IPC-介绍\"><a href=\"#进程间通信-IPC-介绍\" class=\"headerlink\" title=\"进程间通信(IPC)介绍\"></a><a href=\"https://www.cnblogs.com/CheeseZH/p/5264465.html\" target=\"_blank\" rel=\"noopener\">进程间通信(IPC)介绍</a></h6><h4 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"[]进程调度\"></a>[]进程调度</h4><h4 id=\"进程的内存分布\"><a href=\"#进程的内存分布\" class=\"headerlink\" title=\"[]进程的内存分布\"></a>[]进程的内存分布</h4><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码段</td>\n<td>全局常量（const）、字符串常量、函数以及编译时可决定的某些东西</td>\n</tr>\n<tr>\n<td>数据段</td>\n<td>存储初始化的全局变量 和 初始化的静态变量(全局和局部)</td>\n</tr>\n<tr>\n<td>BSS段</td>\n<td>存储未初始化的全局变量 和 未初始化的静态变量(全局和局部)</td>\n</tr>\n<tr>\n<td>堆</td>\n<td>动态分配的区域（malloc、new等）</td>\n</tr>\n<tr>\n<td>栈</td>\n<td>l临时声明的局部变量(初始化以及未初始化的,但不包含静态变量),局部常量(const)</td>\n</tr>\n<tr>\n<td>命令行参数和环境变量</td>\n<td>顾名思义</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://images2015.cnblogs.com/blog/978007/201702/978007-20170208113706760-1208301174.png\" alt=\"\"></p>\n<h4 id=\"进程调度-1\"><a href=\"#进程调度-1\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h4><ul>\n<li><p>先来先服务 （FCFS，first come first served）<br>在所有调度算法中，最简单的是非抢占式的FCFS算法。<br>算法原理：进程按照它们请求CPU的顺序使用CPU.就像你买东西去排队，谁第一个排，谁就先被执行，在它执行的过程中，不会中断它。当其他人也想进入内存被执行，就要排队等着，如果在执行过程中出现一些事，他现在不想排队了，下一个排队的就补上。此时如果他又想排队了，只能站到队尾去。<br>算法优点：易于理解且实现简单，只需要一个队列(FIFO)，且相当公平<br>算法缺点：比较有利于长进程，而不利于短进程，有利于CPU 繁忙的进程，而不利于I/O 繁忙的进程</p>\n</li>\n<li><p>最短作业优先（SJF, Shortest Job First）<br>短作业优先（SJF, Shortest Job First）又称为“短进程优先”SPN(Shortest Process Next)；这是对FCFS算法的改进，其目标是减少平均周转时间。<br>算法原理：对预计执行时间短的进程优先分派处理机。通常后来的短进程不抢先正在执行的进程。<br>算法优点：相比FCFS 算法，该算法可改善平均周转时间和平均带权周转时间，缩短进程的等待时间，提高系统的吞吐量。<br>算法缺点：对长进程非常不利，可能长时间得不到执行，且未能依据进程的紧迫程度来划分执行的优先级，以及难以准确估计进程的执行时间，从而影响调度性能。</p>\n</li>\n<li><p>最高响应比优先法(HRRN，Highest Response Ratio Next)<br>最高响应比优先法(HRRN，Highest Response Ratio Next)是对FCFS方式和SJF方式的一种综合平衡。FCFS方式只考虑每个作业的等待时间而未考虑执行时间的长短，而SJF方式只考虑执行时间而未考虑等待时间的长短。因此，这两种调度算法在某些极端情况下会带来某些不便。HRN调度策略同时考虑每个作业的等待时间长短和估计需要的执行时间长短，从中选出响应比最高的作业投入执行。这样，即使是长作业，随着它等待时间的增加，W / T也就随着增加，也就有机会获得调度执行。这种算法是介于FCFS和SJF之间的一种折中算法。<br>算法原理：响应比R定义如下： R =(W+T)/T = 1+W/T<br>其中T为该作业估计需要的执行时间，W为作业在后备状态队列中的等待时间。每当要进行作业调度时，系统计算每个作业的响应比，选择其中R最大者投入执行。<br>算法优点：由于长作业也有机会投入运行，在同一时间内处理的作业数显然要少于SJF法，从而采用HRRN方式时其吞吐量将小于采用SJF 法时的吞吐量。<br>算法缺点：由于每次调度前要计算响应比，系统开销也要相应增加。</p>\n</li>\n<li><p>时间片轮转算法（RR，Round-Robin）<br>该算法采用剥夺策略。时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称RR调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。<br>算法原理：让就绪进程以FCFS 的方式按时间片轮流使用CPU 的调度方式，即将系统中所有的就绪进程按照FCFS 原则，排成一个队列，每次调度时将CPU 分派给队首进程，让其执行一个时间片，时间片的长度从几个ms 到几百ms。在一个时间片结束时，发生时钟中断，调度程序据此暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前的队首进程，进程可以未使用完一个时间片，就出让CPU（如阻塞）。<br>算法优点：时间片轮转调度算法的特点是简单易行、平均响应时间短。<br>算法缺点：不利于处理紧急作业。在时间片轮转算法中，时间片的大小对系统性能的影响很大，因此时间片的大小应选择恰当<br>怎样确定时间片的大小：</p>\n<ul>\n<li>时间片大小的确定<br>1.系统对响应时间的要求<br>2.就绪队列中进程的数目<br>3.系统的处理力</li>\n</ul>\n</li>\n<li><p>多级反馈队列(Multilevel Feedback Queue)<br>多级反馈队列调度算法是一种CPU处理机调度算法，UNIX操作系统采取的便是这种调度算法。<br>多级反馈队列调度算法描述：<br>　　1、进程在进入待调度的队列等待时，首先进入优先级最高的Q1等待。<br>　　2、首先调度优先级高的队列中的进程。若高优先级中队列中已没有调度的进程，则调度次优先级队列中的进程。例如：Q1,Q2,Q3三个队列，只有在Q1中没有进程等待时才去调度Q2，同理，只有Q1,Q2都为空时才会去调度Q3。<br>　　3、对于同一个队列中的各个进程，按照时间片轮转法调度。比如Q1队列的时间片为N，那么Q1中的作业在经历了N个时间片后若还没有完成，则进入Q2队列等待，若Q2的时间片用完后作业还不能完成，一直进入下一级队列，直至完成。<br>　　4、在低优先级的队列中的进程在运行时，又有新到达的作业，那么在运行完这个时间片后，CPU马上分配给新到达的作业（抢占式）。<br>　　在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间时，便能够较好的满足各种类型用户的需要。</p>\n</li>\n</ul>\n<h3 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h3><h4 id=\"TCP和UDP区别\"><a href=\"#TCP和UDP区别\" class=\"headerlink\" title=\"[]TCP和UDP区别\"></a>[]TCP和UDP区别</h4><table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传输</td>\n<td>提供面向连接的、可靠地数据流传输</td>\n<td>提供的是非面向连接的、不可靠的数据流传输</td>\n</tr>\n<tr>\n<td>传输单位</td>\n<td>TCP报文段</td>\n<td>用户数据报</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>TCP注重数据安全性</td>\n<td>UDP数据传输快，因为不需要链接等待，少了许多操作，但是起安全性却一般</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>协议</td>\n<td>FTP:定义了文件传输协议,使用21端口;</td>\n<td>DNS: 用于域名解析服务,将域名地址转换成IP地址.DNS用的是53号端口.</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>Telnet: 一种用于远程登录的端口,使用23端口,用户可以以自己的身份远程连接到计算机上,可提供基于DOS模式下的通信服务</td>\n<td>SNMP: 简单网络管理协议,使用161端口,是用来管理网络十倍的.由于网络设备很多,无连接的服务就体现出其优势.</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>SMTP: 邮件传送协议,用于发送邮件.服务端开放的是25号端口</td>\n<td>TFTP(Trival File Transfer Protocal): 简单文件传输协议,该协议在熟知端口69上使用UDP服务</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>POP3: 它是和SMTP对应,POP3用于接收邮件.POP3协议所用的是110端口</td>\n<td></td>\n</tr>\n<tr>\n<td>协议</td>\n<td>HTTP: 是从Web服务器传输超文本到本地浏览器的传送协议</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://blog.csdn.net/li_ning_/article/details/52117463\" target=\"_blank\" rel=\"noopener\">详细介绍,戳&lt;&lt;&lt;–</a></p>\n<blockquote>\n<p>TCP与UDP区别总结：<br>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付<br>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>TCP首部开销20字节;UDP的首部开销小，只有8个字节<br>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p>\n</blockquote>\n<h4 id=\"TCP三次握手-四次挥手\"><a href=\"#TCP三次握手-四次挥手\" class=\"headerlink\" title=\"[-]TCP三次握手/四次挥手\"></a>[-]TCP三次握手/四次挥手</h4><p><a href=\"http://blog.csdn.net/qzcsu/article/details/72861891\" target=\"_blank\" rel=\"noopener\">详细介绍,戳&lt;&lt;&lt;—</a><br><a href=\"https://www.cnblogs.com/myvin/p/4862167.html\" target=\"_blank\" rel=\"noopener\">更亲民的介绍,戳&lt;&lt;&lt;—</a></p>\n<p>建立连接的过程是利用客户服务器模式,假设主机A为客户端,主机B为服务端</p>\n<ul>\n<li>TCP的三次握手过程：主机Ａ向Ｂ发送链接请求; -&gt; 主机B对收到的主机A的报文段进行确认; -&gt; 主机A再次对主机B的确认进行确认</li>\n<li>采用三次握手是为了防止失效的链接请求报文段突然有传送到主机B,因而产生错误.失效的链接请求报文段是指: 主机A出的连接请求没有收到主机B的确认,于是经过一段时间后,主机A又重新向主机B发送连接请求,且建立成功,顺序完成数据传输. 考虑这样一个特殊情况,主机A第一次发送的连接请求并没有丢失,而是因为网络节点导致延迟到达主机B,主机B以为是主机又发起的新连接,于是主机B同意连接,并向主机A发回确认,但是此时主机A根本不会理会,主机B就一直在等待主机A发送数据，导致主机Ｂ的资源浪费．</li>\n<li>采用两次握手不行, 原因就是上面说的实效的连接请求的特殊情况.</li>\n</ul>\n<h4 id=\"TCP里的一些机制\"><a href=\"#TCP里的一些机制\" class=\"headerlink\" title=\"TCP里的一些机制\"></a>TCP里的一些机制</h4><h4 id=\"OSI-TCP-IP-五层协议的体系结构-以及各层协议\"><a href=\"#OSI-TCP-IP-五层协议的体系结构-以及各层协议\" class=\"headerlink\" title=\"OSI,TCP/IP,五层协议的体系结构,以及各层协议\"></a>OSI,TCP/IP,五层协议的体系结构,以及各层协议</h4><p>OSI分层(7层): 物理层,数据链路层,网络层,传输层,会话层,表示层,应用层.<br>TCP/IP分层(4层): 网络接口层,网际层,运输层,应用层.<br>五层协议(5层): 物理层,数据链路层,网络层,运输层,应用层.</p>\n<p>每一层的协议如下:<br>物理层: RJ45,CLOCK,IEEE802.3(中继器,集线器)<br>数据链路: POP,FR,HDLC,VLAN,MAX(网桥,交换机)<br>网络层: IP,UCMP,ARP,RARP,OSPF,IPX,RIP,IGRP(路由器)<br>传输层: TCP,UDP,SPX<br>会话层: NFS,SQL,NETBIOS,RPC<br>表示层: JPEG,MPEG,ASII<br>应用层: FTP,DNS,Telnet,SMTP,HTTP,WWW,NFS</p>\n<p>每一层的作用如下</p>\n<p>物理层: 通过媒介传输比特,确定机械及电器规范(比特Bit)<br>数据链路: 将比特组装成帧和点到点的传递(帧Frame)<br>网络层: 负责数据包从源到宿的传递和网际互联(包PackeT)<br>传输层: 提供端到端的可靠报文传递和错误回复(段Segment)<br>会话层: 简历,管理和中智慧化(会话协议数据单元SPDU)<br>表示层: 对数据进行翻译,加密和压缩(表示协议数据单元PPDU)<br>应用层: 允许方位OSI环境的手段(应用协议数据单元APDU)</p>\n<h4 id=\"IP地址的分类\"><a href=\"#IP地址的分类\" class=\"headerlink\" title=\"IP地址的分类\"></a>IP地址的分类</h4><p>A类地址: 以0开头, 第一个字节范围1~127(1.0.0.0~127.255.255.255);<br>B类地址: 以10开头, 第一个字节范围128~191(128.0.0.0~191.255.255.255);<br>C类地址: 以110开头, 第一个字节范围192~223(192.0.0.0~223.255.255.255);<br>D类地址: 以1110开头, 第一个字节范围224~239(224.0.0.0~239.255.255.255);<br>E类地址: 保留</p>\n<p>一种A,B,C是基本类,D,E类作为多播和保留使用.<br>以下是留用的内部私有地址:<br>A类 10.0.0.0  – 10.255.255.255<br>B类 182.16.00 – 192.31.255.255<br>C类 192.168.0.0 – 192.168.255.255</p>\n<p>IP地址与子网掩码相与(&amp;)得到网络号<br>ip 192.168.2.110<br>&amp;<br>submask:255.255.255.0<br>.———————————<br>网络号 192.168.2.0</p>\n<p>注: 主机号,全是0的网络号(例如192.168.2.0),主机号全为1的为广播地址(192.168.2.255)</p>\n<h4 id=\"ARP是地址解析协议-简单语言解释一下工作原理\"><a href=\"#ARP是地址解析协议-简单语言解释一下工作原理\" class=\"headerlink\" title=\"ARP是地址解析协议,简单语言解释一下工作原理.\"></a>ARP是地址解析协议,简单语言解释一下工作原理.</h4><ul>\n<li>首先,每个主机都会在自己的ARP缓冲区中建立一个ARP列表,以表示IP地址和MAC地址之间的对应关系.</li>\n<li>当源主机要发送数据时,首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址,如果有,则直接发送数据,如果没有,就向本网段的所有主机发送ARP数据包,该数据包包括的内容有: 源主机的IP地址,源主机的MAC地址,目的主机的IP地址.</li>\n<li>当本网络中的所有主机收到该ARP数据包时,首先检查数据包中的IP地址是否是自己的IP地址,如果不是,则忽略该数据包,,如果是,则首先从数据包中去除源主机的IP和MAC地址写入到ARP列表中,如果已经存在,则覆盖,然后将自己的MAC地址写入ARP响应包中,告诉源主机自己是它想要找的MAC地址</li>\n<li>源主机收到ARP响应后.将目的主机的IP和MAC地址写入ARP列表,并利用此信息发送数据. 如果源主机一直没有收到ARP相应数据包,表示ARP查询失败.</li>\n</ul>\n<p>广播发送ARP请求,单播发送ARP相应. </p>\n<h4 id=\"RARP协议\"><a href=\"#RARP协议\" class=\"headerlink\" title=\"RARP协议\"></a>RARP协议</h4><p>RARP是逆地址解析协议,作用是完成硬件地址到IP地址的映射,主要用于无盘工作站,因为给无盘工作站配置的IP地址不能保存.<br>工作流畅: 在网络中配置一台RARP服务器,里面保存者IP地址和MAC地址的映射关系,当无盘工作站启动后,就封装一个RARP数据包,里面有其MAC地址,然后广播到网络上去,当服务器收到请求包后,就查找对应的MAC地址的IP地址装入响应报文中发回给请求者. 因为需要广播请求报文,因此RARP只能用于具有广播能力的网络.</p>\n<h4 id=\"各种协议的介绍\"><a href=\"#各种协议的介绍\" class=\"headerlink\" title=\"各种协议的介绍\"></a>各种协议的介绍</h4><ul>\n<li><strong>ICMP协议</strong>: 因特网控制报文协议.它是TCP/IP协议族的一个自协议,用于在IP主机/路由器之间传递控制消息.</li>\n<li><strong>TFTP协议</strong>: 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议,提供不复杂,开销不大的文件传输服务.</li>\n<li><strong>HTTP协议</strong>: 超文本传输协议,是一个属于应用层的面向对象的协议,由于其简捷,快速的方式,适用于分布式超媒体信息系统</li>\n<li><strong>NAT协议</strong>: 网络地址转换属介入广域网(WAN)技术,是一种将私有(保留)地址转化为合法IP地址的转换技术.</li>\n<li><strong>DHCP协议</strong>: 动态主机配置协议,给用户或者内部网络管理员作为对所有计算机作中央管理的手段.</li>\n</ul>\n<h4 id=\"在浏览器中输入www-baidu-com后执行的全部过程\"><a href=\"#在浏览器中输入www-baidu-com后执行的全部过程\" class=\"headerlink\" title=\"在浏览器中输入www.baidu.com后执行的全部过程\"></a>在浏览器中输入<a href=\"http://www.baidu.com后执行的全部过程\" target=\"_blank\" rel=\"noopener\">www.baidu.com后执行的全部过程</a></h4><ul>\n<li><ol>\n<li>客户端浏览器通过DNS解析到<a href=\"http://www.baidu.com的IP地址为220.181.27.48\" target=\"_blank\" rel=\"noopener\">www.baidu.com的IP地址为220.181.27.48</a>, 通过这个IP地址找到客户端到服务器的路径. 客户端浏览器发起一个HTTP回话到220.181.27.48, 然后通过TCP进行封装数据包, 输入到网络层.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在客户端的传输层,把HTTP回话请求分成报文段,添加源和目的端口, 如服务器使用80端口监听客户端的请求, 客户端有系统随机选择一个端口如5000, 与服务器进行交换,服务器吧相应的请求返回给客户端的5000端口. 然后使用IP层的IP地址查找目的端.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>客户端的网络层不用关心应用层或者传输层的东西, 主要做到的是通过查找路由表确定如何到达服务器,期间可能经过多个路由器,这些都是有路由器来完成的工作, 我不做过多的描述, 无非就是通过查找路由表决定通过哪个路径到达服务器.</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>客户端的链路层, 包通过链路层发送到路由器, 通过邻居协议查找给定IP地址的MAC地址,然后发送ARP请求查找到目的地址, 如果得到回应后就可以使用ARP的请求应答交换的IP数据包,现在就可以传输了,然后发送IP数据包到达服务器的地址.</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"DNS域名系统-简单描述其工作原理\"><a href=\"#DNS域名系统-简单描述其工作原理\" class=\"headerlink\" title=\"DNS域名系统,简单描述其工作原理\"></a>DNS域名系统,简单描述其工作原理</h4><p>当DNS客户机需要在程序中使用名称时, 它会查询DNS服务器来解析该名称. 客户机发送的每条查询信息包括三条信息: 包括: 指定的DNS域名,DNS域名的指定类型. 基于UDP服务,端口53. 该应用一般不直接为用户使用, 而是为其他应用服务,如 HTTP,SMTO等在其中需要完成主机名到地址的转换.</p>\n<h4 id=\"了解交换机-路由器-网关的概念-并知道各自的用途\"><a href=\"#了解交换机-路由器-网关的概念-并知道各自的用途\" class=\"headerlink\" title=\"了解交换机,路由器,网关的概念, 并知道各自的用途\"></a>了解交换机,路由器,网关的概念, 并知道各自的用途</h4><ul>\n<li><p><strong>交换机</strong><br>在计算机网络系统中,交换机是针对共享工作模式的弱点而推出的.交换机拥有一条高带宽的背部总线和内部交换矩阵.交换机的所有的端口都挂接在这条背部总线上,当控制电路收到数据包以后,处理端口会查找内存中的地址对照表以确定目的端口.目的MAC若不存在,交换机才广播到所有的端口, 接手端口回应后交换机会’学习’新的地址,并把它添加入内部地址表中.<br>交换机工作于OSI参考模型的第二层,即数据链路层. 交换机内部的CPU会在每个端口成功连接时,通过ARP协议学习它的MAC地址,保存成一张ARP表. 在今后的通讯中, 发往该MAC地址的数据包将仅送往其对应的端口,而不是所有端口. 因此,交换机可用于划分数据链路层广播,即冲突域; 但它不能划分网络层广播, 即广播域.<br>交换机被广泛应用于二层网络交换,俗称’二层交换机’.<br>交换机的种类有: 二层交换机,三层交换机,四层交换机,七层交换机分别工作在OSI七层模型中的第二层,第三层,第四层和第七层,并因此而得名.</p>\n</li>\n<li><p>路由器<br>路由器(Router)是一种计算机网络设备,提供了路由与传送两种重要机制,可以决定数据包从来源端到目的端所经过的路由路径(host到host之间的传输路径),这个过程称为<strong>路由</strong>; 将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行),这成为<strong>传动</strong>. 路由工作在OSI模型的第三层 -&gt; 即网络层,例如网际协议.<br>路由器的一个作用是连通不同的网络另一个作用是选择信息传送的线路. 路由器与交换机的差别, 路由器是属于OSI第三层的产品,交换机是OSI第二层的产品(这里至二层交换机)</p>\n</li>\n<li><p>网关<br>网关(Gateway), 网关顾名思义就是连接两个网络的设备,区别与路由器(由于历史的原因,许多有关TCP/IP的文献曾经把网络层使用的路由器成为网关,在今天很多局域网采用的都是路由器来接入网络,因此现在通常指的网关就是路由器的IP),经常在家庭中或者小型企业网络中使用,用于连接局域网和Internet. 网关也经常把一种协议转成另一种协议的设备,比如语音网关.<br>在传统TCP/IP术语中,网络设备只分成两种,一种为网关(Gateway),另一种称为主机(host). 网关能在网络间传递数据包,但主机不能传送数据包.在主机(又称终端系统,end system)中,数据包需经过TCP/IP四层协议处理,但是在网关(又称中介系统,intermediate system)只需要到达网际层(Internet layer),决定路径之后就可以传送. 在当时,网关(Gateway)和路由(Router)还没有区别.<br>在现代网络术语中,网关(Gateway)和路由(Router)的定义不同,网关(Gateway)能在不同协议间移动数据,而路由器(Router)是在不同网络间移动数据,相当于传统所说的IP网关(IP Gateway).<br>网关是连接两个网络的设备,对于语音网关来说,它可以连接PSTN网络和以太网,这就相当于VOIP,把不同电话的模拟信号通过网关而转换成数字信号,而且加入协议再去传输. 在到了接收端的时候再通过网关还原成模拟的电话信号,最后才能在电话机上听到.<br>对于以太网中的网关只能转发三层以上数据包,这一点和路由是一样的.而不同的是网关中并没有路由表,他只能按照预先设定的不同网段来进行转发.网关最重要的一层就是端口映射,子网内用户在外网看来只是外网的IP地址对应着不同的端口,这样看来就会保护子网内的用户.</p>\n</li>\n</ul>\n<h3 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C/C++\"></a>C/C++</h3><h4 id=\"BSS段的功能\"><a href=\"#BSS段的功能\" class=\"headerlink\" title=\"BSS段的功能\"></a>BSS段的功能</h4><h4 id=\"char-p1-“123”-与char-p2-”123”-其中p1-p2区别\"><a href=\"#char-p1-“123”-与char-p2-”123”-其中p1-p2区别\" class=\"headerlink\" title=\"char *p1 = “123” 与char p2[]=”123”,其中p1,p2区别\"></a>char *p1 = “123” 与char p2[]=”123”,其中p1,p2区别</h4><p>答: 常量是存储在内存中的,<br>*p1 是指针 指向”123”中的”1”的地址<br>p2[] 是数组 本质是在堆栈中定义的一段内存</p>\n<h4 id=\"sizeof-struct-char-c-int-a\"><a href=\"#sizeof-struct-char-c-int-a\" class=\"headerlink\" title=\"sizeof(struct{char c;int a;}) = ?\"></a>sizeof(struct{char c;int a;}) = ?</h4><p>答: 4</p>\n<p>内存对其,整体占得内存一定是<strong>最大数据元素的整数倍</strong>.<br>这里最大的是int(4字节)整体就是(4*n字节)<br>大概是这个样子<br>|int|char|<br>△△△△|△—|</p>\n<h4 id=\"多线程编程经验\"><a href=\"#多线程编程经验\" class=\"headerlink\" title=\"多线程编程经验\"></a>多线程编程经验</h4><h4 id=\"C-网络编程\"><a href=\"#C-网络编程\" class=\"headerlink\" title=\"C++网络编程\"></a>C++网络编程</h4><h4 id=\"C-11新增了什么-了解的有哪些\"><a href=\"#C-11新增了什么-了解的有哪些\" class=\"headerlink\" title=\"C++11新增了什么,了解的有哪些.\"></a>C++11新增了什么,了解的有哪些.</h4><h4 id=\"√-const关键字作用\"><a href=\"#√-const关键字作用\" class=\"headerlink\" title=\"[√]const关键字作用.\"></a>[√]const关键字作用.</h4><p><a href=\"https://www.cnblogs.com/chogen/p/4574118.html\" target=\"_blank\" rel=\"noopener\">好文</a></p>\n<h4 id=\"多态-虚函数\"><a href=\"#多态-虚函数\" class=\"headerlink\" title=\"[-]多态/虚函数\"></a>[-]多态/虚函数</h4><p><a href=\"https://www.cnblogs.com/qiaoconglovelife/p/5128523.html\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><h4 id=\"√-HashMap\"><a href=\"#√-HashMap\" class=\"headerlink\" title=\"[√]HashMap\"></a>[√]HashMap</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653191907&amp;idx=1&amp;sn=876860c5a9a6710ead5dd8de37403ffc&amp;chksm=8c990c39bbee852f71c9dfc587fd70d10b0eab1cca17123c0a68bf1e16d46d71717712b91509&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">介绍链接</a></p>\n<h4 id=\"Synchronze-和-Lock的区别和用法\"><a href=\"#Synchronze-和-Lock的区别和用法\" class=\"headerlink\" title=\"Synchronze 和 Lock的区别和用法\"></a>Synchronze 和 Lock的区别和用法</h4><table>\n<thead>\n<tr>\n<th>Synchronze(隐式锁)</th>\n<th>Lock(显示锁)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>在需要同步的对象中加入此控制,synchronize可以加在方法上,也可以加在特定代码块中,括号中表示需要所得对象</td>\n<td>需要显示指定起始位置和终止位置.一般使用ReentrantLock类作为锁,多个线程中必须要使用一个ReentrantLock类作为对象才能保证锁的生效.且在加锁和解锁处需要通过lock()和unlock()显示指出.所以一般会在finally块中写unlock()以防死锁</td>\n</tr>\n<tr>\n<td>托管给JVM执行的</td>\n<td>java写的控制锁代码</td>\n</tr>\n<tr>\n<td>采用的的CPU的悲观锁机制,即线程获得的是独占锁.独占锁意味着其他线程只能依靠阻塞来等待线程释放锁</td>\n<td>乐观锁方式,每次不加锁而是假设没有冲突而去完成某项操作,如果因为冲突失败就重试,直到成功为止.乐观锁实现的机制就是CAS操作(Compare and Swap)</td>\n</tr>\n</tbody>\n</table>\n<p>Ps: 在Java1.5中, syncchronize是性能低效的,因为这是一个重量级操作,需要调用操作接口,导致有可能加锁消耗的系统时间比加锁以外的操作还多. 相比之下使用Java提供的Lock对象,性能更高一些.但是到了Java1.6,发生了变化. synchronize在语义上很清晰,可以进行很多优化,有适应自旋,锁消除,锁粗化,轻量级锁,偏向锁等等. 导致在Java1.6上synchronize的性能并不比Lock差.</p>\n<h4 id=\"乐观锁-悲观锁\"><a href=\"#乐观锁-悲观锁\" class=\"headerlink\" title=\"乐观锁,悲观锁\"></a>乐观锁,悲观锁</h4><ul>\n<li><strong>乐观锁（ Optimistic Locking ）</strong> 相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</li>\n<li><strong>悲观锁（Pessimistic Lock）</strong>，正如其名，具有强烈的独占和排他特性。它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。</li>\n</ul>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><h4 id=\"进程的内存分布-1\"><a href=\"#进程的内存分布-1\" class=\"headerlink\" title=\"进程的内存分布\"></a>进程的内存分布</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码段</td>\n<td>可执行代码</td>\n</tr>\n<tr>\n<td>数据段</td>\n<td>已初始化全局变量,已初始化全局静态变量,局部静态变量,常量数据</td>\n</tr>\n<tr>\n<td>BSS段</td>\n<td>未初始化全局变量,未初始化全局静态变量</td>\n</tr>\n<tr>\n<td>栈</td>\n<td>局部变量,函数参数</td>\n</tr>\n<tr>\n<td>堆</td>\n<td>动态内存分配</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"那个命令可以常看内存使用情况\"><a href=\"#那个命令可以常看内存使用情况\" class=\"headerlink\" title=\"那个命令可以常看内存使用情况\"></a>那个命令可以常看内存使用情况</h4><p>答:<br>top<br>free [-h]<br><!-- ps aux --sort -rss --></p>\n<h4 id=\"touch有什么用\"><a href=\"#touch有什么用\" class=\"headerlink\" title=\"touch有什么用\"></a>touch有什么用</h4><p>答: 两个作用</p>\n<ul>\n<li>一,用于吧已存在文件的时间标签更新为系统当前的时间(默认方式),它们的数据将原封不动地保留下来;</li>\n<li>二,用来创建新的空文件</li>\n</ul>\n<h4 id=\"僵尸进程-孤儿进程-守护进程\"><a href=\"#僵尸进程-孤儿进程-守护进程\" class=\"headerlink\" title=\"僵尸进程,孤儿进程,守护进程\"></a>僵尸进程,孤儿进程,守护进程</h4><p><a href=\"https://blog.csdn.net/gogokongyin/article/details/51340432\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<ul>\n<li><p><strong>僵尸进程:</strong> 在fork()/execve()过程中,假设子进程结束时父进程仍存在,而父进程fork()之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束,又没有显示忽略该信号,则子进程成为僵尸进程.</p>\n</li>\n<li><p><strong>孤儿进程:</strong> 一个父进程退出,而它的一个或多个子进程还在运行,那么那些子进程将成为孤儿进程. 孤儿进程将被init进程(进程号为1)所收养,并由init进程对他们完成状态收集工作. </p>\n</li>\n<li><p><strong>守护进程:</strong> Linux系统中的守护进程是一种运行在后台的进程. 而守护进程,也就是通常说的Daemon进程. 它通常独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件. Linux大多数服务器进程就是用这种守护进程实现的, 例如Web服务.守护进程常常在系统引导装入时启动, 在系统关闭时终止. 守护进程最大的特点是运行在后台,与终端无连接, 除非特殊情况下, 用户不能操作守护进程.</p>\n</li>\n</ul>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3><h3 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h3><h4 id=\"MongoDB-vs-Redis\"><a href=\"#MongoDB-vs-Redis\" class=\"headerlink\" title=\"MongoDB vs Redis\"></a>MongoDB vs Redis</h4><p>MongoDB和Redis都是NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。</p>\n<p> MongoDB建议集群部署，更多的考虑到集群方案，Redis更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式。</p>\n<table>\n<thead>\n<tr>\n<th>比较指标</th>\n<th>MongoDB(v2.4.9)</th>\n<th>Redis(v2.4.17)</th>\n<th>比较说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>实现语言</td>\n<td>c++</td>\n<td>c/c++</td>\n<td>-</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>BSON,自定义二进制</td>\n<td>类telnet</td>\n<td>-</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>依赖内存,TPS{(transaction per second)代表每秒执行的事务数量}较高</td>\n<td>依赖内存,TPS非常高</td>\n<td>Redis优于MongoDB</td>\n</tr>\n<tr>\n<td>可操作性</td>\n<td>丰富的数据表达,索引;最类似于关系型数据库,支持丰富的查询语句</td>\n<td>数据丰富,较少的IO</td>\n<td>MongoDB优于Redis</td>\n</tr>\n<tr>\n<td>内存及存储</td>\n<td>适合大数据量存储,依赖系统虚拟内存,采用镜像文件存储;内存占用率比较高,官方建议独立部署在64位系统</td>\n<td>Redis2.0后支持虚拟内存特性(VM) 突破物理内存限制;数据可以设置时效性,类似于memcache</td>\n<td>不同的应用场景,各有千秋</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>支持master-slave,replicatset(内部采用paxos选举算法,自动故障恢复),auto sharding机制,对客户端屏蔽了故障转移和切片机制</td>\n<td>依赖客户端来实现分布式读写;主从复制时,每次从节点重新连接主节点都要依赖整个快照,无增量复制;不支持auto sharding,需要依赖程序设定一致性hash机制</td>\n<td>MongoDB优于Redis；单点问题上,MongoDB应用简单,相对用户透明,Redis比较复杂,需要客户端主动解决.(MongoDB一般使用replicasets和sharding相结合,replicasets侧重高可用性以及高可靠,sharding侧重性能,水平扩展)</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>从1.8版本后,采用binlog方式(类似Mysql) 支持持久化</td>\n<td>依赖快照进行持久化;AOF增强可靠性;增强性的同时,影响访问性能</td>\n<td>-</td>\n</tr>\n<tr>\n<td>一致性</td>\n<td>不支持事务,靠客户端保证</td>\n<td>支持事务,比较脆,仅能保证事务中的操作按顺序执行</td>\n<td>Redis优于MongoDB</td>\n</tr>\n<tr>\n<td>数据分析</td>\n<td>内置数据分析功能(mapreduce)</td>\n<td>不支持</td>\n<td>MongoDB优于Redis</td>\n</tr>\n<tr>\n<td>应用场景</td>\n<td>海量数据的访问效率提升</td>\n<td>较小数据量的性能和运算</td>\n<td>MongoDB优于Redis</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"数据库事务的四大特性-ACID\"><a href=\"#数据库事务的四大特性-ACID\" class=\"headerlink\" title=\"数据库事务的四大特性(ACID)\"></a>数据库事务的四大特性(ACID)</h4><ul>\n<li><strong>原子性(Atomicity)</strong><br>事务是数据库的逻辑工作单位,它对数据库的修改要么全部执行,要么全部不执行.</li>\n<li><strong>一致性(Consistemcy)</strong><br>事务前后,数据库的状态都满足所有的完整性约束</li>\n<li><strong>隔离性(lsolation)</strong><br>并发执行的事务是隔离的,一个不影响一个.如果有两个事务,运行在相同的时间内,执行相同的功能,事务的隔离性将确保每一事务在系统中认为只有该事物在使用系统. 这种属性有时称为串行化,为了防止事务操作间的混淆,必须串行化或序列化请求,使得在同一时间仅有y一个请求用于统一数据.通过设置数据库的<strong>隔离级别</strong>,可以达到不同的隔离效果.</li>\n<li>持久性(Durability)<br>在事务完成后,该事务所对数据库所作的更改便持久的保存在数据库之中,并不会被回滚.</li>\n</ul>\n<h4 id=\"并发事务引起的问题\"><a href=\"#并发事务引起的问题\" class=\"headerlink\" title=\"并发事务引起的问题\"></a>并发事务引起的问题</h4><ul>\n<li><p><strong>更新丢失</strong><br>两个事务都同时更新一行数据，但是第二个事务却中途失败退出，导致对数据的两个修改都失效了。这是因为系统没有执行任何的锁操作，因此并发事务并没有被隔离开来。</p>\n</li>\n<li><p><strong>脏读</strong><br>脏读又称无效数据读出。一个事务读取另外一个事务还没有提交的数据叫脏读。<br>例如：事务T1修改了一行数据，但是还没有提交，这时候事务T2读取了被事务T1修改后的数据，之后事务T1因为某种原因Rollback了，那么事务T2读取的数据就是脏的。</p>\n</li>\n</ul>\n<h2 id=\"设计题-系统题\"><a href=\"#设计题-系统题\" class=\"headerlink\" title=\"设计题/系统题\"></a>设计题/系统题</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"设计一个ID分配器\"><a href=\"#设计一个ID分配器\" class=\"headerlink\" title=\"[]设计一个ID分配器\"></a>[]设计一个ID分配器</h4><h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\".\"></a>.</h4><h2 id=\"技术无关\"><a href=\"#技术无关\" class=\"headerlink\" title=\"技术无关\"></a>技术无关</h2><h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"能抗住压力么\"><a href=\"#能抗住压力么\" class=\"headerlink\" title=\"能抗住压力么\"></a>能抗住压力么</h4><p>答:作为应届生,本就应该吃苦耐劳学技术,人都是逼出来的,有压力才有动力,这点压力不算什么.</p>\n<h4 id=\"有女朋友么\"><a href=\"#有女朋友么\" class=\"headerlink\" title=\"有女朋友么\"></a>有女朋友么</h4><p>答: 没有,一心向学,不找女朋友浪费时间.(TM是找不到好不2333)</p>\n<h4 id=\"你有什么问题吗\"><a href=\"#你有什么问题吗\" class=\"headerlink\" title=\"你有什么问题吗\"></a>你有什么问题吗</h4><ol>\n<li>这个岗位做的主要业务是什么</li>\n<li>岗位的技术栈</li>\n<li>招这个岗位的校招或者实习生更看重哪方面的能力</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录下我针对面试的学习</p>\n</blockquote>\n<h2 id=\"算法-编程题\"><a href=\"#算法-编程题\" class=\"headerlink\" title=\"算法/编程题\"></a>算法/编程题</h2><h3 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h3><h4 id=\"√-荷兰国旗问题\"><a href=\"#√-荷兰国旗问题\" class=\"headerlink\" title=\"[√]荷兰国旗问题\"></a>[√]<a href=\"http://acm.nyist.edu.cn/JudgeOnline/problem.php?pid=268\" target=\"_blank\" rel=\"noopener\">荷兰国旗问题</a></h4><p> 噗 , 被高大上的名字给吓到了,其实就是简单的C语言入门题.</p>\n<h4 id=\"实现一个LRU算法\"><a href=\"#实现一个LRU算法\" class=\"headerlink\" title=\"实现一个LRU算法\"></a>实现一个LRU算法</h4><h4 id=\"√-双栈实现一个队列\"><a href=\"#√-双栈实现一个队列\" class=\"headerlink\" title=\"[√]双栈实现一个队列\"></a>[√]双栈实现一个队列</h4><p><a href=\"https://github.com/tabris233/slove-problems/blob/master/2018-1/29/QUEUE-two%20stack.cpp\" target=\"_blank\" rel=\"noopener\">实现代码</a></p>\n<h4 id=\"√-编程题\"><a href=\"#√-编程题\" class=\"headerlink\" title=\"[√]编程题\"></a>[√]编程题</h4><p>问题: 两个数组 A 表示一串螺丝 B 表示一串螺帽 螺丝和螺帽能够配对，但是A中螺丝之间不能比较大小，B中螺帽之间也不能比较大小，螺丝和螺帽可以比较大小，返回所有螺丝和螺帽的对应关系，要求复杂度小于O(n^2)</p>\n<p>解: 类似快速排序,一个和另一个比较就可以了.<br><a href=\"https://github.com/tabris233/slove-problems/blob/master/2018-1/30/%E8%9E%BA%E4%B8%9D%E5%92%8C%E8%9E%BA%E5%B8%BD.cpp\" target=\"_blank\" rel=\"noopener\">code</a></p>\n<h4 id=\"今日头条笔试真题\"><a href=\"#今日头条笔试真题\" class=\"headerlink\" title=\"今日头条笔试真题\"></a>今日头条笔试真题</h4><p><a href=\"https://www.nowcoder.com/test/8537140/summary\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/test/8537140/summary</a></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"算法与数据结构\"><a href=\"#算法与数据结构\" class=\"headerlink\" title=\"算法与数据结构\"></a>算法与数据结构</h3><h3 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h3><h4 id=\"一个进程\"><a href=\"#一个进程\" class=\"headerlink\" title=\"一个进程\"></a>一个进程</h4><p>一个进程是<strong>PCB结构与程序与数据的组合</strong></p>\n<h4 id=\"产生死锁的必要条件\"><a href=\"#产生死锁的必要条件\" class=\"headerlink\" title=\"[-]产生死锁的必要条件\"></a>[-]产生死锁的必要条件</h4><ul>\n<li><p>互斥条件: 即某个资源在一段时间内只能由一个进程占有,不能同事被两个或两个以上的进程占有.这种独占资源如CD-ROM驱动器,打印机等等,必须在占有该资源的进程主动释放它之后,其他进程才能占有该资源.这是有资源本身的属性所决定的.如独木桥就是一种独占资源,两方的人不能同时过桥.</p>\n</li>\n<li><p>不可抢占条件: 进程所获得的资源在未使用完毕之前,资源申请者不能强行地从资源占有者中夺取资源.而只能由该资源的占有者进程自行释放.如过独木桥的人自己不能强迫对方后退,也不能非法地将对方退下桥,必须是桥上的人自己过桥后空出桥面(即主动释放占有资源),对方的人才能过桥.</p>\n</li>\n<li><p>占有且申请条件: 进程至少已经占有一个资源,但又申请新的资源; 由于该资源已经被另外进程占有,此时该进程阻塞; 但是,它在等待新资源之时,扔继续占用已占有的资源.还以过独木桥为例,甲乙两人在桥上相遇. 甲走过一段桥面(即占有了一些资源),还需要走其余的桥面(申请新的资源),但那部分桥面被已占有(已走过一段桥面).甲过不去,前进不能,又不后退;乙也处于同样的状况.</p>\n</li>\n<li><p>循环等待条件: 存在一个进程等待序列{P1,P2, … ,Pn}, 其中P1等待P2所占有的某一资源, P2等待P3所占有的某一源, …… ,而Pn等待P1所占有的某一资源形成一个进程循环等待环.就像前面的过独木桥问题,甲等待乙占有的桥面,而乙有等待甲占有的桥面, 从而彼此循环等待.</p>\n</li>\n</ul>\n<h4 id=\"死锁预防\"><a href=\"#死锁预防\" class=\"headerlink\" title=\"[-]死锁预防\"></a>[-]死锁预防</h4><ul>\n<li><p>打破互斥条件: 即允许进程同事访问某些资源.但是,有的资源不允许被同时访问的,像打印机等等.这是由资源本身的属性所决定的. 所以,这种办法并无实用价值</p>\n</li>\n<li><p>打破不可抢占条件: 即允许进程强行从占有者哪里夺取某些资源. 就是说, 当一个进程已占有了某些资源,他又申请新的资源,但不能立即被满足,它必须释放所占有的全部资源, 以后再重新申请. 他所释放的资源可以分配给其他进程.这就相当于该进程占有的资源被隐蔽性地强占了. 这种预防死锁的方法实现起来困难,会降低系统性能.</p>\n</li>\n<li><p>打破占有且申请条件: 可以实行资源预先分配策略. 即进程在运行前一次地向系统申请它所需要的全部资源. 如果某个进程所需的全部资源得不到满足,则不分配任何资源,此进程在不运行.只有当系统能够满足当前进程的全部资源需求时,才一次性地将所申请的资源全部分配给该进程. 由于运行的进程已占有它所需要的全部资源所以不会发生占有资源有申请资源的现象, 因此不会发生死锁. 但是,这种策略也有如下缺点:</p>\n<ul>\n<li>在许多情况下,一个进程在执行之前不可能知道它所需要的全部资源. 这是由于进程在执行时是动态的,不可预测的.</li>\n<li>资源利用率低.无论所分资源何时用到,一个进程只有在占有所需要的全部资源后才能执行.即使有些资源最后才被该进程用到一次,但该进程生存期间一直占有他们,造成长期占着不用的状况.这显然是一种极大的资源浪费.</li>\n<li>降低了进程的并发性.因为资源有限,又加上存在浪费,能分配到所需全部资源的进程个数就必然少了.</li>\n</ul>\n</li>\n<li>打破循环等待条件:<strong>实行资源有序分配策略</strong>.采用这种策略,即把资源事先分类编号,按号分配,使进程在申请,占用资源是不会形成环路.所有进程对资源的请求必须严格按字元序号递增的顺序提出.进程占用了小号资源,才能申请大耗资源,就不会产生环路, 从而预防了死锁.这种策略与前面的策略相比, 资源的利用率和系统的吞吐量都有了很大的提高,但是也存在一下缺点:<ul>\n<li>限制了进程对资源的请求,同事给系统中所有资源合理编号也是件困难时,并增加了系统的开销.</li>\n<li>为了遵循按编号申请的次序,在不使用的资源也需要提前申请,从而增加了进程对资源的占用时间.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"死锁避免\"><a href=\"#死锁避免\" class=\"headerlink\" title=\"死锁避免\"></a>死锁避免</h4><ul>\n<li>银行家算法<br>系统给当前进程分配资源时,先检查是否安全.<br>在满足当前的进程X资源申请后,是否还能有足够的资源去满足下一个距最大资源需求最近的进程(如某进程最大需要5个单位资源,已拥有1个,还需4个),若可以满足,则继续检查下一个距最大资源需求最近的进程,若均能满足所有进程,则表示为安全,可以允许给当前进程X分配其所需的资源申请,否则让该进程X进入等待.</li>\n<li>哲学家进餐问题</li>\n</ul>\n<h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"[-]进程和线程的区别\"></a>[-]进程和线程的区别</h4><blockquote>\n<p>定义<br><strong>进程</strong>是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.<br><strong>线程</strong>是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.<br>关系<br>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.<br>相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。<br>区别<br>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p>\n<blockquote>\n<p>简而言之,一个程序至少有一个进程,一个进程至少有一个线程.<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。<br>优缺点<br>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"[]进程间通信\"></a>[]进程间通信</h4><p>####### 为什么需要进程间通信？？</p>\n<p>进程是一个独立的资源分配单元，不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源（例如打开的文件描述符）。</p>\n<p>但是，进程不是孤立的，不同的进程需要进行信息的交互和状态的传递等，因此需要进程间通信( IPC：Inter Processes Communication )。</p>\n<p>进程间通信的目的：</p>\n<ul>\n<li>数据传输：一个进程需要将它的数据发送给另一个进程。</li>\n<li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。</li>\n<li>资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制。</li>\n<li>进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。<br>Linux 操作系统支持的主要进程间通信的通信机制：</li>\n</ul>\n<p><img src=\"../images/StudyOfInterview/jcjtx.jpg\" alt=\"进程间通信-1\" title=\"进程间通信\"></p>\n<h6 id=\"进程间通信-IPC-介绍\"><a href=\"#进程间通信-IPC-介绍\" class=\"headerlink\" title=\"进程间通信(IPC)介绍\"></a><a href=\"https://www.cnblogs.com/CheeseZH/p/5264465.html\" target=\"_blank\" rel=\"noopener\">进程间通信(IPC)介绍</a></h6><h4 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"[]进程调度\"></a>[]进程调度</h4><h4 id=\"进程的内存分布\"><a href=\"#进程的内存分布\" class=\"headerlink\" title=\"[]进程的内存分布\"></a>[]进程的内存分布</h4><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码段</td>\n<td>全局常量（const）、字符串常量、函数以及编译时可决定的某些东西</td>\n</tr>\n<tr>\n<td>数据段</td>\n<td>存储初始化的全局变量 和 初始化的静态变量(全局和局部)</td>\n</tr>\n<tr>\n<td>BSS段</td>\n<td>存储未初始化的全局变量 和 未初始化的静态变量(全局和局部)</td>\n</tr>\n<tr>\n<td>堆</td>\n<td>动态分配的区域（malloc、new等）</td>\n</tr>\n<tr>\n<td>栈</td>\n<td>l临时声明的局部变量(初始化以及未初始化的,但不包含静态变量),局部常量(const)</td>\n</tr>\n<tr>\n<td>命令行参数和环境变量</td>\n<td>顾名思义</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://images2015.cnblogs.com/blog/978007/201702/978007-20170208113706760-1208301174.png\" alt=\"\"></p>\n<h4 id=\"进程调度-1\"><a href=\"#进程调度-1\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h4><ul>\n<li><p>先来先服务 （FCFS，first come first served）<br>在所有调度算法中，最简单的是非抢占式的FCFS算法。<br>算法原理：进程按照它们请求CPU的顺序使用CPU.就像你买东西去排队，谁第一个排，谁就先被执行，在它执行的过程中，不会中断它。当其他人也想进入内存被执行，就要排队等着，如果在执行过程中出现一些事，他现在不想排队了，下一个排队的就补上。此时如果他又想排队了，只能站到队尾去。<br>算法优点：易于理解且实现简单，只需要一个队列(FIFO)，且相当公平<br>算法缺点：比较有利于长进程，而不利于短进程，有利于CPU 繁忙的进程，而不利于I/O 繁忙的进程</p>\n</li>\n<li><p>最短作业优先（SJF, Shortest Job First）<br>短作业优先（SJF, Shortest Job First）又称为“短进程优先”SPN(Shortest Process Next)；这是对FCFS算法的改进，其目标是减少平均周转时间。<br>算法原理：对预计执行时间短的进程优先分派处理机。通常后来的短进程不抢先正在执行的进程。<br>算法优点：相比FCFS 算法，该算法可改善平均周转时间和平均带权周转时间，缩短进程的等待时间，提高系统的吞吐量。<br>算法缺点：对长进程非常不利，可能长时间得不到执行，且未能依据进程的紧迫程度来划分执行的优先级，以及难以准确估计进程的执行时间，从而影响调度性能。</p>\n</li>\n<li><p>最高响应比优先法(HRRN，Highest Response Ratio Next)<br>最高响应比优先法(HRRN，Highest Response Ratio Next)是对FCFS方式和SJF方式的一种综合平衡。FCFS方式只考虑每个作业的等待时间而未考虑执行时间的长短，而SJF方式只考虑执行时间而未考虑等待时间的长短。因此，这两种调度算法在某些极端情况下会带来某些不便。HRN调度策略同时考虑每个作业的等待时间长短和估计需要的执行时间长短，从中选出响应比最高的作业投入执行。这样，即使是长作业，随着它等待时间的增加，W / T也就随着增加，也就有机会获得调度执行。这种算法是介于FCFS和SJF之间的一种折中算法。<br>算法原理：响应比R定义如下： R =(W+T)/T = 1+W/T<br>其中T为该作业估计需要的执行时间，W为作业在后备状态队列中的等待时间。每当要进行作业调度时，系统计算每个作业的响应比，选择其中R最大者投入执行。<br>算法优点：由于长作业也有机会投入运行，在同一时间内处理的作业数显然要少于SJF法，从而采用HRRN方式时其吞吐量将小于采用SJF 法时的吞吐量。<br>算法缺点：由于每次调度前要计算响应比，系统开销也要相应增加。</p>\n</li>\n<li><p>时间片轮转算法（RR，Round-Robin）<br>该算法采用剥夺策略。时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称RR调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。<br>算法原理：让就绪进程以FCFS 的方式按时间片轮流使用CPU 的调度方式，即将系统中所有的就绪进程按照FCFS 原则，排成一个队列，每次调度时将CPU 分派给队首进程，让其执行一个时间片，时间片的长度从几个ms 到几百ms。在一个时间片结束时，发生时钟中断，调度程序据此暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前的队首进程，进程可以未使用完一个时间片，就出让CPU（如阻塞）。<br>算法优点：时间片轮转调度算法的特点是简单易行、平均响应时间短。<br>算法缺点：不利于处理紧急作业。在时间片轮转算法中，时间片的大小对系统性能的影响很大，因此时间片的大小应选择恰当<br>怎样确定时间片的大小：</p>\n<ul>\n<li>时间片大小的确定<br>1.系统对响应时间的要求<br>2.就绪队列中进程的数目<br>3.系统的处理力</li>\n</ul>\n</li>\n<li><p>多级反馈队列(Multilevel Feedback Queue)<br>多级反馈队列调度算法是一种CPU处理机调度算法，UNIX操作系统采取的便是这种调度算法。<br>多级反馈队列调度算法描述：<br>　　1、进程在进入待调度的队列等待时，首先进入优先级最高的Q1等待。<br>　　2、首先调度优先级高的队列中的进程。若高优先级中队列中已没有调度的进程，则调度次优先级队列中的进程。例如：Q1,Q2,Q3三个队列，只有在Q1中没有进程等待时才去调度Q2，同理，只有Q1,Q2都为空时才会去调度Q3。<br>　　3、对于同一个队列中的各个进程，按照时间片轮转法调度。比如Q1队列的时间片为N，那么Q1中的作业在经历了N个时间片后若还没有完成，则进入Q2队列等待，若Q2的时间片用完后作业还不能完成，一直进入下一级队列，直至完成。<br>　　4、在低优先级的队列中的进程在运行时，又有新到达的作业，那么在运行完这个时间片后，CPU马上分配给新到达的作业（抢占式）。<br>　　在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间时，便能够较好的满足各种类型用户的需要。</p>\n</li>\n</ul>\n<h3 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h3><h4 id=\"TCP和UDP区别\"><a href=\"#TCP和UDP区别\" class=\"headerlink\" title=\"[]TCP和UDP区别\"></a>[]TCP和UDP区别</h4><table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传输</td>\n<td>提供面向连接的、可靠地数据流传输</td>\n<td>提供的是非面向连接的、不可靠的数据流传输</td>\n</tr>\n<tr>\n<td>传输单位</td>\n<td>TCP报文段</td>\n<td>用户数据报</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>TCP注重数据安全性</td>\n<td>UDP数据传输快，因为不需要链接等待，少了许多操作，但是起安全性却一般</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>协议</td>\n<td>FTP:定义了文件传输协议,使用21端口;</td>\n<td>DNS: 用于域名解析服务,将域名地址转换成IP地址.DNS用的是53号端口.</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>Telnet: 一种用于远程登录的端口,使用23端口,用户可以以自己的身份远程连接到计算机上,可提供基于DOS模式下的通信服务</td>\n<td>SNMP: 简单网络管理协议,使用161端口,是用来管理网络十倍的.由于网络设备很多,无连接的服务就体现出其优势.</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>SMTP: 邮件传送协议,用于发送邮件.服务端开放的是25号端口</td>\n<td>TFTP(Trival File Transfer Protocal): 简单文件传输协议,该协议在熟知端口69上使用UDP服务</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>POP3: 它是和SMTP对应,POP3用于接收邮件.POP3协议所用的是110端口</td>\n<td></td>\n</tr>\n<tr>\n<td>协议</td>\n<td>HTTP: 是从Web服务器传输超文本到本地浏览器的传送协议</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://blog.csdn.net/li_ning_/article/details/52117463\" target=\"_blank\" rel=\"noopener\">详细介绍,戳&lt;&lt;&lt;–</a></p>\n<blockquote>\n<p>TCP与UDP区别总结：<br>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付<br>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>TCP首部开销20字节;UDP的首部开销小，只有8个字节<br>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p>\n</blockquote>\n<h4 id=\"TCP三次握手-四次挥手\"><a href=\"#TCP三次握手-四次挥手\" class=\"headerlink\" title=\"[-]TCP三次握手/四次挥手\"></a>[-]TCP三次握手/四次挥手</h4><p><a href=\"http://blog.csdn.net/qzcsu/article/details/72861891\" target=\"_blank\" rel=\"noopener\">详细介绍,戳&lt;&lt;&lt;—</a><br><a href=\"https://www.cnblogs.com/myvin/p/4862167.html\" target=\"_blank\" rel=\"noopener\">更亲民的介绍,戳&lt;&lt;&lt;—</a></p>\n<p>建立连接的过程是利用客户服务器模式,假设主机A为客户端,主机B为服务端</p>\n<ul>\n<li>TCP的三次握手过程：主机Ａ向Ｂ发送链接请求; -&gt; 主机B对收到的主机A的报文段进行确认; -&gt; 主机A再次对主机B的确认进行确认</li>\n<li>采用三次握手是为了防止失效的链接请求报文段突然有传送到主机B,因而产生错误.失效的链接请求报文段是指: 主机A出的连接请求没有收到主机B的确认,于是经过一段时间后,主机A又重新向主机B发送连接请求,且建立成功,顺序完成数据传输. 考虑这样一个特殊情况,主机A第一次发送的连接请求并没有丢失,而是因为网络节点导致延迟到达主机B,主机B以为是主机又发起的新连接,于是主机B同意连接,并向主机A发回确认,但是此时主机A根本不会理会,主机B就一直在等待主机A发送数据，导致主机Ｂ的资源浪费．</li>\n<li>采用两次握手不行, 原因就是上面说的实效的连接请求的特殊情况.</li>\n</ul>\n<h4 id=\"TCP里的一些机制\"><a href=\"#TCP里的一些机制\" class=\"headerlink\" title=\"TCP里的一些机制\"></a>TCP里的一些机制</h4><h4 id=\"OSI-TCP-IP-五层协议的体系结构-以及各层协议\"><a href=\"#OSI-TCP-IP-五层协议的体系结构-以及各层协议\" class=\"headerlink\" title=\"OSI,TCP/IP,五层协议的体系结构,以及各层协议\"></a>OSI,TCP/IP,五层协议的体系结构,以及各层协议</h4><p>OSI分层(7层): 物理层,数据链路层,网络层,传输层,会话层,表示层,应用层.<br>TCP/IP分层(4层): 网络接口层,网际层,运输层,应用层.<br>五层协议(5层): 物理层,数据链路层,网络层,运输层,应用层.</p>\n<p>每一层的协议如下:<br>物理层: RJ45,CLOCK,IEEE802.3(中继器,集线器)<br>数据链路: POP,FR,HDLC,VLAN,MAX(网桥,交换机)<br>网络层: IP,UCMP,ARP,RARP,OSPF,IPX,RIP,IGRP(路由器)<br>传输层: TCP,UDP,SPX<br>会话层: NFS,SQL,NETBIOS,RPC<br>表示层: JPEG,MPEG,ASII<br>应用层: FTP,DNS,Telnet,SMTP,HTTP,WWW,NFS</p>\n<p>每一层的作用如下</p>\n<p>物理层: 通过媒介传输比特,确定机械及电器规范(比特Bit)<br>数据链路: 将比特组装成帧和点到点的传递(帧Frame)<br>网络层: 负责数据包从源到宿的传递和网际互联(包PackeT)<br>传输层: 提供端到端的可靠报文传递和错误回复(段Segment)<br>会话层: 简历,管理和中智慧化(会话协议数据单元SPDU)<br>表示层: 对数据进行翻译,加密和压缩(表示协议数据单元PPDU)<br>应用层: 允许方位OSI环境的手段(应用协议数据单元APDU)</p>\n<h4 id=\"IP地址的分类\"><a href=\"#IP地址的分类\" class=\"headerlink\" title=\"IP地址的分类\"></a>IP地址的分类</h4><p>A类地址: 以0开头, 第一个字节范围1~127(1.0.0.0~127.255.255.255);<br>B类地址: 以10开头, 第一个字节范围128~191(128.0.0.0~191.255.255.255);<br>C类地址: 以110开头, 第一个字节范围192~223(192.0.0.0~223.255.255.255);<br>D类地址: 以1110开头, 第一个字节范围224~239(224.0.0.0~239.255.255.255);<br>E类地址: 保留</p>\n<p>一种A,B,C是基本类,D,E类作为多播和保留使用.<br>以下是留用的内部私有地址:<br>A类 10.0.0.0  – 10.255.255.255<br>B类 182.16.00 – 192.31.255.255<br>C类 192.168.0.0 – 192.168.255.255</p>\n<p>IP地址与子网掩码相与(&amp;)得到网络号<br>ip 192.168.2.110<br>&amp;<br>submask:255.255.255.0<br>.———————————<br>网络号 192.168.2.0</p>\n<p>注: 主机号,全是0的网络号(例如192.168.2.0),主机号全为1的为广播地址(192.168.2.255)</p>\n<h4 id=\"ARP是地址解析协议-简单语言解释一下工作原理\"><a href=\"#ARP是地址解析协议-简单语言解释一下工作原理\" class=\"headerlink\" title=\"ARP是地址解析协议,简单语言解释一下工作原理.\"></a>ARP是地址解析协议,简单语言解释一下工作原理.</h4><ul>\n<li>首先,每个主机都会在自己的ARP缓冲区中建立一个ARP列表,以表示IP地址和MAC地址之间的对应关系.</li>\n<li>当源主机要发送数据时,首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址,如果有,则直接发送数据,如果没有,就向本网段的所有主机发送ARP数据包,该数据包包括的内容有: 源主机的IP地址,源主机的MAC地址,目的主机的IP地址.</li>\n<li>当本网络中的所有主机收到该ARP数据包时,首先检查数据包中的IP地址是否是自己的IP地址,如果不是,则忽略该数据包,,如果是,则首先从数据包中去除源主机的IP和MAC地址写入到ARP列表中,如果已经存在,则覆盖,然后将自己的MAC地址写入ARP响应包中,告诉源主机自己是它想要找的MAC地址</li>\n<li>源主机收到ARP响应后.将目的主机的IP和MAC地址写入ARP列表,并利用此信息发送数据. 如果源主机一直没有收到ARP相应数据包,表示ARP查询失败.</li>\n</ul>\n<p>广播发送ARP请求,单播发送ARP相应. </p>\n<h4 id=\"RARP协议\"><a href=\"#RARP协议\" class=\"headerlink\" title=\"RARP协议\"></a>RARP协议</h4><p>RARP是逆地址解析协议,作用是完成硬件地址到IP地址的映射,主要用于无盘工作站,因为给无盘工作站配置的IP地址不能保存.<br>工作流畅: 在网络中配置一台RARP服务器,里面保存者IP地址和MAC地址的映射关系,当无盘工作站启动后,就封装一个RARP数据包,里面有其MAC地址,然后广播到网络上去,当服务器收到请求包后,就查找对应的MAC地址的IP地址装入响应报文中发回给请求者. 因为需要广播请求报文,因此RARP只能用于具有广播能力的网络.</p>\n<h4 id=\"各种协议的介绍\"><a href=\"#各种协议的介绍\" class=\"headerlink\" title=\"各种协议的介绍\"></a>各种协议的介绍</h4><ul>\n<li><strong>ICMP协议</strong>: 因特网控制报文协议.它是TCP/IP协议族的一个自协议,用于在IP主机/路由器之间传递控制消息.</li>\n<li><strong>TFTP协议</strong>: 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议,提供不复杂,开销不大的文件传输服务.</li>\n<li><strong>HTTP协议</strong>: 超文本传输协议,是一个属于应用层的面向对象的协议,由于其简捷,快速的方式,适用于分布式超媒体信息系统</li>\n<li><strong>NAT协议</strong>: 网络地址转换属介入广域网(WAN)技术,是一种将私有(保留)地址转化为合法IP地址的转换技术.</li>\n<li><strong>DHCP协议</strong>: 动态主机配置协议,给用户或者内部网络管理员作为对所有计算机作中央管理的手段.</li>\n</ul>\n<h4 id=\"在浏览器中输入www-baidu-com后执行的全部过程\"><a href=\"#在浏览器中输入www-baidu-com后执行的全部过程\" class=\"headerlink\" title=\"在浏览器中输入www.baidu.com后执行的全部过程\"></a>在浏览器中输入<a href=\"http://www.baidu.com后执行的全部过程\" target=\"_blank\" rel=\"noopener\">www.baidu.com后执行的全部过程</a></h4><ul>\n<li><ol>\n<li>客户端浏览器通过DNS解析到<a href=\"http://www.baidu.com的IP地址为220.181.27.48\" target=\"_blank\" rel=\"noopener\">www.baidu.com的IP地址为220.181.27.48</a>, 通过这个IP地址找到客户端到服务器的路径. 客户端浏览器发起一个HTTP回话到220.181.27.48, 然后通过TCP进行封装数据包, 输入到网络层.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在客户端的传输层,把HTTP回话请求分成报文段,添加源和目的端口, 如服务器使用80端口监听客户端的请求, 客户端有系统随机选择一个端口如5000, 与服务器进行交换,服务器吧相应的请求返回给客户端的5000端口. 然后使用IP层的IP地址查找目的端.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>客户端的网络层不用关心应用层或者传输层的东西, 主要做到的是通过查找路由表确定如何到达服务器,期间可能经过多个路由器,这些都是有路由器来完成的工作, 我不做过多的描述, 无非就是通过查找路由表决定通过哪个路径到达服务器.</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>客户端的链路层, 包通过链路层发送到路由器, 通过邻居协议查找给定IP地址的MAC地址,然后发送ARP请求查找到目的地址, 如果得到回应后就可以使用ARP的请求应答交换的IP数据包,现在就可以传输了,然后发送IP数据包到达服务器的地址.</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"DNS域名系统-简单描述其工作原理\"><a href=\"#DNS域名系统-简单描述其工作原理\" class=\"headerlink\" title=\"DNS域名系统,简单描述其工作原理\"></a>DNS域名系统,简单描述其工作原理</h4><p>当DNS客户机需要在程序中使用名称时, 它会查询DNS服务器来解析该名称. 客户机发送的每条查询信息包括三条信息: 包括: 指定的DNS域名,DNS域名的指定类型. 基于UDP服务,端口53. 该应用一般不直接为用户使用, 而是为其他应用服务,如 HTTP,SMTO等在其中需要完成主机名到地址的转换.</p>\n<h4 id=\"了解交换机-路由器-网关的概念-并知道各自的用途\"><a href=\"#了解交换机-路由器-网关的概念-并知道各自的用途\" class=\"headerlink\" title=\"了解交换机,路由器,网关的概念, 并知道各自的用途\"></a>了解交换机,路由器,网关的概念, 并知道各自的用途</h4><ul>\n<li><p><strong>交换机</strong><br>在计算机网络系统中,交换机是针对共享工作模式的弱点而推出的.交换机拥有一条高带宽的背部总线和内部交换矩阵.交换机的所有的端口都挂接在这条背部总线上,当控制电路收到数据包以后,处理端口会查找内存中的地址对照表以确定目的端口.目的MAC若不存在,交换机才广播到所有的端口, 接手端口回应后交换机会’学习’新的地址,并把它添加入内部地址表中.<br>交换机工作于OSI参考模型的第二层,即数据链路层. 交换机内部的CPU会在每个端口成功连接时,通过ARP协议学习它的MAC地址,保存成一张ARP表. 在今后的通讯中, 发往该MAC地址的数据包将仅送往其对应的端口,而不是所有端口. 因此,交换机可用于划分数据链路层广播,即冲突域; 但它不能划分网络层广播, 即广播域.<br>交换机被广泛应用于二层网络交换,俗称’二层交换机’.<br>交换机的种类有: 二层交换机,三层交换机,四层交换机,七层交换机分别工作在OSI七层模型中的第二层,第三层,第四层和第七层,并因此而得名.</p>\n</li>\n<li><p>路由器<br>路由器(Router)是一种计算机网络设备,提供了路由与传送两种重要机制,可以决定数据包从来源端到目的端所经过的路由路径(host到host之间的传输路径),这个过程称为<strong>路由</strong>; 将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行),这成为<strong>传动</strong>. 路由工作在OSI模型的第三层 -&gt; 即网络层,例如网际协议.<br>路由器的一个作用是连通不同的网络另一个作用是选择信息传送的线路. 路由器与交换机的差别, 路由器是属于OSI第三层的产品,交换机是OSI第二层的产品(这里至二层交换机)</p>\n</li>\n<li><p>网关<br>网关(Gateway), 网关顾名思义就是连接两个网络的设备,区别与路由器(由于历史的原因,许多有关TCP/IP的文献曾经把网络层使用的路由器成为网关,在今天很多局域网采用的都是路由器来接入网络,因此现在通常指的网关就是路由器的IP),经常在家庭中或者小型企业网络中使用,用于连接局域网和Internet. 网关也经常把一种协议转成另一种协议的设备,比如语音网关.<br>在传统TCP/IP术语中,网络设备只分成两种,一种为网关(Gateway),另一种称为主机(host). 网关能在网络间传递数据包,但主机不能传送数据包.在主机(又称终端系统,end system)中,数据包需经过TCP/IP四层协议处理,但是在网关(又称中介系统,intermediate system)只需要到达网际层(Internet layer),决定路径之后就可以传送. 在当时,网关(Gateway)和路由(Router)还没有区别.<br>在现代网络术语中,网关(Gateway)和路由(Router)的定义不同,网关(Gateway)能在不同协议间移动数据,而路由器(Router)是在不同网络间移动数据,相当于传统所说的IP网关(IP Gateway).<br>网关是连接两个网络的设备,对于语音网关来说,它可以连接PSTN网络和以太网,这就相当于VOIP,把不同电话的模拟信号通过网关而转换成数字信号,而且加入协议再去传输. 在到了接收端的时候再通过网关还原成模拟的电话信号,最后才能在电话机上听到.<br>对于以太网中的网关只能转发三层以上数据包,这一点和路由是一样的.而不同的是网关中并没有路由表,他只能按照预先设定的不同网段来进行转发.网关最重要的一层就是端口映射,子网内用户在外网看来只是外网的IP地址对应着不同的端口,这样看来就会保护子网内的用户.</p>\n</li>\n</ul>\n<h3 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C/C++\"></a>C/C++</h3><h4 id=\"BSS段的功能\"><a href=\"#BSS段的功能\" class=\"headerlink\" title=\"BSS段的功能\"></a>BSS段的功能</h4><h4 id=\"char-p1-“123”-与char-p2-”123”-其中p1-p2区别\"><a href=\"#char-p1-“123”-与char-p2-”123”-其中p1-p2区别\" class=\"headerlink\" title=\"char *p1 = “123” 与char p2[]=”123”,其中p1,p2区别\"></a>char *p1 = “123” 与char p2[]=”123”,其中p1,p2区别</h4><p>答: 常量是存储在内存中的,<br>*p1 是指针 指向”123”中的”1”的地址<br>p2[] 是数组 本质是在堆栈中定义的一段内存</p>\n<h4 id=\"sizeof-struct-char-c-int-a\"><a href=\"#sizeof-struct-char-c-int-a\" class=\"headerlink\" title=\"sizeof(struct{char c;int a;}) = ?\"></a>sizeof(struct{char c;int a;}) = ?</h4><p>答: 4</p>\n<p>内存对其,整体占得内存一定是<strong>最大数据元素的整数倍</strong>.<br>这里最大的是int(4字节)整体就是(4*n字节)<br>大概是这个样子<br>|int|char|<br>△△△△|△—|</p>\n<h4 id=\"多线程编程经验\"><a href=\"#多线程编程经验\" class=\"headerlink\" title=\"多线程编程经验\"></a>多线程编程经验</h4><h4 id=\"C-网络编程\"><a href=\"#C-网络编程\" class=\"headerlink\" title=\"C++网络编程\"></a>C++网络编程</h4><h4 id=\"C-11新增了什么-了解的有哪些\"><a href=\"#C-11新增了什么-了解的有哪些\" class=\"headerlink\" title=\"C++11新增了什么,了解的有哪些.\"></a>C++11新增了什么,了解的有哪些.</h4><h4 id=\"√-const关键字作用\"><a href=\"#√-const关键字作用\" class=\"headerlink\" title=\"[√]const关键字作用.\"></a>[√]const关键字作用.</h4><p><a href=\"https://www.cnblogs.com/chogen/p/4574118.html\" target=\"_blank\" rel=\"noopener\">好文</a></p>\n<h4 id=\"多态-虚函数\"><a href=\"#多态-虚函数\" class=\"headerlink\" title=\"[-]多态/虚函数\"></a>[-]多态/虚函数</h4><p><a href=\"https://www.cnblogs.com/qiaoconglovelife/p/5128523.html\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><h4 id=\"√-HashMap\"><a href=\"#√-HashMap\" class=\"headerlink\" title=\"[√]HashMap\"></a>[√]HashMap</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653191907&amp;idx=1&amp;sn=876860c5a9a6710ead5dd8de37403ffc&amp;chksm=8c990c39bbee852f71c9dfc587fd70d10b0eab1cca17123c0a68bf1e16d46d71717712b91509&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">介绍链接</a></p>\n<h4 id=\"Synchronze-和-Lock的区别和用法\"><a href=\"#Synchronze-和-Lock的区别和用法\" class=\"headerlink\" title=\"Synchronze 和 Lock的区别和用法\"></a>Synchronze 和 Lock的区别和用法</h4><table>\n<thead>\n<tr>\n<th>Synchronze(隐式锁)</th>\n<th>Lock(显示锁)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>在需要同步的对象中加入此控制,synchronize可以加在方法上,也可以加在特定代码块中,括号中表示需要所得对象</td>\n<td>需要显示指定起始位置和终止位置.一般使用ReentrantLock类作为锁,多个线程中必须要使用一个ReentrantLock类作为对象才能保证锁的生效.且在加锁和解锁处需要通过lock()和unlock()显示指出.所以一般会在finally块中写unlock()以防死锁</td>\n</tr>\n<tr>\n<td>托管给JVM执行的</td>\n<td>java写的控制锁代码</td>\n</tr>\n<tr>\n<td>采用的的CPU的悲观锁机制,即线程获得的是独占锁.独占锁意味着其他线程只能依靠阻塞来等待线程释放锁</td>\n<td>乐观锁方式,每次不加锁而是假设没有冲突而去完成某项操作,如果因为冲突失败就重试,直到成功为止.乐观锁实现的机制就是CAS操作(Compare and Swap)</td>\n</tr>\n</tbody>\n</table>\n<p>Ps: 在Java1.5中, syncchronize是性能低效的,因为这是一个重量级操作,需要调用操作接口,导致有可能加锁消耗的系统时间比加锁以外的操作还多. 相比之下使用Java提供的Lock对象,性能更高一些.但是到了Java1.6,发生了变化. synchronize在语义上很清晰,可以进行很多优化,有适应自旋,锁消除,锁粗化,轻量级锁,偏向锁等等. 导致在Java1.6上synchronize的性能并不比Lock差.</p>\n<h4 id=\"乐观锁-悲观锁\"><a href=\"#乐观锁-悲观锁\" class=\"headerlink\" title=\"乐观锁,悲观锁\"></a>乐观锁,悲观锁</h4><ul>\n<li><strong>乐观锁（ Optimistic Locking ）</strong> 相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</li>\n<li><strong>悲观锁（Pessimistic Lock）</strong>，正如其名，具有强烈的独占和排他特性。它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。</li>\n</ul>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><h4 id=\"进程的内存分布-1\"><a href=\"#进程的内存分布-1\" class=\"headerlink\" title=\"进程的内存分布\"></a>进程的内存分布</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码段</td>\n<td>可执行代码</td>\n</tr>\n<tr>\n<td>数据段</td>\n<td>已初始化全局变量,已初始化全局静态变量,局部静态变量,常量数据</td>\n</tr>\n<tr>\n<td>BSS段</td>\n<td>未初始化全局变量,未初始化全局静态变量</td>\n</tr>\n<tr>\n<td>栈</td>\n<td>局部变量,函数参数</td>\n</tr>\n<tr>\n<td>堆</td>\n<td>动态内存分配</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"那个命令可以常看内存使用情况\"><a href=\"#那个命令可以常看内存使用情况\" class=\"headerlink\" title=\"那个命令可以常看内存使用情况\"></a>那个命令可以常看内存使用情况</h4><p>答:<br>top<br>free [-h]<br><!-- ps aux --sort -rss --></p>\n<h4 id=\"touch有什么用\"><a href=\"#touch有什么用\" class=\"headerlink\" title=\"touch有什么用\"></a>touch有什么用</h4><p>答: 两个作用</p>\n<ul>\n<li>一,用于吧已存在文件的时间标签更新为系统当前的时间(默认方式),它们的数据将原封不动地保留下来;</li>\n<li>二,用来创建新的空文件</li>\n</ul>\n<h4 id=\"僵尸进程-孤儿进程-守护进程\"><a href=\"#僵尸进程-孤儿进程-守护进程\" class=\"headerlink\" title=\"僵尸进程,孤儿进程,守护进程\"></a>僵尸进程,孤儿进程,守护进程</h4><p><a href=\"https://blog.csdn.net/gogokongyin/article/details/51340432\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<ul>\n<li><p><strong>僵尸进程:</strong> 在fork()/execve()过程中,假设子进程结束时父进程仍存在,而父进程fork()之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束,又没有显示忽略该信号,则子进程成为僵尸进程.</p>\n</li>\n<li><p><strong>孤儿进程:</strong> 一个父进程退出,而它的一个或多个子进程还在运行,那么那些子进程将成为孤儿进程. 孤儿进程将被init进程(进程号为1)所收养,并由init进程对他们完成状态收集工作. </p>\n</li>\n<li><p><strong>守护进程:</strong> Linux系统中的守护进程是一种运行在后台的进程. 而守护进程,也就是通常说的Daemon进程. 它通常独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件. Linux大多数服务器进程就是用这种守护进程实现的, 例如Web服务.守护进程常常在系统引导装入时启动, 在系统关闭时终止. 守护进程最大的特点是运行在后台,与终端无连接, 除非特殊情况下, 用户不能操作守护进程.</p>\n</li>\n</ul>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3><h3 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h3><h4 id=\"MongoDB-vs-Redis\"><a href=\"#MongoDB-vs-Redis\" class=\"headerlink\" title=\"MongoDB vs Redis\"></a>MongoDB vs Redis</h4><p>MongoDB和Redis都是NoSQL，采用结构型数据存储。二者在使用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过程，持久化的处理方法不同。</p>\n<p> MongoDB建议集群部署，更多的考虑到集群方案，Redis更偏重于进程顺序写入，虽然支持集群，也仅限于主-从模式。</p>\n<table>\n<thead>\n<tr>\n<th>比较指标</th>\n<th>MongoDB(v2.4.9)</th>\n<th>Redis(v2.4.17)</th>\n<th>比较说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>实现语言</td>\n<td>c++</td>\n<td>c/c++</td>\n<td>-</td>\n</tr>\n<tr>\n<td>协议</td>\n<td>BSON,自定义二进制</td>\n<td>类telnet</td>\n<td>-</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>依赖内存,TPS{(transaction per second)代表每秒执行的事务数量}较高</td>\n<td>依赖内存,TPS非常高</td>\n<td>Redis优于MongoDB</td>\n</tr>\n<tr>\n<td>可操作性</td>\n<td>丰富的数据表达,索引;最类似于关系型数据库,支持丰富的查询语句</td>\n<td>数据丰富,较少的IO</td>\n<td>MongoDB优于Redis</td>\n</tr>\n<tr>\n<td>内存及存储</td>\n<td>适合大数据量存储,依赖系统虚拟内存,采用镜像文件存储;内存占用率比较高,官方建议独立部署在64位系统</td>\n<td>Redis2.0后支持虚拟内存特性(VM) 突破物理内存限制;数据可以设置时效性,类似于memcache</td>\n<td>不同的应用场景,各有千秋</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>支持master-slave,replicatset(内部采用paxos选举算法,自动故障恢复),auto sharding机制,对客户端屏蔽了故障转移和切片机制</td>\n<td>依赖客户端来实现分布式读写;主从复制时,每次从节点重新连接主节点都要依赖整个快照,无增量复制;不支持auto sharding,需要依赖程序设定一致性hash机制</td>\n<td>MongoDB优于Redis；单点问题上,MongoDB应用简单,相对用户透明,Redis比较复杂,需要客户端主动解决.(MongoDB一般使用replicasets和sharding相结合,replicasets侧重高可用性以及高可靠,sharding侧重性能,水平扩展)</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>从1.8版本后,采用binlog方式(类似Mysql) 支持持久化</td>\n<td>依赖快照进行持久化;AOF增强可靠性;增强性的同时,影响访问性能</td>\n<td>-</td>\n</tr>\n<tr>\n<td>一致性</td>\n<td>不支持事务,靠客户端保证</td>\n<td>支持事务,比较脆,仅能保证事务中的操作按顺序执行</td>\n<td>Redis优于MongoDB</td>\n</tr>\n<tr>\n<td>数据分析</td>\n<td>内置数据分析功能(mapreduce)</td>\n<td>不支持</td>\n<td>MongoDB优于Redis</td>\n</tr>\n<tr>\n<td>应用场景</td>\n<td>海量数据的访问效率提升</td>\n<td>较小数据量的性能和运算</td>\n<td>MongoDB优于Redis</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"数据库事务的四大特性-ACID\"><a href=\"#数据库事务的四大特性-ACID\" class=\"headerlink\" title=\"数据库事务的四大特性(ACID)\"></a>数据库事务的四大特性(ACID)</h4><ul>\n<li><strong>原子性(Atomicity)</strong><br>事务是数据库的逻辑工作单位,它对数据库的修改要么全部执行,要么全部不执行.</li>\n<li><strong>一致性(Consistemcy)</strong><br>事务前后,数据库的状态都满足所有的完整性约束</li>\n<li><strong>隔离性(lsolation)</strong><br>并发执行的事务是隔离的,一个不影响一个.如果有两个事务,运行在相同的时间内,执行相同的功能,事务的隔离性将确保每一事务在系统中认为只有该事物在使用系统. 这种属性有时称为串行化,为了防止事务操作间的混淆,必须串行化或序列化请求,使得在同一时间仅有y一个请求用于统一数据.通过设置数据库的<strong>隔离级别</strong>,可以达到不同的隔离效果.</li>\n<li>持久性(Durability)<br>在事务完成后,该事务所对数据库所作的更改便持久的保存在数据库之中,并不会被回滚.</li>\n</ul>\n<h4 id=\"并发事务引起的问题\"><a href=\"#并发事务引起的问题\" class=\"headerlink\" title=\"并发事务引起的问题\"></a>并发事务引起的问题</h4><ul>\n<li><p><strong>更新丢失</strong><br>两个事务都同时更新一行数据，但是第二个事务却中途失败退出，导致对数据的两个修改都失效了。这是因为系统没有执行任何的锁操作，因此并发事务并没有被隔离开来。</p>\n</li>\n<li><p><strong>脏读</strong><br>脏读又称无效数据读出。一个事务读取另外一个事务还没有提交的数据叫脏读。<br>例如：事务T1修改了一行数据，但是还没有提交，这时候事务T2读取了被事务T1修改后的数据，之后事务T1因为某种原因Rollback了，那么事务T2读取的数据就是脏的。</p>\n</li>\n</ul>\n<h2 id=\"设计题-系统题\"><a href=\"#设计题-系统题\" class=\"headerlink\" title=\"设计题/系统题\"></a>设计题/系统题</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"设计一个ID分配器\"><a href=\"#设计一个ID分配器\" class=\"headerlink\" title=\"[]设计一个ID分配器\"></a>[]设计一个ID分配器</h4><h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\".\"></a>.</h4><h2 id=\"技术无关\"><a href=\"#技术无关\" class=\"headerlink\" title=\"技术无关\"></a>技术无关</h2><h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\".\"></a>.</h3><h4 id=\"能抗住压力么\"><a href=\"#能抗住压力么\" class=\"headerlink\" title=\"能抗住压力么\"></a>能抗住压力么</h4><p>答:作为应届生,本就应该吃苦耐劳学技术,人都是逼出来的,有压力才有动力,这点压力不算什么.</p>\n<h4 id=\"有女朋友么\"><a href=\"#有女朋友么\" class=\"headerlink\" title=\"有女朋友么\"></a>有女朋友么</h4><p>答: 没有,一心向学,不找女朋友浪费时间.(TM是找不到好不2333)</p>\n<h4 id=\"你有什么问题吗\"><a href=\"#你有什么问题吗\" class=\"headerlink\" title=\"你有什么问题吗\"></a>你有什么问题吗</h4><ol>\n<li>这个岗位做的主要业务是什么</li>\n<li>岗位的技术栈</li>\n<li>招这个岗位的校招或者实习生更看重哪方面的能力</li>\n</ol>\n"},{"title":"<原>#  Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】","date":"2017-09-21T08:44:50.000Z","description":null,"toc":true,"_content":"\n\n\n\n#  Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】\n\n2017年09月21日 16:44:50  [ Tabris_ ](https://me.csdn.net/qq_33184171) 阅读数：272\n\n---\n 博客爬取于`2019-04-17 20:56:22`\n***以下为正文***\n\n版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。\nhttps://blog.csdn.net/qq_33184171/article/details/78053974\n\n题目链接： [ http://codeforces.com/problemset/problem/794/F\n](http://codeforces.com/problemset/problem/794/F)  \n——————————————————————————————————————  \nF. Leha and security system  \ntime limit per test2 seconds  \nmemory limit per test512 megabytes  \ninputstandard input  \noutputstandard output  \nBankopolis, the city you already know, finally got a new bank opened!\nUnfortunately, its security system is not yet working fine… Meanwhile hacker\nLeha arrived in Bankopolis and decided to test the system!\n\nBank has n cells for clients’ money. A sequence from n numbers a1, a2, …, an\ndescribes the amount of money each client has. Leha wants to make requests to\nthe database of the bank, finding out the total amount of money on some\nsubsegments of the sequence and changing values of the sequence on some\nsubsegments. Using a bug in the system, Leha can requests two types of queries\nto the database:\n\n1 l r x y denoting that Leha changes each digit x to digit y in each element\nof sequence ai, for which l ≤ i ≤ r is holds. For example, if we change in\nnumber 11984381 digit 8 to 4, we get 11944341. It’s worth noting that Leha, in\norder to stay in the shadow, never changes digits in the database to 0, i.e. y\n≠ 0.  \n2 l r denoting that Leha asks to calculate and print the sum of such elements\nof sequence ai, for which l ≤ i ≤ r holds.  \nAs Leha is a white-hat hacker, he don’t want to test this vulnerability on a\nreal database. You are to write a similar database for Leha to test.\n\nInput  \nThe first line of input contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤\n105) denoting amount of cells in the bank and total amount of queries\nrespectively.\n\nThe following line contains n integers a1, a2, …, an (1 ≤ ai < 109) denoting\nthe amount of money in each cell initially. These integers do not contain\nleading zeros.\n\nEach of the following q lines has one of the formats:\n\n1 l r x y (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 9, 1 ≤ y ≤ 9), denoting Leha asks to change\neach digit x on digit y for each element ai of the sequence for which l ≤ i ≤\nr holds;  \n2 l r (1 ≤ l ≤ r ≤ n), denoting you have to calculate and print the sum of\nelements ai for which l ≤ i ≤ r holds.  \nOutput  \nFor each second type query print a single number denoting the required sum.\n\nExamples  \ninput  \n5 5  \n38 43 4 12 70  \n1 1 3 4 8  \n2 2 4  \n1 4 5 0 8  \n1 2 5 8 7  \n2 1 5  \noutput  \n103  \n207  \ninput  \n5 5  \n25 36 39 40 899  \n1 1 3 2 7  \n2 1 2  \n1 3 5 9 1  \n1 4 4 0 9  \n2 1 5  \noutput  \n111  \n1002  \nNote  \nLet’s look at the example testcase.\n\nInitially the sequence is [38, 43, 4, 12, 70].\n\nAfter the first change each digit equal to 4 becomes 8 for each element with\nindex in interval [1; 3]. Thus, the new sequence is [38, 83, 8, 12, 70].\n\nThe answer for the first sum’s query is the sum in the interval [2; 4], which\nequal 83 + 8 + 12 = 103, so the answer to this query is 103.\n\nThe sequence becomes [38, 83, 8, 12, 78] after the second change and [38, 73,\n7, 12, 77] after the third.\n\nThe answer for the second sum’s query is 38 + 73 + 7 + 12 + 77 = 207.  \n——————————————————————————————————————  \n题目大意:\n\n一个长度为n的序列 ，有两种操作，\n\n  1. 将[l, r]上所有数中 数位为x的都改为y \n  2. 求[l, r]上所有数的和 \n\n* * *\n\n解题思路：\n\n还是考虑直接的线段树维护，  \n每个节点维护10个信息，分别是数位为0~9的和，同时维护延迟标记\n\n求和部分略，\n\n对于数位修改，最大的问题就是考虑 如何维护lazy了，\n\n这里维护的lazy同样有10个，lazy[i]表示的是接下来的数中数位为i的要变成数位lazy[i]\n\n那么问题就是标记下传怎么搞了\n\n和普通的标记下传相比 较为复杂,但也无非是把左右儿子的值先改过来 ,再把lazy合并过去,\n\n还是看代码 比较好理解\n\n\n​    \n    这是对左儿子进行pushdown的\n        for(int i=0;i<10;i++)vis[i]=lazy[rt<<1][i],sum2[i]=sum[rt<<1][i];  // 找两个临时变量代替左儿子的信息\n        for(int i=0;i<10;i++)if(lazy[rt][i]!=i){                           //\n            for(int j=0;j<10;j++)if(lazy[rt<<1][j]==i) vis[j]=lazy[rt][i]; //数位变化\n            sum2[lazy[rt][i]]+=sum[rt<<1][i];                              // 变过去的就要加上值\n            sum2[i]-=sum[rt<<1][i];                                        // 因为可能是变过来在变过去,所以不能直接赋0\n        }\n        for(int i=0;i<10;i++) sum[rt<<1][i]=sum2[i],lazy[rt<<1][i]=vis[i];\n\n* * *\n\n附本题代码  \n——————————————————————————————————————\n\n\n​    \n    #include <bits/stdc++.h>\n    typedef long long int LL;\n    using namespace std;\n    \n    const int N = 1e5+7;\n    /*****************************************/\n    LL sum[N<<2][11],sum2[11],a[N];\n    int lazy[N<<2][11],vis[11];\n    \n    void pushdown(int rt){\n        for(int i=0;i<10;i++)vis[i]=lazy[rt<<1][i],sum2[i]=sum[rt<<1][i];\n        for(int i=0;i<10;i++)if(lazy[rt][i]!=i){\n            for(int j=0;j<10;j++)if(lazy[rt<<1][j]==i) vis[j]=lazy[rt][i];\n            sum2[lazy[rt][i]]+=sum[rt<<1][i];\n            sum2[i]-=sum[rt<<1][i];\n        }\n        for(int i=0;i<10;i++) sum[rt<<1][i]=sum2[i],lazy[rt<<1][i]=vis[i];\n    \n        for(int i=0;i<10;i++) vis[i]=lazy[rt<<1|1][i],sum2[i]=sum[rt<<1|1][i];\n        for(int i=0;i<10;i++)if(lazy[rt][i]!=i){\n            for(int j=0;j<10;j++)if(lazy[rt<<1|1][j]==i) vis[j]=lazy[rt][i];\n            sum2[lazy[rt][i]]+=sum[rt<<1|1][i];\n            sum2[i]-=sum[rt<<1|1][i];\n        }\n        for(int i=0;i<10;i++) sum[rt<<1|1][i]=sum2[i],lazy[rt<<1|1][i]=vis[i];\n    \n        for(int i=0;i<10;i++) lazy[rt][i] = i;\n    }\n    \n    void pushup(int rt){\n        for(int i=0;i<10;i++) sum[rt][i]=sum[rt<<1][i]+sum[rt<<1|1][i];\n    }\n    \n    void build(int rt,int l,int r){\n        for(int i=0;i<10;i++) sum[rt][i]=0;\n        for(int i=0;i<10;i++)lazy[rt][i]=i;\n        if(l==r){\n            for(LL t=1;a[l];a[l]/=10,t*=10)\n                sum[rt][a[l]%10]+=t;\n            return ;\n        }\n        int m = r+l >> 1;\n        build(rt<<1  ,l  ,m);\n        build(rt<<1|1,m+1,r);\n        pushup(rt);\n    }\n    \n    void update(int rt,int l,int r,int L,int R,int x,int y){\n        if(L<=l&&r<=R){\n            for(int i=0;i<10;i++)if(lazy[rt][i]==x){\n                sum[rt][y]+=sum[rt][x];\n                sum[rt][x]=0;\n                lazy[rt][i]=y;\n            }\n            return ;\n        }\n        pushdown(rt);\n        int m = r+l >> 1;\n        if(L<=m) update(rt<<1  ,l  ,m,L,R,x,y);\n        if(R> m) update(rt<<1|1,m+1,r,L,R,x,y);\n        pushup(rt);\n    }\n    \n    LL query(int rt,int l,int r,int L,int R){\n        if(L<=l&&r<=R){\n            LL ans = 0;\n            for(LL i=1;i<10;i++) ans+=sum[rt][i]*i;\n            return ans;\n        }\n        pushdown(rt);\n        int m = r+l >> 1;LL ans = 0;\n        if(L<=m) ans += query(rt<<1  ,l  ,m,L,R);\n        if(R> m) ans += query(rt<<1|1,m+1,r,L,R);\n        pushup(rt);\n        return ans;\n    }\n    \n    int n,m;\n    int main(){\n        while(~scanf(\"%d%d\",&n,&m)){\n            for(int i=1;i<=n;i++) scanf(\"%lld\",&a[i]);\n            build(1,1,n);\n            int op,l,r,x,y;\n            for(int i=1;i<=m;i++){\n                scanf(\"%d%d%d\",&op,&l,&r);\n                if(1==op){\n                    scanf(\"%d%d\",&x,&y);\n                    if(x==y) continue;\n                    update(1,1,n,l,r,x,y);\n                }\n                else printf(\"%lld\\n\",query(1,1,n,l,r));\n            }\n        }\n        return 0;\n    }\n\n\n","source":"_posts/78053974.md","raw":"---\ntitle: <原>#  Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】\ndate: 2017-09-21 16:44:50\ncategories:\ntags: []  # 文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription:\ntoc: true\n---\n\n\n\n\n#  Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】\n\n2017年09月21日 16:44:50  [ Tabris_ ](https://me.csdn.net/qq_33184171) 阅读数：272\n\n---\n 博客爬取于`2019-04-17 20:56:22`\n***以下为正文***\n\n版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。\nhttps://blog.csdn.net/qq_33184171/article/details/78053974\n\n题目链接： [ http://codeforces.com/problemset/problem/794/F\n](http://codeforces.com/problemset/problem/794/F)  \n——————————————————————————————————————  \nF. Leha and security system  \ntime limit per test2 seconds  \nmemory limit per test512 megabytes  \ninputstandard input  \noutputstandard output  \nBankopolis, the city you already know, finally got a new bank opened!\nUnfortunately, its security system is not yet working fine… Meanwhile hacker\nLeha arrived in Bankopolis and decided to test the system!\n\nBank has n cells for clients’ money. A sequence from n numbers a1, a2, …, an\ndescribes the amount of money each client has. Leha wants to make requests to\nthe database of the bank, finding out the total amount of money on some\nsubsegments of the sequence and changing values of the sequence on some\nsubsegments. Using a bug in the system, Leha can requests two types of queries\nto the database:\n\n1 l r x y denoting that Leha changes each digit x to digit y in each element\nof sequence ai, for which l ≤ i ≤ r is holds. For example, if we change in\nnumber 11984381 digit 8 to 4, we get 11944341. It’s worth noting that Leha, in\norder to stay in the shadow, never changes digits in the database to 0, i.e. y\n≠ 0.  \n2 l r denoting that Leha asks to calculate and print the sum of such elements\nof sequence ai, for which l ≤ i ≤ r holds.  \nAs Leha is a white-hat hacker, he don’t want to test this vulnerability on a\nreal database. You are to write a similar database for Leha to test.\n\nInput  \nThe first line of input contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤\n105) denoting amount of cells in the bank and total amount of queries\nrespectively.\n\nThe following line contains n integers a1, a2, …, an (1 ≤ ai < 109) denoting\nthe amount of money in each cell initially. These integers do not contain\nleading zeros.\n\nEach of the following q lines has one of the formats:\n\n1 l r x y (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 9, 1 ≤ y ≤ 9), denoting Leha asks to change\neach digit x on digit y for each element ai of the sequence for which l ≤ i ≤\nr holds;  \n2 l r (1 ≤ l ≤ r ≤ n), denoting you have to calculate and print the sum of\nelements ai for which l ≤ i ≤ r holds.  \nOutput  \nFor each second type query print a single number denoting the required sum.\n\nExamples  \ninput  \n5 5  \n38 43 4 12 70  \n1 1 3 4 8  \n2 2 4  \n1 4 5 0 8  \n1 2 5 8 7  \n2 1 5  \noutput  \n103  \n207  \ninput  \n5 5  \n25 36 39 40 899  \n1 1 3 2 7  \n2 1 2  \n1 3 5 9 1  \n1 4 4 0 9  \n2 1 5  \noutput  \n111  \n1002  \nNote  \nLet’s look at the example testcase.\n\nInitially the sequence is [38, 43, 4, 12, 70].\n\nAfter the first change each digit equal to 4 becomes 8 for each element with\nindex in interval [1; 3]. Thus, the new sequence is [38, 83, 8, 12, 70].\n\nThe answer for the first sum’s query is the sum in the interval [2; 4], which\nequal 83 + 8 + 12 = 103, so the answer to this query is 103.\n\nThe sequence becomes [38, 83, 8, 12, 78] after the second change and [38, 73,\n7, 12, 77] after the third.\n\nThe answer for the second sum’s query is 38 + 73 + 7 + 12 + 77 = 207.  \n——————————————————————————————————————  \n题目大意:\n\n一个长度为n的序列 ，有两种操作，\n\n  1. 将[l, r]上所有数中 数位为x的都改为y \n  2. 求[l, r]上所有数的和 \n\n* * *\n\n解题思路：\n\n还是考虑直接的线段树维护，  \n每个节点维护10个信息，分别是数位为0~9的和，同时维护延迟标记\n\n求和部分略，\n\n对于数位修改，最大的问题就是考虑 如何维护lazy了，\n\n这里维护的lazy同样有10个，lazy[i]表示的是接下来的数中数位为i的要变成数位lazy[i]\n\n那么问题就是标记下传怎么搞了\n\n和普通的标记下传相比 较为复杂,但也无非是把左右儿子的值先改过来 ,再把lazy合并过去,\n\n还是看代码 比较好理解\n\n\n​    \n    这是对左儿子进行pushdown的\n        for(int i=0;i<10;i++)vis[i]=lazy[rt<<1][i],sum2[i]=sum[rt<<1][i];  // 找两个临时变量代替左儿子的信息\n        for(int i=0;i<10;i++)if(lazy[rt][i]!=i){                           //\n            for(int j=0;j<10;j++)if(lazy[rt<<1][j]==i) vis[j]=lazy[rt][i]; //数位变化\n            sum2[lazy[rt][i]]+=sum[rt<<1][i];                              // 变过去的就要加上值\n            sum2[i]-=sum[rt<<1][i];                                        // 因为可能是变过来在变过去,所以不能直接赋0\n        }\n        for(int i=0;i<10;i++) sum[rt<<1][i]=sum2[i],lazy[rt<<1][i]=vis[i];\n\n* * *\n\n附本题代码  \n——————————————————————————————————————\n\n\n​    \n    #include <bits/stdc++.h>\n    typedef long long int LL;\n    using namespace std;\n    \n    const int N = 1e5+7;\n    /*****************************************/\n    LL sum[N<<2][11],sum2[11],a[N];\n    int lazy[N<<2][11],vis[11];\n    \n    void pushdown(int rt){\n        for(int i=0;i<10;i++)vis[i]=lazy[rt<<1][i],sum2[i]=sum[rt<<1][i];\n        for(int i=0;i<10;i++)if(lazy[rt][i]!=i){\n            for(int j=0;j<10;j++)if(lazy[rt<<1][j]==i) vis[j]=lazy[rt][i];\n            sum2[lazy[rt][i]]+=sum[rt<<1][i];\n            sum2[i]-=sum[rt<<1][i];\n        }\n        for(int i=0;i<10;i++) sum[rt<<1][i]=sum2[i],lazy[rt<<1][i]=vis[i];\n    \n        for(int i=0;i<10;i++) vis[i]=lazy[rt<<1|1][i],sum2[i]=sum[rt<<1|1][i];\n        for(int i=0;i<10;i++)if(lazy[rt][i]!=i){\n            for(int j=0;j<10;j++)if(lazy[rt<<1|1][j]==i) vis[j]=lazy[rt][i];\n            sum2[lazy[rt][i]]+=sum[rt<<1|1][i];\n            sum2[i]-=sum[rt<<1|1][i];\n        }\n        for(int i=0;i<10;i++) sum[rt<<1|1][i]=sum2[i],lazy[rt<<1|1][i]=vis[i];\n    \n        for(int i=0;i<10;i++) lazy[rt][i] = i;\n    }\n    \n    void pushup(int rt){\n        for(int i=0;i<10;i++) sum[rt][i]=sum[rt<<1][i]+sum[rt<<1|1][i];\n    }\n    \n    void build(int rt,int l,int r){\n        for(int i=0;i<10;i++) sum[rt][i]=0;\n        for(int i=0;i<10;i++)lazy[rt][i]=i;\n        if(l==r){\n            for(LL t=1;a[l];a[l]/=10,t*=10)\n                sum[rt][a[l]%10]+=t;\n            return ;\n        }\n        int m = r+l >> 1;\n        build(rt<<1  ,l  ,m);\n        build(rt<<1|1,m+1,r);\n        pushup(rt);\n    }\n    \n    void update(int rt,int l,int r,int L,int R,int x,int y){\n        if(L<=l&&r<=R){\n            for(int i=0;i<10;i++)if(lazy[rt][i]==x){\n                sum[rt][y]+=sum[rt][x];\n                sum[rt][x]=0;\n                lazy[rt][i]=y;\n            }\n            return ;\n        }\n        pushdown(rt);\n        int m = r+l >> 1;\n        if(L<=m) update(rt<<1  ,l  ,m,L,R,x,y);\n        if(R> m) update(rt<<1|1,m+1,r,L,R,x,y);\n        pushup(rt);\n    }\n    \n    LL query(int rt,int l,int r,int L,int R){\n        if(L<=l&&r<=R){\n            LL ans = 0;\n            for(LL i=1;i<10;i++) ans+=sum[rt][i]*i;\n            return ans;\n        }\n        pushdown(rt);\n        int m = r+l >> 1;LL ans = 0;\n        if(L<=m) ans += query(rt<<1  ,l  ,m,L,R);\n        if(R> m) ans += query(rt<<1|1,m+1,r,L,R);\n        pushup(rt);\n        return ans;\n    }\n    \n    int n,m;\n    int main(){\n        while(~scanf(\"%d%d\",&n,&m)){\n            for(int i=1;i<=n;i++) scanf(\"%lld\",&a[i]);\n            build(1,1,n);\n            int op,l,r,x,y;\n            for(int i=1;i<=m;i++){\n                scanf(\"%d%d%d\",&op,&l,&r);\n                if(1==op){\n                    scanf(\"%d%d\",&x,&y);\n                    if(x==y) continue;\n                    update(1,1,n,l,r,x,y);\n                }\n                else printf(\"%lld\\n\",query(1,1,n,l,r));\n            }\n        }\n        return 0;\n    }\n\n\n","slug":"78053974","published":1,"updated":"2019-04-17T13:04:30.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjul89ztq0000wnfk73yvrk49","content":"<h1 id=\"Codeforces-794F-Leha-and-security-system-线段树-区间更新-【数据结构】\"><a href=\"#Codeforces-794F-Leha-and-security-system-线段树-区间更新-【数据结构】\" class=\"headerlink\" title=\"Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】\"></a>Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】</h1><p>2017年09月21日 16:44:50  <a href=\"https://me.csdn.net/qq_33184171\" target=\"_blank\" rel=\"noopener\"> Tabris_ </a> 阅读数：272</p>\n<hr>\n<p> 博客爬取于<code>2019-04-17 20:56:22</code><br><strong><em>以下为正文</em></strong></p>\n<p>版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。<br><a href=\"https://blog.csdn.net/qq_33184171/article/details/78053974\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_33184171/article/details/78053974</a></p>\n<p>题目链接： <a href=\"http://codeforces.com/problemset/problem/794/F\" target=\"_blank\" rel=\"noopener\"> http://codeforces.com/problemset/problem/794/F\n</a><br>——————————————————————————————————————<br>F. Leha and security system<br>time limit per test2 seconds<br>memory limit per test512 megabytes<br>inputstandard input<br>outputstandard output<br>Bankopolis, the city you already know, finally got a new bank opened!<br>Unfortunately, its security system is not yet working fine… Meanwhile hacker<br>Leha arrived in Bankopolis and decided to test the system!</p>\n<p>Bank has n cells for clients’ money. A sequence from n numbers a1, a2, …, an<br>describes the amount of money each client has. Leha wants to make requests to<br>the database of the bank, finding out the total amount of money on some<br>subsegments of the sequence and changing values of the sequence on some<br>subsegments. Using a bug in the system, Leha can requests two types of queries<br>to the database:</p>\n<p>1 l r x y denoting that Leha changes each digit x to digit y in each element<br>of sequence ai, for which l ≤ i ≤ r is holds. For example, if we change in<br>number 11984381 digit 8 to 4, we get 11944341. It’s worth noting that Leha, in<br>order to stay in the shadow, never changes digits in the database to 0, i.e. y<br>≠ 0.<br>2 l r denoting that Leha asks to calculate and print the sum of such elements<br>of sequence ai, for which l ≤ i ≤ r holds.<br>As Leha is a white-hat hacker, he don’t want to test this vulnerability on a<br>real database. You are to write a similar database for Leha to test.</p>\n<p>Input<br>The first line of input contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤<br>105) denoting amount of cells in the bank and total amount of queries<br>respectively.</p>\n<p>The following line contains n integers a1, a2, …, an (1 ≤ ai &lt; 109) denoting<br>the amount of money in each cell initially. These integers do not contain<br>leading zeros.</p>\n<p>Each of the following q lines has one of the formats:</p>\n<p>1 l r x y (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 9, 1 ≤ y ≤ 9), denoting Leha asks to change<br>each digit x on digit y for each element ai of the sequence for which l ≤ i ≤<br>r holds;<br>2 l r (1 ≤ l ≤ r ≤ n), denoting you have to calculate and print the sum of<br>elements ai for which l ≤ i ≤ r holds.<br>Output<br>For each second type query print a single number denoting the required sum.</p>\n<p>Examples<br>input<br>5 5<br>38 43 4 12 70<br>1 1 3 4 8<br>2 2 4<br>1 4 5 0 8<br>1 2 5 8 7<br>2 1 5<br>output<br>103<br>207<br>input<br>5 5<br>25 36 39 40 899<br>1 1 3 2 7<br>2 1 2<br>1 3 5 9 1<br>1 4 4 0 9<br>2 1 5<br>output<br>111<br>1002<br>Note<br>Let’s look at the example testcase.</p>\n<p>Initially the sequence is [38, 43, 4, 12, 70].</p>\n<p>After the first change each digit equal to 4 becomes 8 for each element with<br>index in interval [1; 3]. Thus, the new sequence is [38, 83, 8, 12, 70].</p>\n<p>The answer for the first sum’s query is the sum in the interval [2; 4], which<br>equal 83 + 8 + 12 = 103, so the answer to this query is 103.</p>\n<p>The sequence becomes [38, 83, 8, 12, 78] after the second change and [38, 73,<br>7, 12, 77] after the third.</p>\n<p>The answer for the second sum’s query is 38 + 73 + 7 + 12 + 77 = 207.<br>——————————————————————————————————————<br>题目大意:</p>\n<p>一个长度为n的序列 ，有两种操作，</p>\n<ol>\n<li>将[l, r]上所有数中 数位为x的都改为y </li>\n<li>求[l, r]上所有数的和 </li>\n</ol>\n<hr>\n<p>解题思路：</p>\n<p>还是考虑直接的线段树维护，<br>每个节点维护10个信息，分别是数位为0~9的和，同时维护延迟标记</p>\n<p>求和部分略，</p>\n<p>对于数位修改，最大的问题就是考虑 如何维护lazy了，</p>\n<p>这里维护的lazy同样有10个，lazy[i]表示的是接下来的数中数位为i的要变成数位lazy[i]</p>\n<p>那么问题就是标记下传怎么搞了</p>\n<p>和普通的标记下传相比 较为复杂,但也无非是把左右儿子的值先改过来 ,再把lazy合并过去,</p>\n<p>还是看代码 比较好理解</p>\n<p>​<br>    这是对左儿子进行pushdown的<br>        for(int i=0;i&lt;10;i++)vis[i]=lazy[rt&lt;&lt;1][i],sum2[i]=sum[rt&lt;&lt;1][i];  // 找两个临时变量代替左儿子的信息<br>        for(int i=0;i&lt;10;i++)if(lazy[rt][i]!=i){                           //<br>            for(int j=0;j&lt;10;j++)if(lazy[rt&lt;&lt;1][j]==i) vis[j]=lazy[rt][i]; //数位变化<br>            sum2[lazy[rt][i]]+=sum[rt&lt;&lt;1][i];                              // 变过去的就要加上值<br>            sum2[i]-=sum[rt&lt;&lt;1][i];                                        // 因为可能是变过来在变过去,所以不能直接赋0<br>        }<br>        for(int i=0;i&lt;10;i++) sum[rt&lt;&lt;1][i]=sum2[i],lazy[rt&lt;&lt;1][i]=vis[i];</p>\n<hr>\n<p>附本题代码<br>——————————————————————————————————————</p>\n<p>​    </p>\n<pre><code>#include &lt;bits/stdc++.h&gt;\ntypedef long long int LL;\nusing namespace std;\n\nconst int N = 1e5+7;\n/*****************************************/\nLL sum[N&lt;&lt;2][11],sum2[11],a[N];\nint lazy[N&lt;&lt;2][11],vis[11];\n\nvoid pushdown(int rt){\n    for(int i=0;i&lt;10;i++)vis[i]=lazy[rt&lt;&lt;1][i],sum2[i]=sum[rt&lt;&lt;1][i];\n    for(int i=0;i&lt;10;i++)if(lazy[rt][i]!=i){\n        for(int j=0;j&lt;10;j++)if(lazy[rt&lt;&lt;1][j]==i) vis[j]=lazy[rt][i];\n        sum2[lazy[rt][i]]+=sum[rt&lt;&lt;1][i];\n        sum2[i]-=sum[rt&lt;&lt;1][i];\n    }\n    for(int i=0;i&lt;10;i++) sum[rt&lt;&lt;1][i]=sum2[i],lazy[rt&lt;&lt;1][i]=vis[i];\n\n    for(int i=0;i&lt;10;i++) vis[i]=lazy[rt&lt;&lt;1|1][i],sum2[i]=sum[rt&lt;&lt;1|1][i];\n    for(int i=0;i&lt;10;i++)if(lazy[rt][i]!=i){\n        for(int j=0;j&lt;10;j++)if(lazy[rt&lt;&lt;1|1][j]==i) vis[j]=lazy[rt][i];\n        sum2[lazy[rt][i]]+=sum[rt&lt;&lt;1|1][i];\n        sum2[i]-=sum[rt&lt;&lt;1|1][i];\n    }\n    for(int i=0;i&lt;10;i++) sum[rt&lt;&lt;1|1][i]=sum2[i],lazy[rt&lt;&lt;1|1][i]=vis[i];\n\n    for(int i=0;i&lt;10;i++) lazy[rt][i] = i;\n}\n\nvoid pushup(int rt){\n    for(int i=0;i&lt;10;i++) sum[rt][i]=sum[rt&lt;&lt;1][i]+sum[rt&lt;&lt;1|1][i];\n}\n\nvoid build(int rt,int l,int r){\n    for(int i=0;i&lt;10;i++) sum[rt][i]=0;\n    for(int i=0;i&lt;10;i++)lazy[rt][i]=i;\n    if(l==r){\n        for(LL t=1;a[l];a[l]/=10,t*=10)\n            sum[rt][a[l]%10]+=t;\n        return ;\n    }\n    int m = r+l &gt;&gt; 1;\n    build(rt&lt;&lt;1  ,l  ,m);\n    build(rt&lt;&lt;1|1,m+1,r);\n    pushup(rt);\n}\n\nvoid update(int rt,int l,int r,int L,int R,int x,int y){\n    if(L&lt;=l&amp;&amp;r&lt;=R){\n        for(int i=0;i&lt;10;i++)if(lazy[rt][i]==x){\n            sum[rt][y]+=sum[rt][x];\n            sum[rt][x]=0;\n            lazy[rt][i]=y;\n        }\n        return ;\n    }\n    pushdown(rt);\n    int m = r+l &gt;&gt; 1;\n    if(L&lt;=m) update(rt&lt;&lt;1  ,l  ,m,L,R,x,y);\n    if(R&gt; m) update(rt&lt;&lt;1|1,m+1,r,L,R,x,y);\n    pushup(rt);\n}\n\nLL query(int rt,int l,int r,int L,int R){\n    if(L&lt;=l&amp;&amp;r&lt;=R){\n        LL ans = 0;\n        for(LL i=1;i&lt;10;i++) ans+=sum[rt][i]*i;\n        return ans;\n    }\n    pushdown(rt);\n    int m = r+l &gt;&gt; 1;LL ans = 0;\n    if(L&lt;=m) ans += query(rt&lt;&lt;1  ,l  ,m,L,R);\n    if(R&gt; m) ans += query(rt&lt;&lt;1|1,m+1,r,L,R);\n    pushup(rt);\n    return ans;\n}\n\nint n,m;\nint main(){\n    while(~scanf(&quot;%d%d&quot;,&amp;n,&amp;m)){\n        for(int i=1;i&lt;=n;i++) scanf(&quot;%lld&quot;,&amp;a[i]);\n        build(1,1,n);\n        int op,l,r,x,y;\n        for(int i=1;i&lt;=m;i++){\n            scanf(&quot;%d%d%d&quot;,&amp;op,&amp;l,&amp;r);\n            if(1==op){\n                scanf(&quot;%d%d&quot;,&amp;x,&amp;y);\n                if(x==y) continue;\n                update(1,1,n,l,r,x,y);\n            }\n            else printf(&quot;%lld\\n&quot;,query(1,1,n,l,r));\n        }\n    }\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Codeforces-794F-Leha-and-security-system-线段树-区间更新-【数据结构】\"><a href=\"#Codeforces-794F-Leha-and-security-system-线段树-区间更新-【数据结构】\" class=\"headerlink\" title=\"Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】\"></a>Codeforces 794F - Leha and security system [线段树-区间更新]【数据结构】</h1><p>2017年09月21日 16:44:50  <a href=\"https://me.csdn.net/qq_33184171\" target=\"_blank\" rel=\"noopener\"> Tabris_ </a> 阅读数：272</p>\n<hr>\n<p> 博客爬取于<code>2019-04-17 20:56:22</code><br><strong><em>以下为正文</em></strong></p>\n<p>版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。<br><a href=\"https://blog.csdn.net/qq_33184171/article/details/78053974\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_33184171/article/details/78053974</a></p>\n<p>题目链接： <a href=\"http://codeforces.com/problemset/problem/794/F\" target=\"_blank\" rel=\"noopener\"> http://codeforces.com/problemset/problem/794/F\n</a><br>——————————————————————————————————————<br>F. Leha and security system<br>time limit per test2 seconds<br>memory limit per test512 megabytes<br>inputstandard input<br>outputstandard output<br>Bankopolis, the city you already know, finally got a new bank opened!<br>Unfortunately, its security system is not yet working fine… Meanwhile hacker<br>Leha arrived in Bankopolis and decided to test the system!</p>\n<p>Bank has n cells for clients’ money. A sequence from n numbers a1, a2, …, an<br>describes the amount of money each client has. Leha wants to make requests to<br>the database of the bank, finding out the total amount of money on some<br>subsegments of the sequence and changing values of the sequence on some<br>subsegments. Using a bug in the system, Leha can requests two types of queries<br>to the database:</p>\n<p>1 l r x y denoting that Leha changes each digit x to digit y in each element<br>of sequence ai, for which l ≤ i ≤ r is holds. For example, if we change in<br>number 11984381 digit 8 to 4, we get 11944341. It’s worth noting that Leha, in<br>order to stay in the shadow, never changes digits in the database to 0, i.e. y<br>≠ 0.<br>2 l r denoting that Leha asks to calculate and print the sum of such elements<br>of sequence ai, for which l ≤ i ≤ r holds.<br>As Leha is a white-hat hacker, he don’t want to test this vulnerability on a<br>real database. You are to write a similar database for Leha to test.</p>\n<p>Input<br>The first line of input contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤<br>105) denoting amount of cells in the bank and total amount of queries<br>respectively.</p>\n<p>The following line contains n integers a1, a2, …, an (1 ≤ ai &lt; 109) denoting<br>the amount of money in each cell initially. These integers do not contain<br>leading zeros.</p>\n<p>Each of the following q lines has one of the formats:</p>\n<p>1 l r x y (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 9, 1 ≤ y ≤ 9), denoting Leha asks to change<br>each digit x on digit y for each element ai of the sequence for which l ≤ i ≤<br>r holds;<br>2 l r (1 ≤ l ≤ r ≤ n), denoting you have to calculate and print the sum of<br>elements ai for which l ≤ i ≤ r holds.<br>Output<br>For each second type query print a single number denoting the required sum.</p>\n<p>Examples<br>input<br>5 5<br>38 43 4 12 70<br>1 1 3 4 8<br>2 2 4<br>1 4 5 0 8<br>1 2 5 8 7<br>2 1 5<br>output<br>103<br>207<br>input<br>5 5<br>25 36 39 40 899<br>1 1 3 2 7<br>2 1 2<br>1 3 5 9 1<br>1 4 4 0 9<br>2 1 5<br>output<br>111<br>1002<br>Note<br>Let’s look at the example testcase.</p>\n<p>Initially the sequence is [38, 43, 4, 12, 70].</p>\n<p>After the first change each digit equal to 4 becomes 8 for each element with<br>index in interval [1; 3]. Thus, the new sequence is [38, 83, 8, 12, 70].</p>\n<p>The answer for the first sum’s query is the sum in the interval [2; 4], which<br>equal 83 + 8 + 12 = 103, so the answer to this query is 103.</p>\n<p>The sequence becomes [38, 83, 8, 12, 78] after the second change and [38, 73,<br>7, 12, 77] after the third.</p>\n<p>The answer for the second sum’s query is 38 + 73 + 7 + 12 + 77 = 207.<br>——————————————————————————————————————<br>题目大意:</p>\n<p>一个长度为n的序列 ，有两种操作，</p>\n<ol>\n<li>将[l, r]上所有数中 数位为x的都改为y </li>\n<li>求[l, r]上所有数的和 </li>\n</ol>\n<hr>\n<p>解题思路：</p>\n<p>还是考虑直接的线段树维护，<br>每个节点维护10个信息，分别是数位为0~9的和，同时维护延迟标记</p>\n<p>求和部分略，</p>\n<p>对于数位修改，最大的问题就是考虑 如何维护lazy了，</p>\n<p>这里维护的lazy同样有10个，lazy[i]表示的是接下来的数中数位为i的要变成数位lazy[i]</p>\n<p>那么问题就是标记下传怎么搞了</p>\n<p>和普通的标记下传相比 较为复杂,但也无非是把左右儿子的值先改过来 ,再把lazy合并过去,</p>\n<p>还是看代码 比较好理解</p>\n<p>​<br>    这是对左儿子进行pushdown的<br>        for(int i=0;i&lt;10;i++)vis[i]=lazy[rt&lt;&lt;1][i],sum2[i]=sum[rt&lt;&lt;1][i];  // 找两个临时变量代替左儿子的信息<br>        for(int i=0;i&lt;10;i++)if(lazy[rt][i]!=i){                           //<br>            for(int j=0;j&lt;10;j++)if(lazy[rt&lt;&lt;1][j]==i) vis[j]=lazy[rt][i]; //数位变化<br>            sum2[lazy[rt][i]]+=sum[rt&lt;&lt;1][i];                              // 变过去的就要加上值<br>            sum2[i]-=sum[rt&lt;&lt;1][i];                                        // 因为可能是变过来在变过去,所以不能直接赋0<br>        }<br>        for(int i=0;i&lt;10;i++) sum[rt&lt;&lt;1][i]=sum2[i],lazy[rt&lt;&lt;1][i]=vis[i];</p>\n<hr>\n<p>附本题代码<br>——————————————————————————————————————</p>\n<p>​    </p>\n<pre><code>#include &lt;bits/stdc++.h&gt;\ntypedef long long int LL;\nusing namespace std;\n\nconst int N = 1e5+7;\n/*****************************************/\nLL sum[N&lt;&lt;2][11],sum2[11],a[N];\nint lazy[N&lt;&lt;2][11],vis[11];\n\nvoid pushdown(int rt){\n    for(int i=0;i&lt;10;i++)vis[i]=lazy[rt&lt;&lt;1][i],sum2[i]=sum[rt&lt;&lt;1][i];\n    for(int i=0;i&lt;10;i++)if(lazy[rt][i]!=i){\n        for(int j=0;j&lt;10;j++)if(lazy[rt&lt;&lt;1][j]==i) vis[j]=lazy[rt][i];\n        sum2[lazy[rt][i]]+=sum[rt&lt;&lt;1][i];\n        sum2[i]-=sum[rt&lt;&lt;1][i];\n    }\n    for(int i=0;i&lt;10;i++) sum[rt&lt;&lt;1][i]=sum2[i],lazy[rt&lt;&lt;1][i]=vis[i];\n\n    for(int i=0;i&lt;10;i++) vis[i]=lazy[rt&lt;&lt;1|1][i],sum2[i]=sum[rt&lt;&lt;1|1][i];\n    for(int i=0;i&lt;10;i++)if(lazy[rt][i]!=i){\n        for(int j=0;j&lt;10;j++)if(lazy[rt&lt;&lt;1|1][j]==i) vis[j]=lazy[rt][i];\n        sum2[lazy[rt][i]]+=sum[rt&lt;&lt;1|1][i];\n        sum2[i]-=sum[rt&lt;&lt;1|1][i];\n    }\n    for(int i=0;i&lt;10;i++) sum[rt&lt;&lt;1|1][i]=sum2[i],lazy[rt&lt;&lt;1|1][i]=vis[i];\n\n    for(int i=0;i&lt;10;i++) lazy[rt][i] = i;\n}\n\nvoid pushup(int rt){\n    for(int i=0;i&lt;10;i++) sum[rt][i]=sum[rt&lt;&lt;1][i]+sum[rt&lt;&lt;1|1][i];\n}\n\nvoid build(int rt,int l,int r){\n    for(int i=0;i&lt;10;i++) sum[rt][i]=0;\n    for(int i=0;i&lt;10;i++)lazy[rt][i]=i;\n    if(l==r){\n        for(LL t=1;a[l];a[l]/=10,t*=10)\n            sum[rt][a[l]%10]+=t;\n        return ;\n    }\n    int m = r+l &gt;&gt; 1;\n    build(rt&lt;&lt;1  ,l  ,m);\n    build(rt&lt;&lt;1|1,m+1,r);\n    pushup(rt);\n}\n\nvoid update(int rt,int l,int r,int L,int R,int x,int y){\n    if(L&lt;=l&amp;&amp;r&lt;=R){\n        for(int i=0;i&lt;10;i++)if(lazy[rt][i]==x){\n            sum[rt][y]+=sum[rt][x];\n            sum[rt][x]=0;\n            lazy[rt][i]=y;\n        }\n        return ;\n    }\n    pushdown(rt);\n    int m = r+l &gt;&gt; 1;\n    if(L&lt;=m) update(rt&lt;&lt;1  ,l  ,m,L,R,x,y);\n    if(R&gt; m) update(rt&lt;&lt;1|1,m+1,r,L,R,x,y);\n    pushup(rt);\n}\n\nLL query(int rt,int l,int r,int L,int R){\n    if(L&lt;=l&amp;&amp;r&lt;=R){\n        LL ans = 0;\n        for(LL i=1;i&lt;10;i++) ans+=sum[rt][i]*i;\n        return ans;\n    }\n    pushdown(rt);\n    int m = r+l &gt;&gt; 1;LL ans = 0;\n    if(L&lt;=m) ans += query(rt&lt;&lt;1  ,l  ,m,L,R);\n    if(R&gt; m) ans += query(rt&lt;&lt;1|1,m+1,r,L,R);\n    pushup(rt);\n    return ans;\n}\n\nint n,m;\nint main(){\n    while(~scanf(&quot;%d%d&quot;,&amp;n,&amp;m)){\n        for(int i=1;i&lt;=n;i++) scanf(&quot;%lld&quot;,&amp;a[i]);\n        build(1,1,n);\n        int op,l,r,x,y;\n        for(int i=1;i&lt;=m;i++){\n            scanf(&quot;%d%d%d&quot;,&amp;op,&amp;l,&amp;r);\n            if(1==op){\n                scanf(&quot;%d%d&quot;,&amp;x,&amp;y);\n                if(x==y) continue;\n                update(1,1,n,l,r,x,y);\n            }\n            else printf(&quot;%lld\\n&quot;,query(1,1,n,l,r));\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"title":"<原># 2017年第0届浙江工业大学之江学院程序设计竞赛决赛","date":"2017-06-02T18:22:20.000Z","description":null,"toc":true,"_content":"\n\n\n\n#  2017年第0届浙江工业大学之江学院程序设计竞赛决赛 F: qwb has a lot of Coins [nim]【博弈】\n\n2017年06月03日 02:22:20  [ Tabris_ ](https://me.csdn.net/qq_33184171) 阅读数：368\n\n---\n 博客爬取于`2019-04-17 20:57:12`\n***以下为正文***\n\n版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。\nhttps://blog.csdn.net/qq_33184171/article/details/72849663\n\n题目链接： [ http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&pid=5\n](http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&pid=5)  \n——————————————————————————————————————————  \nProblem F: qwb has a lot of Coins  \nTime Limit: 1 Sec Memory Limit: 128 MB  \nSubmit: 699 Solved: 220  \n[Submit][Status][Web Board]  \nDescription  \nqwb has a lot of coins. One day, he decides to play a game with his friend\nusing these coins. He first puts some of his coins into M piles, each of which\nis composed of Ni (1<=i<=M) coins. Then, the two players play the coin game in\nturns. Every step, one can remove one or more coins from only one pile. The\nwinner is the one who removes the last coin.  \nThen comes the question: How many different ways the first player can do that\nwill ensure him win the game?  \nInput  \nInput contains multiple test cases till the end of file. Each test case starts\nwith a number M (1 <= M<= 1000) meaning the number of piles. The next line\ncontains M integers Ni (1 <= Ni <= 1e9, 1 <= i<= M) indicating the number of\ncoins in pile i.  \nOutput  \nFor each case, put the method count in one line.  \nIf the first player can win the game, the method count is the number of\ndifferent ways that he can do to ensure him win the game, otherwise zero.  \nSample Input  \n3  \n1 2 3  \n1  \n1  \nSample Output  \n0  \n1  \n——————————————————————————————————————————  \n题意：就是问你Nim游戏先手第一步能赢的方案数\n\n* * *\n\n显然就是然你模拟下Nim游戏呗，如果第一步选当前堆能赢就++，\n\n能赢就是这个堆的石子个数大于其他堆得石子个数异或和\n\n简单nim游戏不解释\n\n虽然给了1000，但是这题是可以预处理前后缀异或和达到O(n)的\n\n附本题代码  \n——————————————————————————————————————————\n\n\n​    \n    #include <bits/stdc++.h>\n    typedef long long int LL;\n    using namespace std;\n    \n    #define abs(x) (((x)>0)?(x):-(x))\n    \n    const int N = 3000+10;\n    const int MOD  = 1e8;\n    \n    /******************************************/\n    \n    int n;\n    int a[1111];\n    int pre[1111],suf[1111];\n    int main(){\n        while(~scanf(\"%d\",&n)){\n            pre[0]=suf[n+1]=0;\n            for(int i=1;i<=n;i++){\n                scanf(\"%d\",&a[i]);\n                pre[i]=pre[i-1]^a[i];\n            }\n            for(int i=n;i;i--)\n                suf[i]=suf[i+1]^a[i];\n            int cnt=0;\n            for(int i=1;i<=n;i++){\n    //            printf(\"%d : %d %d\\n\",i,a[i],(pre[i-1]^suf[i+1]));\n                if(a[i]>(pre[i-1]^suf[i+1])) cnt++;\n            }\n            printf(\"%d\\n\",cnt);\n        }\n        return 0;\n    }\n\n\n","source":"_posts/72849663.md","raw":"---\ntitle: <原># 2017年第0届浙江工业大学之江学院程序设计竞赛决赛\ndate: 2017-06-03 02:22:20\ncategories:\ntags: []  # 文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription:\ntoc: true\n---\n\n\n\n\n#  2017年第0届浙江工业大学之江学院程序设计竞赛决赛 F: qwb has a lot of Coins [nim]【博弈】\n\n2017年06月03日 02:22:20  [ Tabris_ ](https://me.csdn.net/qq_33184171) 阅读数：368\n\n---\n 博客爬取于`2019-04-17 20:57:12`\n***以下为正文***\n\n版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。\nhttps://blog.csdn.net/qq_33184171/article/details/72849663\n\n题目链接： [ http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&pid=5\n](http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&pid=5)  \n——————————————————————————————————————————  \nProblem F: qwb has a lot of Coins  \nTime Limit: 1 Sec Memory Limit: 128 MB  \nSubmit: 699 Solved: 220  \n[Submit][Status][Web Board]  \nDescription  \nqwb has a lot of coins. One day, he decides to play a game with his friend\nusing these coins. He first puts some of his coins into M piles, each of which\nis composed of Ni (1<=i<=M) coins. Then, the two players play the coin game in\nturns. Every step, one can remove one or more coins from only one pile. The\nwinner is the one who removes the last coin.  \nThen comes the question: How many different ways the first player can do that\nwill ensure him win the game?  \nInput  \nInput contains multiple test cases till the end of file. Each test case starts\nwith a number M (1 <= M<= 1000) meaning the number of piles. The next line\ncontains M integers Ni (1 <= Ni <= 1e9, 1 <= i<= M) indicating the number of\ncoins in pile i.  \nOutput  \nFor each case, put the method count in one line.  \nIf the first player can win the game, the method count is the number of\ndifferent ways that he can do to ensure him win the game, otherwise zero.  \nSample Input  \n3  \n1 2 3  \n1  \n1  \nSample Output  \n0  \n1  \n——————————————————————————————————————————  \n题意：就是问你Nim游戏先手第一步能赢的方案数\n\n* * *\n\n显然就是然你模拟下Nim游戏呗，如果第一步选当前堆能赢就++，\n\n能赢就是这个堆的石子个数大于其他堆得石子个数异或和\n\n简单nim游戏不解释\n\n虽然给了1000，但是这题是可以预处理前后缀异或和达到O(n)的\n\n附本题代码  \n——————————————————————————————————————————\n\n\n​    \n    #include <bits/stdc++.h>\n    typedef long long int LL;\n    using namespace std;\n    \n    #define abs(x) (((x)>0)?(x):-(x))\n    \n    const int N = 3000+10;\n    const int MOD  = 1e8;\n    \n    /******************************************/\n    \n    int n;\n    int a[1111];\n    int pre[1111],suf[1111];\n    int main(){\n        while(~scanf(\"%d\",&n)){\n            pre[0]=suf[n+1]=0;\n            for(int i=1;i<=n;i++){\n                scanf(\"%d\",&a[i]);\n                pre[i]=pre[i-1]^a[i];\n            }\n            for(int i=n;i;i--)\n                suf[i]=suf[i+1]^a[i];\n            int cnt=0;\n            for(int i=1;i<=n;i++){\n    //            printf(\"%d : %d %d\\n\",i,a[i],(pre[i-1]^suf[i+1]));\n                if(a[i]>(pre[i-1]^suf[i+1])) cnt++;\n            }\n            printf(\"%d\\n\",cnt);\n        }\n        return 0;\n    }\n\n\n","slug":"72849663","published":1,"updated":"2019-04-17T13:05:19.614Z","_id":"cjul8acfa0000xsfkbhn4xbj5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2017年第0届浙江工业大学之江学院程序设计竞赛决赛-F-qwb-has-a-lot-of-Coins-nim-【博弈】\"><a href=\"#2017年第0届浙江工业大学之江学院程序设计竞赛决赛-F-qwb-has-a-lot-of-Coins-nim-【博弈】\" class=\"headerlink\" title=\"2017年第0届浙江工业大学之江学院程序设计竞赛决赛 F: qwb has a lot of Coins [nim]【博弈】\"></a>2017年第0届浙江工业大学之江学院程序设计竞赛决赛 F: qwb has a lot of Coins [nim]【博弈】</h1><p>2017年06月03日 02:22:20  <a href=\"https://me.csdn.net/qq_33184171\" target=\"_blank\" rel=\"noopener\"> Tabris_ </a> 阅读数：368</p>\n<hr>\n<p> 博客爬取于<code>2019-04-17 20:57:12</code><br><strong><em>以下为正文</em></strong></p>\n<p>版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。<br><a href=\"https://blog.csdn.net/qq_33184171/article/details/72849663\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_33184171/article/details/72849663</a></p>\n<p>题目链接： <a href=\"http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&amp;pid=5\" target=\"_blank\" rel=\"noopener\"> http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&amp;pid=5\n</a><br>——————————————————————————————————————————<br>Problem F: qwb has a lot of Coins<br>Time Limit: 1 Sec Memory Limit: 128 MB<br>Submit: 699 Solved: 220<br>[Submit][Status][Web Board]<br>Description<br>qwb has a lot of coins. One day, he decides to play a game with his friend<br>using these coins. He first puts some of his coins into M piles, each of which<br>is composed of Ni (1&lt;=i&lt;=M) coins. Then, the two players play the coin game in<br>turns. Every step, one can remove one or more coins from only one pile. The<br>winner is the one who removes the last coin.<br>Then comes the question: How many different ways the first player can do that<br>will ensure him win the game?<br>Input<br>Input contains multiple test cases till the end of file. Each test case starts<br>with a number M (1 &lt;= M&lt;= 1000) meaning the number of piles. The next line<br>contains M integers Ni (1 &lt;= Ni &lt;= 1e9, 1 &lt;= i&lt;= M) indicating the number of<br>coins in pile i.<br>Output<br>For each case, put the method count in one line.<br>If the first player can win the game, the method count is the number of<br>different ways that he can do to ensure him win the game, otherwise zero.<br>Sample Input<br>3<br>1 2 3<br>1<br>1<br>Sample Output<br>0<br>1<br>——————————————————————————————————————————<br>题意：就是问你Nim游戏先手第一步能赢的方案数</p>\n<hr>\n<p>显然就是然你模拟下Nim游戏呗，如果第一步选当前堆能赢就++，</p>\n<p>能赢就是这个堆的石子个数大于其他堆得石子个数异或和</p>\n<p>简单nim游戏不解释</p>\n<p>虽然给了1000，但是这题是可以预处理前后缀异或和达到O(n)的</p>\n<p>附本题代码<br>——————————————————————————————————————————</p>\n<p>​    </p>\n<pre><code>#include &lt;bits/stdc++.h&gt;\ntypedef long long int LL;\nusing namespace std;\n\n#define abs(x) (((x)&gt;0)?(x):-(x))\n\nconst int N = 3000+10;\nconst int MOD  = 1e8;\n\n/******************************************/\n\nint n;\nint a[1111];\nint pre[1111],suf[1111];\nint main(){\n    while(~scanf(&quot;%d&quot;,&amp;n)){\n        pre[0]=suf[n+1]=0;\n        for(int i=1;i&lt;=n;i++){\n            scanf(&quot;%d&quot;,&amp;a[i]);\n            pre[i]=pre[i-1]^a[i];\n        }\n        for(int i=n;i;i--)\n            suf[i]=suf[i+1]^a[i];\n        int cnt=0;\n        for(int i=1;i&lt;=n;i++){\n//            printf(&quot;%d : %d %d\\n&quot;,i,a[i],(pre[i-1]^suf[i+1]));\n            if(a[i]&gt;(pre[i-1]^suf[i+1])) cnt++;\n        }\n        printf(&quot;%d\\n&quot;,cnt);\n    }\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2017年第0届浙江工业大学之江学院程序设计竞赛决赛-F-qwb-has-a-lot-of-Coins-nim-【博弈】\"><a href=\"#2017年第0届浙江工业大学之江学院程序设计竞赛决赛-F-qwb-has-a-lot-of-Coins-nim-【博弈】\" class=\"headerlink\" title=\"2017年第0届浙江工业大学之江学院程序设计竞赛决赛 F: qwb has a lot of Coins [nim]【博弈】\"></a>2017年第0届浙江工业大学之江学院程序设计竞赛决赛 F: qwb has a lot of Coins [nim]【博弈】</h1><p>2017年06月03日 02:22:20  <a href=\"https://me.csdn.net/qq_33184171\" target=\"_blank\" rel=\"noopener\"> Tabris_ </a> 阅读数：368</p>\n<hr>\n<p> 博客爬取于<code>2019-04-17 20:57:12</code><br><strong><em>以下为正文</em></strong></p>\n<p>版权声明：本文为Tabris原创文章，未经博主允许不得私自转载。<br><a href=\"https://blog.csdn.net/qq_33184171/article/details/72849663\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_33184171/article/details/72849663</a></p>\n<p>题目链接： <a href=\"http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&amp;pid=5\" target=\"_blank\" rel=\"noopener\"> http://115.231.222.240:8081/JudgeOnline/problem.php?cid=1005&amp;pid=5\n</a><br>——————————————————————————————————————————<br>Problem F: qwb has a lot of Coins<br>Time Limit: 1 Sec Memory Limit: 128 MB<br>Submit: 699 Solved: 220<br>[Submit][Status][Web Board]<br>Description<br>qwb has a lot of coins. One day, he decides to play a game with his friend<br>using these coins. He first puts some of his coins into M piles, each of which<br>is composed of Ni (1&lt;=i&lt;=M) coins. Then, the two players play the coin game in<br>turns. Every step, one can remove one or more coins from only one pile. The<br>winner is the one who removes the last coin.<br>Then comes the question: How many different ways the first player can do that<br>will ensure him win the game?<br>Input<br>Input contains multiple test cases till the end of file. Each test case starts<br>with a number M (1 &lt;= M&lt;= 1000) meaning the number of piles. The next line<br>contains M integers Ni (1 &lt;= Ni &lt;= 1e9, 1 &lt;= i&lt;= M) indicating the number of<br>coins in pile i.<br>Output<br>For each case, put the method count in one line.<br>If the first player can win the game, the method count is the number of<br>different ways that he can do to ensure him win the game, otherwise zero.<br>Sample Input<br>3<br>1 2 3<br>1<br>1<br>Sample Output<br>0<br>1<br>——————————————————————————————————————————<br>题意：就是问你Nim游戏先手第一步能赢的方案数</p>\n<hr>\n<p>显然就是然你模拟下Nim游戏呗，如果第一步选当前堆能赢就++，</p>\n<p>能赢就是这个堆的石子个数大于其他堆得石子个数异或和</p>\n<p>简单nim游戏不解释</p>\n<p>虽然给了1000，但是这题是可以预处理前后缀异或和达到O(n)的</p>\n<p>附本题代码<br>——————————————————————————————————————————</p>\n<p>​    </p>\n<pre><code>#include &lt;bits/stdc++.h&gt;\ntypedef long long int LL;\nusing namespace std;\n\n#define abs(x) (((x)&gt;0)?(x):-(x))\n\nconst int N = 3000+10;\nconst int MOD  = 1e8;\n\n/******************************************/\n\nint n;\nint a[1111];\nint pre[1111],suf[1111];\nint main(){\n    while(~scanf(&quot;%d&quot;,&amp;n)){\n        pre[0]=suf[n+1]=0;\n        for(int i=1;i&lt;=n;i++){\n            scanf(&quot;%d&quot;,&amp;a[i]);\n            pre[i]=pre[i-1]^a[i];\n        }\n        for(int i=n;i;i--)\n            suf[i]=suf[i+1]^a[i];\n        int cnt=0;\n        for(int i=1;i&lt;=n;i++){\n//            printf(&quot;%d : %d %d\\n&quot;,i,a[i],(pre[i-1]^suf[i+1]));\n            if(a[i]&gt;(pre[i-1]^suf[i+1])) cnt++;\n        }\n        printf(&quot;%d\\n&quot;,cnt);\n    }\n    return 0;\n}\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjul87j2y00j9safkyht5vl3m","tag_id":"cjul87j2r00iysafkeheyicy9","_id":"cjul87j3000jbsafk6d7c6btj"},{"post_id":"cjul87j2z00jasafkbls0ah2x","tag_id":"cjul87j2u00j2safku0t97w05","_id":"cjul87j3100jesafkrehjwskk"},{"post_id":"cjul87j2p00iwsafkrs19m91d","tag_id":"cjul87j2r00iysafkeheyicy9","_id":"cjul87j3500jisafkjz6qy4tb"},{"post_id":"cjul87j2p00iwsafkrs19m91d","tag_id":"cjul87j2u00j2safku0t97w05","_id":"cjul87j3600jksafkwf9dp482"},{"post_id":"cjul87j2p00iwsafkrs19m91d","tag_id":"cjul87j2w00j5safkr5n1ymaf","_id":"cjul87j3700jnsafkqsm84kjs"},{"post_id":"cjul87j2p00iwsafkrs19m91d","tag_id":"cjul87j2y00j8safk8f2drm1h","_id":"cjul87j3900jpsafkmgx4eeu9"},{"post_id":"cjul87j2p00iwsafkrs19m91d","tag_id":"cjul87j3000jcsafkpv5ijjjg","_id":"cjul87j3a00jssafkhsc28ksv"},{"post_id":"cjul87j2q00ixsafkbxo3y2p4","tag_id":"cjul87j3400jhsafkw9ywc3c5","_id":"cjul87j3a00jtsafkmz7xcil8"},{"post_id":"cjul87j2r00izsafk16n6v1gm","tag_id":"cjul87j3700jmsafkxwsziw7w","_id":"cjul87j3c00k1safkuua7n5xt"},{"post_id":"cjul87j2r00izsafk16n6v1gm","tag_id":"cjul87j3900jrsafkg3e6uelw","_id":"cjul87j3c00k2safkeq9ub3nq"},{"post_id":"cjul87j2r00izsafk16n6v1gm","tag_id":"cjul87j3a00jusafkydqbwxgb","_id":"cjul87j3c00k4safkcc3b1j60"},{"post_id":"cjul87j2r00izsafk16n6v1gm","tag_id":"cjul87j3b00jysafkojfbt1l3","_id":"cjul87j3c00k5safk5nxc3re0"},{"post_id":"cjul87j2r00izsafk16n6v1gm","tag_id":"cjul87j3b00jzsafkm1k1ootp","_id":"cjul87j3d00k7safkjy2osvjv"},{"post_id":"cjul87j2s00j0safko8ith4ib","tag_id":"cjul87j3b00k0safk4wpovw83","_id":"cjul87j3d00k8safkg7orb8cd"},{"post_id":"cjul87j2t00j1safkai32k9ye","tag_id":"cjul87j3c00k3safkuacvqred","_id":"cjul87j3d00kasafkkbz9qlmj"},{"post_id":"cjul87j2u00j3safk1jzish17","tag_id":"cjul87j3c00k6safk5jvvrktg","_id":"cjul87j3d00kbsafkqwud2q5j"},{"post_id":"cjul87j2w00j6safkeesfmi1h","tag_id":"cjul87j3700jmsafkxwsziw7w","_id":"cjul87j3f00kesafk45zp9pca"},{"post_id":"cjul87j2w00j6safkeesfmi1h","tag_id":"cjul87j3e00kcsafkzkkzsrcy","_id":"cjul87j3f00kfsafkq6arkrzq"},{"post_id":"cjul87j2x00j7safkwpumpmli","tag_id":"cjul87j2r00iysafkeheyicy9","_id":"cjul87j3f00kisafkclemj2bg"},{"post_id":"cjul87j2x00j7safkwpumpmli","tag_id":"cjul87j2y00j8safk8f2drm1h","_id":"cjul87j3g00kjsafkywqc98sr"},{"post_id":"cjul87j2x00j7safkwpumpmli","tag_id":"cjul87j3f00kgsafkqyk8dssc","_id":"cjul87j3g00klsafk7sw35kr1"},{"post_id":"cjul87j3000jdsafkyg0gwvug","tag_id":"cjul87j3f00khsafk69xp596x","_id":"cjul87j3g00kmsafkn8nok2ye"},{"post_id":"cjul87j3300jgsafkyzeyutnt","tag_id":"cjul87j3g00kksafkwzzhucmi","_id":"cjul87j3h00kosafkkrarh86a"},{"post_id":"cjul87j3900jqsafkggyfpys3","tag_id":"cjul87j3700jmsafkxwsziw7w","_id":"cjul87j3i00kssafkqy6bcs7r"},{"post_id":"cjul87j3900jqsafkggyfpys3","tag_id":"cjul87j3900jrsafkg3e6uelw","_id":"cjul87j3i00ktsafk5a41pzpp"},{"post_id":"cjul87j3900jqsafkggyfpys3","tag_id":"cjul87j3h00kpsafkj76b0ma0","_id":"cjul87j3i00kusafkr10cri0y"},{"post_id":"cjul87j3900jqsafkggyfpys3","tag_id":"cjul87j3b00jysafkojfbt1l3","_id":"cjul87j3i00kvsafkczr33hoy"},{"post_id":"cjul87j3900jqsafkggyfpys3","tag_id":"cjul87j3b00jzsafkm1k1ootp","_id":"cjul87j3i00kwsafkjaducmk7"}],"Tag":[{"name":"OJ","_id":"cjul87ir70008safk8voaleyp"},{"name":"并查集","_id":"cjul87irh000csafk82ahz5y9"},{"name":"hdu","_id":"cjul87irj000fsafk7wdt2s23"},{"name":"杭电","_id":"cjul87irs000nsafkllgbliot"},{"name":"游戏","_id":"cjul87irw000qsafkk2j3vaav"},{"name":"博弈","_id":"cjul87is1000wsafktgx1zjcp"},{"name":"巴士博弈","_id":"cjul87is30010safkgdjh7h2r"},{"name":"HDU","_id":"cjul87is80013safk1i6bsaq5"},{"name":"HDU-1846","_id":"cjul87isa0016safkjotdujgu"},{"name":"===== 博弈 =====","_id":"cjul87isd001asafkpz2vdeo4"},{"name":"poj","_id":"cjul87isg001dsafkhjopzaab"},{"name":"POJ","_id":"cjul87isi001isafkrbv2y6vh"},{"name":"威瑟夫问题","_id":"cjul87isk001nsafklvb92hdv"},{"name":"HDU-5643","_id":"cjul87isn001tsafk39pvmjq0"},{"name":"bestcoder","_id":"cjul87isp001zsafkzm6wudqz"},{"name":"king-s-gam","_id":"cjul87isr0023safk4ddfy64i"},{"name":"矩阵快速幂","_id":"cjul87isw0029safkwo5b53ie"},{"name":"矩阵乘法快速优化","_id":"cjul87isy002fsafkpsuia5lx"},{"name":"c语言","_id":"cjul87it0002ksafkea5jz4ox"},{"name":"图形","_id":"cjul87it3002psafktrt4nb5y"},{"name":"分形","_id":"cjul87it5002usafkwof3n3r5"},{"name":"蓝桥杯","_id":"cjul87it8002ysafkfbbo8pnv"},{"name":"分治","_id":"cjul87itf0037safk0g9otqf2"},{"name":"数学","_id":"cjul87itk003hsafkz4hv3n4r"},{"name":"思维","_id":"cjul87itn003msafkemfy20fv"},{"name":"hdu-5606","_id":"cjul87itp003ssafkf53e7u5e"},{"name":"百度之星","_id":"cjul87itx0045safk708dhfp8"},{"name":"HDU-5698","_id":"cjul87iu3004fsafkdzxqnoqk"},{"name":"几何","_id":"cjul87iu8004psafkgixheefv"},{"name":"UVA-7308","_id":"cjul87iub004vsafk0909j1pv"},{"name":"==== 计算几何 ====","_id":"cjul87iuh0056safk6uks8nxi"},{"name":"uva","_id":"cjul87iun005gsafkxkfw4wns"},{"name":"数论","_id":"cjul87iut005qsafktavswp6p"},{"name":"Light-OJ","_id":"cjul87iuw005wsafkctqz3bf9"},{"name":"分解因子","_id":"cjul87iuy0062safkbgqcyyln"},{"name":"lightoj","_id":"cjul87iva006dsafkch5mgt2l"},{"name":"UVA-10780","_id":"cjul87ivh006qsafk5xehw02h"},{"name":"质因子分解","_id":"cjul87ivk006vsafkbijo6nnd"},{"name":"===== 模板 =====","_id":"cjul87ivp0071safkuw1zythl"},{"name":"大家不要看","_id":"cjul87ivr0076safkqgj8rnj6"},{"name":"===== 杂类 =====","_id":"cjul87ivt007bsafkvohhhipx"},{"name":"智障","_id":"cjul87ivv007hsafkeo7uee9b"},{"name":"SG函数","_id":"cjul87ivx007lsafk4dyvk0px"},{"name":"动态规划","_id":"cjul87iw0007qsafkjm2vdq6d"},{"name":"dp","_id":"cjul87iw3007vsafkjtarhjjl"},{"name":"==== 动态规划 ====","_id":"cjul87iw60081safkhdg7trso"},{"name":"===== 图论 =====","_id":"cjul87iwb008bsafkzxu2mcep"},{"name":"==== 字符串 ====","_id":"cjul87iwd008gsafk5onpd8vy"},{"name":"===== 数论 =====","_id":"cjul87iwi008qsafkdt75lr9r"},{"name":"=== 组合数学 ===","_id":"cjul87iwk008wsafklcgt3g5g"},{"name":"kruskal","_id":"cjul87iws009fsafkf13q9k6s"},{"name":"图论","_id":"cjul87iwu009ksafkjh0858u3"},{"name":"===== 各OJ =====","_id":"cjul87ix200a2safk4b6jenf2"},{"name":"codeforces","_id":"cjul87ix600a8safkjgzn9gfc"},{"name":"matrix","_id":"cjul87ixa00aisafki60t6b0k"},{"name":"算法","_id":"cjul87ixc00ansafk1kt5ettn"},{"name":"==== 数据结构 ====","_id":"cjul87iyj00d1safk0ylvawkw"},{"name":"acm","_id":"cjul87iyn00d7safkfrywi54k"},{"name":"操蛋的ACM之路","_id":"cjul87iyq00dcsafkr96aj3z8"},{"name":"SPOJ","_id":"cjul87iyt00dhsafka38z832c"},{"name":"fft","_id":"cjul87iz200dxsafkzofth3rn"},{"name":"位运算","_id":"cjul87iz400e1safk7eh1kgkd"},{"name":"数据结构","_id":"cjul87iz500e4safk8khxl7o5"},{"name":"hrbust","_id":"cjul87iz500e7safksdwmige5"},{"name":"套题","_id":"cjul87iz600ebsafkqq33q3rf"},{"name":"联通","_id":"cjul87j1u00h7safko51bjchc"},{"name":"51nod","_id":"cjul87j1w00hesafk008wpo2m"},{"name":"codechef","_id":"cjul87j2300hrsafkfshewktn"},{"name":"linux","_id":"cjul87j2r00iysafkeheyicy9"},{"name":"git","_id":"cjul87j2u00j2safku0t97w05"},{"name":"ruby","_id":"cjul87j2w00j5safkr5n1ymaf"},{"name":"docker","_id":"cjul87j2y00j8safk8f2drm1h"},{"name":"npm","_id":"cjul87j3000jcsafkpv5ijjjg"},{"name":"开发","_id":"cjul87j3400jhsafkw9ywc3c5"},{"name":"面试","_id":"cjul87j3700jmsafkxwsziw7w"},{"name":"C++","_id":"cjul87j3900jrsafkg3e6uelw"},{"name":"数据库","_id":"cjul87j3a00jusafkydqbwxgb"},{"name":"操作系统","_id":"cjul87j3b00jysafkojfbt1l3"},{"name":"计算机网络","_id":"cjul87j3b00jzsafkm1k1ootp"},{"name":"毕业设计","_id":"cjul87j3b00k0safk4wpovw83"},{"name":"实习","_id":"cjul87j3c00k3safkuacvqred"},{"name":"正则表达式","_id":"cjul87j3c00k6safk5jvvrktg"},{"name":"设计模式","_id":"cjul87j3e00kcsafkzkkzsrcy"},{"name":"虚拟化","_id":"cjul87j3f00kgsafkqyk8dssc"},{"name":"随笔","_id":"cjul87j3f00khsafk69xp596x"},{"name":"editor","_id":"cjul87j3g00kksafkwzzhucmi"},{"name":"大数据","_id":"cjul87j3h00kpsafkj76b0ma0"}]}}